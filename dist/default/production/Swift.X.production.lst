

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Mon Jul 20 09:54:11 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	strings,global,class=STRING,delta=2,noexec
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	maintext,global,class=CODE,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    29                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	intentry,global,class=CODE,delta=2
    58                           	psect	text39,local,class=CODE,merge=1,delta=2
    59                           	psect	text40,local,class=CODE,merge=1,delta=2
    60                           	psect	text41,local,class=CODE,merge=1,delta=2
    61                           	psect	text42,local,class=CODE,merge=1,delta=2
    62                           	psect	text43,local,class=CODE,merge=1,delta=2
    63                           	psect	text44,local,class=CODE,merge=1,delta=2
    64                           	psect	text45,local,class=CODE,merge=1,delta=2
    65                           	psect	text46,local,class=CODE,merge=1,delta=2
    66                           	psect	text47,local,class=CODE,merge=1,delta=2
    67                           	psect	functab,global,class=ENTRY,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 2.20
    71                           ; Generated 12/02/2020 GMT
    72                           ; 
    73                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F877A Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  000E                     	;# 
   120  000F                     	;# 
   121  0010                     	;# 
   122  0011                     	;# 
   123  0012                     	;# 
   124  0013                     	;# 
   125  0014                     	;# 
   126  0015                     	;# 
   127  0015                     	;# 
   128  0016                     	;# 
   129  0017                     	;# 
   130  0018                     	;# 
   131  0019                     	;# 
   132  001A                     	;# 
   133  001B                     	;# 
   134  001B                     	;# 
   135  001C                     	;# 
   136  001D                     	;# 
   137  001E                     	;# 
   138  001F                     	;# 
   139  0081                     	;# 
   140  0085                     	;# 
   141  0086                     	;# 
   142  0087                     	;# 
   143  0088                     	;# 
   144  0089                     	;# 
   145  008C                     	;# 
   146  008D                     	;# 
   147  008E                     	;# 
   148  0091                     	;# 
   149  0092                     	;# 
   150  0093                     	;# 
   151  0094                     	;# 
   152  0098                     	;# 
   153  0099                     	;# 
   154  009C                     	;# 
   155  009D                     	;# 
   156  009E                     	;# 
   157  009F                     	;# 
   158  010C                     	;# 
   159  010D                     	;# 
   160  010E                     	;# 
   161  010F                     	;# 
   162  018C                     	;# 
   163  018D                     	;# 
   164  0000                     	;# 
   165  0001                     	;# 
   166  0002                     	;# 
   167  0003                     	;# 
   168  0004                     	;# 
   169  0005                     	;# 
   170  0006                     	;# 
   171  0007                     	;# 
   172  0008                     	;# 
   173  0009                     	;# 
   174  000A                     	;# 
   175  000B                     	;# 
   176  000C                     	;# 
   177  000D                     	;# 
   178  000E                     	;# 
   179  000E                     	;# 
   180  000F                     	;# 
   181  0010                     	;# 
   182  0011                     	;# 
   183  0012                     	;# 
   184  0013                     	;# 
   185  0014                     	;# 
   186  0015                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0017                     	;# 
   190  0018                     	;# 
   191  0019                     	;# 
   192  001A                     	;# 
   193  001B                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001D                     	;# 
   197  001E                     	;# 
   198  001F                     	;# 
   199  0081                     	;# 
   200  0085                     	;# 
   201  0086                     	;# 
   202  0087                     	;# 
   203  0088                     	;# 
   204  0089                     	;# 
   205  008C                     	;# 
   206  008D                     	;# 
   207  008E                     	;# 
   208  0091                     	;# 
   209  0092                     	;# 
   210  0093                     	;# 
   211  0094                     	;# 
   212  0098                     	;# 
   213  0099                     	;# 
   214  009C                     	;# 
   215  009D                     	;# 
   216  009E                     	;# 
   217  009F                     	;# 
   218  010C                     	;# 
   219  010D                     	;# 
   220  010E                     	;# 
   221  010F                     	;# 
   222  018C                     	;# 
   223  018D                     	;# 
   224                           
   225                           	psect	idataBANK0
   226  0943                     __pidataBANK0:
   227                           
   228                           ;initializer for _Prescaler0
   229  0943  34FF               	retlw	255
   230                           
   231                           ;initializer for _Dio_configutation_A_7_seg
   232  0944  3400               	retlw	0
   233  0945  340C               	retlw	12
   234  0946  34FF               	retlw	255
   235  0947  3406               	retlw	6
   236                           
   237                           	psect	idataBANK1
   238  0ACD                     __pidataBANK1:
   239                           
   240                           ;initializer for _Segments_Code
   241  0ACD  34FE               	retlw	254
   242  0ACE  3406               	retlw	6
   243  0ACF  346D               	retlw	109
   244  0AD0  344F               	retlw	79
   245  0AD1  3466               	retlw	102
   246  0AD2  346D               	retlw	109
   247  0AD3  347D               	retlw	125
   248  0AD4  3407               	retlw	7
   249  0AD5  347F               	retlw	127
   250  0AD6  346F               	retlw	111
   251                           
   252                           ;initializer for _Timer_Configuration1
   253  0AD7  3401               	retlw	1
   254  0AD8  3400               	retlw	0
   255  0AD9  3401               	retlw	1
   256  0ADA  3430               	retlw	48
   257  0ADB  340D               	retlw	low (fp__timer1_interrupt_ovfRoutine-i1fpbase)
   258                           
   259                           ;initializer for _Dio_configutation_C
   260  0ADC  3402               	retlw	2
   261  0ADD  3418               	retlw	24
   262  0ADE  3400               	retlw	0
   263  0ADF  3400               	retlw	0
   264                           
   265                           ;initializer for _Dio_configutation_B
   266  0AE0  3401               	retlw	1
   267  0AE1  34FF               	retlw	255
   268  0AE2  34FF               	retlw	255
   269  0AE3  3400               	retlw	0
   270                           
   271                           ;initializer for _Timer_Configuration2_SOS
   272  0AE4  3402               	retlw	2
   273  0AE5  3400               	retlw	0
   274  0AE6  3402               	retlw	2
   275  0AE7  3402               	retlw	2
   276  0AE8  3404               	retlw	low (fp__timer_interrupt-i1fpbase)
   277                           
   278                           ;initializer for _Timer_Configuration0
   279  0AE9  3400               	retlw	0
   280  0AEA  34C7               	retlw	199
   281  0AEB  34A0               	retlw	160
   282  0AEC  3400               	retlw	0
   283  0AED  340A               	retlw	low (fp__timer0_interrupt_ovfRoutine-i1fpbase)
   284                           
   285                           ;initializer for _Timer_Configuration1_7_seg
   286  0AEE  3400               	retlw	0
   287  0AEF  34C2               	retlw	194
   288  0AF0  34A0               	retlw	160
   289  0AF1  3400               	retlw	0
   290  0AF2  3407               	retlw	low (fp__seven_seg_POV-i1fpbase)
   291                           
   292                           ;initializer for _ADC_Cnfiguration
   293  0AF3  3400               	retlw	0
   294  0AF4  3401               	retlw	1
   295  0AF5  3440               	retlw	64
   296  0AF6  3480               	retlw	128
   297  0AF7  34BF               	retlw	191
   298                           
   299                           ;initializer for _Dio_configutation_A_ADC
   300  0AF8  3400               	retlw	0
   301  0AF9  3401               	retlw	1
   302  0AFA  3400               	retlw	0
   303  0AFB  3406               	retlw	6
   304                           
   305                           ;initializer for _Dio_configutation_D
   306  0AFC  3403               	retlw	3
   307  0AFD  34FF               	retlw	255
   308  0AFE  34FF               	retlw	255
   309  0AFF  3400               	retlw	0
   310                           
   311                           	psect	strings
   312  0800                     __pstrings:
   313  0800                     stringtab:
   314  0800                     __stringtab:
   315  0800                     stringcode:	
   316                           ;	String table - string pointers are 1 byte each
   317                           
   318  0800                     stringdir:
   319  0800  3008               	movlw	high stringdir
   320  0801  008A               	movwf	10
   321  0802  0804               	movf	4,w
   322  0803  0A84               	incf	4,f
   323  0804  0782               	addwf	2,f
   324  0805                     __stringbase:
   325  0805  3400               	retlw	0
   326  0806                     __end_of__stringtab:
   327  0806                     _TMU_Configuration:
   328  0806  3401               	retlw	1
   329  0807  3402               	retlw	2
   330  0808                     __end_of_TMU_Configuration:
   331  0013                     _SSPBUF	set	19
   332  0014                     _SSPCON	set	20
   333  0063                     _SSPIF	set	99
   334  0087                     _TRISC	set	135
   335  0094                     _SSPSTAT	set	148
   336  0093                     _SSPADD	set	147
   337  0091                     _SSPCON2	set	145
   338  048C                     _ACKEN	set	1164
   339  048D                     _ACKDT	set	1165
   340  048B                     _RCEN	set	1163
   341  048E                     _ACKSTAT	set	1166
   342  048A                     _PEN	set	1162
   343  0489                     _RSEN	set	1161
   344  0488                     _SEN	set	1160
   345                           
   346                           	psect	cinit
   347  0015                     start_initialization:	
   348                           ; #config settings
   349                           
   350  0015                     __initialization:
   351                           
   352                           ; Initialize objects allocated to BANK1
   353  0015  1383               	bcf	3,7	;select IRP bank0
   354  0016  30D3               	movlw	low (__pdataBANK1+51)
   355  0017  00FD               	movwf	btemp+-1
   356  0018  300A               	movlw	high __pidataBANK1
   357  0019  00FE               	movwf	btemp
   358  001A  30CD               	movlw	low __pidataBANK1
   359  001B  00FF               	movwf	btemp+1
   360  001C  30A0               	movlw	low __pdataBANK1
   361  001D  0084               	movwf	4
   362  001E  120A  158A  21ED  120A  118A  	fcall	init_ram0
   363                           
   364                           ; Initialize objects allocated to BANK0
   365  0023  306B               	movlw	low (__pdataBANK0+5)
   366  0024  00FD               	movwf	btemp+-1
   367  0025  3009               	movlw	high __pidataBANK0
   368  0026  00FE               	movwf	btemp
   369  0027  3043               	movlw	low __pidataBANK0
   370  0028  00FF               	movwf	btemp+1
   371  0029  3066               	movlw	low __pdataBANK0
   372  002A  0084               	movwf	4
   373  002B  120A  158A  21ED  120A  118A  	fcall	init_ram0
   374                           
   375                           ; Clear objects allocated to BANK3
   376  0030  1783               	bsf	3,7	;select IRP bank2
   377  0031  3090               	movlw	low __pbssBANK3
   378  0032  0084               	movwf	4
   379  0033  30B9               	movlw	low (__pbssBANK3+41)
   380  0034  120A  158A  2148  120A  118A  	fcall	clear_ram0
   381                           
   382                           ; Clear objects allocated to BANK1
   383  0039  1383               	bcf	3,7	;select IRP bank0
   384  003A  30D3               	movlw	low __pbssBANK1
   385  003B  0084               	movwf	4
   386  003C  30EC               	movlw	low (__pbssBANK1+25)
   387  003D  120A  158A  2148  120A  118A  	fcall	clear_ram0
   388                           
   389                           ; Clear objects allocated to BANK0
   390  0042  3020               	movlw	low __pbssBANK0
   391  0043  0084               	movwf	4
   392  0044  3046               	movlw	low (__pbssBANK0+38)
   393  0045  120A  158A  2148  120A  118A  	fcall	clear_ram0
   394  004A                     end_of_initialization:	
   395                           ;End of C runtime variable initialization code
   396                           
   397  004A                     __end_of__initialization:
   398  004A  0183               	clrf	3
   399  004B  120A  158A  29A9   	ljmp	_main	;jump to C main() function
   400                           
   401                           	psect	bssBANK0
   402  0020                     __pbssBANK0:
   403  0020                     _Start_status:
   404  0020                     	ds	3
   405  0023                     pushButtonGetStatus@u8_S_button_status:
   406  0023                     	ds	3
   407  0026                     Task2@adc_data:
   408  0026                     	ds	2
   409  0028                     _last_temp_reading:
   410  0028                     	ds	2
   411  002A                     _arr_display:
   412  002A                     	ds	2
   413  002C                     _u16_result_data:
   414  002C                     	ds	2
   415  002E                     Task2@readings_counter:
   416  002E                     	ds	1
   417  002F                     Task1@u8_Counter1:
   418  002F                     	ds	1
   419  0030                     Task1@u8_Counter:
   420  0030                     	ds	1
   421  0031                     _stu8_increment:
   422  0031                     	ds	1
   423  0032                     _u8_timer2Count:
   424  0032                     	ds	1
   425  0033                     _Prescaler1:
   426  0033                     	ds	1
   427  0034                     _u8Excution_to_be_done:
   428  0034                     	ds	1
   429  0035                     _u8_FUN_index:
   430  0035                     	ds	1
   431  0036                     _u8_Is_Intialized:
   432  0036                     	ds	1
   433  0037                     _u8_Init_finished:
   434  0037                     	ds	1
   435  0038                     DIO_Write@first_powerup:
   436  0038                     	ds	1
   437  0039                     DIO_init@first_powerup_init:
   438  0039                     	ds	1
   439  003A                     _is_init:
   440  003A                     	ds	1
   441  003B                     _TIMER2OVF_INT:
   442  003B                     	ds	1
   443  003C                     _TIMER1OVF_INT:
   444  003C                     	ds	1
   445  003D                     _TIMER0OVF_INT:
   446  003D                     	ds	1
   447  003E                     _u8prepheral_int_enabled:
   448  003E                     	ds	1
   449  003F                     _u8global_int_enabled:
   450  003F                     	ds	1
   451  0040                     _disp_counter:
   452  0040                     	ds	1
   453  0041                     _ovf_counter:
   454  0041                     	ds	1
   455  0042                     _ADC_INT:
   456  0042                     	ds	1
   457  0043                     pushButtonGetStatus@u8_Button_press:
   458  0043                     	ds	3
   459                           
   460                           	psect	dataBANK0
   461  0066                     __pdataBANK0:
   462  0066                     _Prescaler0:
   463  0066                     	ds	1
   464  0067                     _Dio_configutation_A_7_seg:
   465  0067                     	ds	4
   466                           
   467                           	psect	bssBANK1
   468  00D3                     __pbssBANK1:
   469  00D3                     _start:
   470  00D3                     	ds	6
   471  00D9                     _Timer_Deinit_Configuration2:
   472  00D9                     	ds	5
   473  00DE                     _Timer_Deinit_Configuration1:
   474  00DE                     	ds	5
   475  00E3                     _Dio_configutation_E:
   476  00E3                     	ds	4
   477  00E7                     _Timer_Deinit_Configuration0:
   478  00E7                     	ds	5
   479                           
   480                           	psect	dataBANK1
   481  00A0                     __pdataBANK1:
   482  00A0                     _Segments_Code:
   483  00A0                     	ds	10
   484  00AA                     _Timer_Configuration1:
   485  00AA                     	ds	5
   486  00AF                     _Dio_configutation_C:
   487  00AF                     	ds	4
   488  00B3                     _Dio_configutation_B:
   489  00B3                     	ds	4
   490  00B7                     _Timer_Configuration2_SOS:
   491  00B7                     	ds	5
   492  00BC                     _Timer_Configuration0:
   493  00BC                     	ds	5
   494  00C1                     _Timer_Configuration1_7_seg:
   495  00C1                     	ds	5
   496  00C6                     _ADC_Cnfiguration:
   497  00C6                     	ds	5
   498  00CB                     _Dio_configutation_A_ADC:
   499  00CB                     	ds	4
   500  00CF                     _Dio_configutation_D:
   501  00CF                     	ds	4
   502                           
   503                           	psect	bssBANK3
   504  0190                     __pbssBANK3:
   505  0190                     _Buffer_Array:
   506  0190                     	ds	21
   507  01A5                     _last_Ten_readings:
   508  01A5                     	ds	20
   509                           
   510                           	psect	inittext
   511  09E9                     init_fetch0:	
   512                           ;	Called with low address in FSR and high address in W
   513                           
   514  09E9  087E               	movf	btemp,w
   515  09EA  008A               	movwf	10
   516  09EB  087F               	movf	btemp+1,w
   517  09EC  0082               	movwf	2
   518  09ED                     init_ram0:	
   519                           ;Called with:
   520                           ;	high address of idata address in btemp 
   521                           ;	low address of idata address in btemp+1 
   522                           ;	low address of data in FSR
   523                           ;	high address + 1 of data in btemp-1
   524                           
   525  09ED  120A  158A  21E9  120A  158A  	fcall	init_fetch0
   526  09F2  0080               	movwf	0
   527  09F3  0A84               	incf	4,f
   528  09F4  0804               	movf	4,w
   529  09F5  067D               	xorwf	btemp+-1,w
   530  09F6  1903               	btfsc	3,2
   531  09F7  3400               	retlw	0
   532  09F8  0AFF               	incf	btemp+1,f
   533  09F9  1903               	btfsc	3,2
   534  09FA  0AFE               	incf	btemp,f
   535  09FB  29ED               	goto	init_ram0
   536                           
   537                           	psect	clrtext
   538  0948                     clear_ram0:	
   539                           ;	Called with FSR containing the base address, and
   540                           ;	W with the last address+1
   541                           
   542  0948  0064               	clrwdt	;clear the watchdog before getting into this loop
   543  0949                     clrloop0:
   544  0949  0180               	clrf	0	;clear RAM location pointed to by FSR
   545  094A  0A84               	incf	4,f	;increment pointer
   546  094B  0604               	xorwf	4,w	;XOR with final address
   547  094C  1903               	btfsc	3,2	;have we reached the end yet?
   548  094D  3400               	retlw	0	;all done for this memory range, return
   549  094E  0604               	xorwf	4,w	;XOR again to restore value
   550  094F  2949               	goto	clrloop0	;do the next byte
   551                           
   552                           	psect	cstackBANK1
   553  00EC                     __pcstackBANK1:
   554  00EC                     ??_SOS_Run:
   555                           
   556                           ; 1 bytes @ 0x0
   557  00EC                     	ds	4
   558                           
   559                           	psect	cstackCOMMON
   560  0070                     __pcstackCOMMON:
   561  0070                     ?_special_int_enable:
   562  0070                     ?_adc_interrupt_routine:	
   563                           ; 1 bytes @ 0x0
   564                           
   565  0070                     ?_special_int_disable:	
   566                           ; 1 bytes @ 0x0
   567                           
   568  0070                     ?_clear_int_flag:	
   569                           ; 1 bytes @ 0x0
   570                           
   571  0070                     ??_clear_int_flag:	
   572                           ; 1 bytes @ 0x0
   573                           
   574  0070                     ?_seven_seg_POV:	
   575                           ; 1 bytes @ 0x0
   576                           
   577  0070                     ?_sevenSegDisable:	
   578                           ; 1 bytes @ 0x0
   579                           
   580  0070                     ?_sevenSegEnable:	
   581                           ; 1 bytes @ 0x0
   582                           
   583  0070                     ?_global_int_enable:	
   584                           ; 1 bytes @ 0x0
   585                           
   586  0070                     ?_timer_interrupt:	
   587                           ; 1 bytes @ 0x0
   588                           
   589  0070                     ??_timer_interrupt:	
   590                           ; 1 bytes @ 0x0
   591                           
   592  0070                     ?_Task1:	
   593                           ; 1 bytes @ 0x0
   594                           
   595  0070                     ?_Task2:	
   596                           ; 1 bytes @ 0x0
   597                           
   598  0070                     ?_Task3:	
   599                           ; 1 bytes @ 0x0
   600                           
   601  0070                     ?_ADC_INIT:	
   602                           ; 1 bytes @ 0x0
   603                           
   604  0070                     ?_sevenSegInit:	
   605                           ; 1 bytes @ 0x0
   606                           
   607  0070                     ?_sevenSegWrite:	
   608                           ; 1 bytes @ 0x0
   609                           
   610  0070                     ?_checkmyisr:	
   611                           ; 1 bytes @ 0x0
   612                           
   613  0070                     ?_pushButtonGetStatus:	
   614                           ; 1 bytes @ 0x0
   615                           
   616  0070                     ?_I2C_Master_Wait:	
   617                           ; 1 bytes @ 0x0
   618                           
   619  0070                     ?_I2C_Master_Start:	
   620                           ; 1 bytes @ 0x0
   621                           
   622  0070                     ?_I2C_Master_RepeatedStart:	
   623                           ; 1 bytes @ 0x0
   624                           
   625  0070                     ?_I2C_Master_Stop:	
   626                           ; 1 bytes @ 0x0
   627                           
   628  0070                     ?_I2C_Master_Write:	
   629                           ; 1 bytes @ 0x0
   630                           
   631  0070                     ?_I2C_Read_Byte:	
   632                           ; 1 bytes @ 0x0
   633                           
   634  0070                     ?_I2C_NACK:	
   635                           ; 1 bytes @ 0x0
   636                           
   637  0070                     ?_SOS_Init:	
   638                           ; 1 bytes @ 0x0
   639                           
   640  0070                     ?_SOS_Run:	
   641                           ; 1 bytes @ 0x0
   642                           
   643  0070                     ?_timer0_interrupt_ovfRoutine:	
   644                           ; 1 bytes @ 0x0
   645                           
   646  0070                     ??_timer0_interrupt_ovfRoutine:	
   647                           ; 1 bytes @ 0x0
   648                           
   649  0070                     ?_timer1_interrupt_ovfRoutine:	
   650                           ; 1 bytes @ 0x0
   651                           
   652  0070                     ??_timer1_interrupt_ovfRoutine:	
   653                           ; 1 bytes @ 0x0
   654                           
   655  0070                     ?_system_init:	
   656                           ; 1 bytes @ 0x0
   657                           
   658  0070                     ?_main:	
   659                           ; 1 bytes @ 0x0
   660                           
   661  0070                     ?i1_sevenSegDisable:	
   662                           ; 1 bytes @ 0x0
   663                           
   664  0070                     ?i1_DIO_Write:	
   665                           ; 1 bytes @ 0x0
   666                           
   667  0070                     i1DIO_Write@pins:	
   668                           ; 1 bytes @ 0x0
   669                           
   670                           
   671                           ; 1 bytes @ 0x0
   672  0070                     	ds	1
   673  0071                     i1DIO_Write@value:
   674                           
   675                           ; 1 bytes @ 0x1
   676  0071                     	ds	1
   677  0072                     ??i1_DIO_Write:
   678  0072                     clear_int_flag@ret_error:	
   679                           ; 1 bytes @ 0x2
   680                           
   681                           
   682                           ; 1 bytes @ 0x2
   683  0072                     	ds	1
   684  0073                     clear_int_flag@u8_interrupt_prepherals:
   685                           
   686                           ; 1 bytes @ 0x3
   687  0073                     	ds	1
   688  0074                     ??_adc_interrupt_routine:
   689  0074                     i1DIO_Write@ret_error:	
   690                           ; 1 bytes @ 0x4
   691                           
   692                           
   693                           ; 1 bytes @ 0x4
   694  0074                     	ds	1
   695  0075                     i1DIO_Write@GPIO:
   696                           
   697                           ; 1 bytes @ 0x5
   698  0075                     	ds	1
   699  0076                     ??i1_sevenSegDisable:
   700                           
   701                           ; 1 bytes @ 0x6
   702  0076                     	ds	2
   703  0078                     i1sevenSegDisable@en_segment_id:
   704                           
   705                           ; 1 bytes @ 0x8
   706  0078                     	ds	1
   707  0079                     i1sevenSegDisable@ret:
   708                           
   709                           ; 1 bytes @ 0x9
   710  0079                     	ds	1
   711  007A                     ??_sevenSegEnable:
   712                           
   713                           ; 1 bytes @ 0xA
   714  007A                     	ds	2
   715  007C                     sevenSegEnable@segment_id:
   716                           
   717                           ; 1 bytes @ 0xC
   718  007C                     	ds	1
   719  007D                     sevenSegEnable@ret:
   720                           
   721                           ; 1 bytes @ 0xD
   722  007D                     	ds	1
   723  007E                     ??_seven_seg_POV:
   724                           
   725                           	psect	cstackBANK0
   726  0046                     __pcstackBANK0:	
   727                           ; 1 bytes @ 0xE
   728                           
   729  0046                     ??_checkmyisr:
   730                           
   731                           ; 1 bytes @ 0x0
   732  0046                     	ds	4
   733  004A                     ??_special_int_enable:
   734  004A                     ??_special_int_disable:	
   735                           ; 1 bytes @ 0x4
   736                           
   737  004A                     ?_SwDelay_ms:	
   738                           ; 1 bytes @ 0x4
   739                           
   740  004A                     ?_SwDelay_us:	
   741                           ; 1 bytes @ 0x4
   742                           
   743  004A                     ?_DIO_init:	
   744                           ; 1 bytes @ 0x4
   745                           
   746  004A                     ??_DIO_init:	
   747                           ; 1 bytes @ 0x4
   748                           
   749  004A                     ?_DIO_Write:	
   750                           ; 1 bytes @ 0x4
   751                           
   752  004A                     ?_Timer_Start:	
   753                           ; 1 bytes @ 0x4
   754                           
   755  004A                     ??_global_int_enable:	
   756                           ; 1 bytes @ 0x4
   757                           
   758  004A                     ?_DIO_Read:	
   759                           ; 1 bytes @ 0x4
   760                           
   761  004A                     ??_Task3:	
   762                           ; 1 bytes @ 0x4
   763                           
   764  004A                     ??_I2C_Master_Wait:	
   765                           ; 1 bytes @ 0x4
   766                           
   767  004A                     ??_I2C_Master_Start:	
   768                           ; 1 bytes @ 0x4
   769                           
   770  004A                     ??_I2C_Master_RepeatedStart:	
   771                           ; 1 bytes @ 0x4
   772                           
   773  004A                     ??_I2C_Master_Stop:	
   774                           ; 1 bytes @ 0x4
   775                           
   776  004A                     ??_I2C_Master_Write:	
   777                           ; 1 bytes @ 0x4
   778                           
   779  004A                     ??_I2C_Read_Byte:	
   780                           ; 1 bytes @ 0x4
   781                           
   782  004A                     ??_I2C_NACK:	
   783                           ; 1 bytes @ 0x4
   784                           
   785  004A                     ?___bmul:	
   786                           ; 1 bytes @ 0x4
   787                           
   788  004A                     ?___awdiv:	
   789                           ; 1 bytes @ 0x4
   790                           
   791  004A                     ?___awmod:	
   792                           ; 2 bytes @ 0x4
   793                           
   794  004A                     ?___lldiv:	
   795                           ; 2 bytes @ 0x4
   796                           
   797  004A                     I2C_Master_Write@data:	
   798                           ; 4 bytes @ 0x4
   799                           
   800  004A                     DIO_Write@pins:	
   801                           ; 1 bytes @ 0x4
   802                           
   803  004A                     DIO_Read@pins:	
   804                           ; 1 bytes @ 0x4
   805                           
   806  004A                     ___bmul@multiplicand:	
   807                           ; 1 bytes @ 0x4
   808                           
   809  004A                     Timer_Start@Timer_Count:	
   810                           ; 1 bytes @ 0x4
   811                           
   812  004A                     ___awdiv@divisor:	
   813                           ; 2 bytes @ 0x4
   814                           
   815  004A                     ___awmod@divisor:	
   816                           ; 2 bytes @ 0x4
   817                           
   818  004A                     SwDelay_ms@n:	
   819                           ; 2 bytes @ 0x4
   820                           
   821  004A                     SwDelay_us@n:	
   822                           ; 4 bytes @ 0x4
   823                           
   824  004A                     ___lldiv@divisor:	
   825                           ; 4 bytes @ 0x4
   826                           
   827                           
   828                           ; 4 bytes @ 0x4
   829  004A                     	ds	1
   830  004B                     ?_EEPROM_Write:
   831  004B                     ?_EEPROM_Read:	
   832                           ; 1 bytes @ 0x5
   833                           
   834  004B                     ??___bmul:	
   835                           ; 1 bytes @ 0x5
   836                           
   837  004B                     DIO_Write@value:	
   838                           ; 1 bytes @ 0x5
   839                           
   840  004B                     DIO_Read@data:	
   841                           ; 1 bytes @ 0x5
   842                           
   843  004B                     ___bmul@product:	
   844                           ; 1 bytes @ 0x5
   845                           
   846  004B                     EEPROM_Write@add:	
   847                           ; 1 bytes @ 0x5
   848                           
   849  004B                     EEPROM_Read@add:	
   850                           ; 2 bytes @ 0x5
   851                           
   852                           
   853                           ; 2 bytes @ 0x5
   854  004B                     	ds	1
   855  004C                     ??_DIO_Write:
   856  004C                     ??_Timer_Start:	
   857                           ; 1 bytes @ 0x6
   858                           
   859  004C                     ??_DIO_Read:	
   860                           ; 1 bytes @ 0x6
   861                           
   862  004C                     special_int_enable@u8_interrupt_prepherals:	
   863                           ; 1 bytes @ 0x6
   864                           
   865  004C                     special_int_disable@u8_interrupt_prepherals:	
   866                           ; 1 bytes @ 0x6
   867                           
   868  004C                     DIO_init@ret_error:	
   869                           ; 1 bytes @ 0x6
   870                           
   871  004C                     ___bmul@multiplier:	
   872                           ; 1 bytes @ 0x6
   873                           
   874  004C                     ___awdiv@dividend:	
   875                           ; 1 bytes @ 0x6
   876                           
   877  004C                     ___awmod@dividend:	
   878                           ; 2 bytes @ 0x6
   879                           
   880                           
   881                           ; 2 bytes @ 0x6
   882  004C                     	ds	1
   883  004D                     ??_EEPROM_Read:
   884  004D                     ?_SOS_Create_Task:	
   885                           ; 1 bytes @ 0x7
   886                           
   887  004D                     special_int_enable@ret_error:	
   888                           ; 1 bytes @ 0x7
   889                           
   890  004D                     special_int_disable@ret_error:	
   891                           ; 1 bytes @ 0x7
   892                           
   893  004D                     EEPROM_Write@data:	
   894                           ; 1 bytes @ 0x7
   895                           
   896  004D                     EEPROM_Read@Data:	
   897                           ; 1 bytes @ 0x7
   898                           
   899  004D                     DIO_init@DIO_info:	
   900                           ; 1 bytes @ 0x7
   901                           
   902  004D                     SOS_Create_Task@u8_Preodicity:	
   903                           ; 1 bytes @ 0x7
   904                           
   905                           
   906                           ; 1 bytes @ 0x7
   907  004D                     	ds	1
   908  004E                     ??_SwDelay_ms:
   909  004E                     ??_SwDelay_us:	
   910                           ; 1 bytes @ 0x8
   911                           
   912  004E                     ?_Timer_Init:	
   913                           ; 1 bytes @ 0x8
   914                           
   915  004E                     ??_Timer_Init:	
   916                           ; 1 bytes @ 0x8
   917                           
   918  004E                     ??_ADC_INIT:	
   919                           ; 1 bytes @ 0x8
   920                           
   921  004E                     ??_EEPROM_Write:	
   922                           ; 1 bytes @ 0x8
   923                           
   924  004E                     ??___awdiv:	
   925                           ; 1 bytes @ 0x8
   926                           
   927  004E                     ??___awmod:	
   928                           ; 1 bytes @ 0x8
   929                           
   930  004E                     DIO_Write@ret_error:	
   931                           ; 1 bytes @ 0x8
   932                           
   933  004E                     DIO_Read@ret_error:	
   934                           ; 1 bytes @ 0x8
   935                           
   936  004E                     SOS_Create_Task@u8_function_index:	
   937                           ; 1 bytes @ 0x8
   938                           
   939  004E                     Timer_Start@Timer_CH_NO:	
   940                           ; 1 bytes @ 0x8
   941                           
   942  004E                     ___awdiv@counter:	
   943                           ; 1 bytes @ 0x8
   944                           
   945  004E                     ___awmod@counter:	
   946                           ; 1 bytes @ 0x8
   947                           
   948  004E                     ___lldiv@dividend:	
   949                           ; 1 bytes @ 0x8
   950                           
   951                           
   952                           ; 4 bytes @ 0x8
   953  004E                     	ds	1
   954  004F                     DIO_Write@GPIO:
   955  004F                     DIO_Read@GPIO:	
   956                           ; 1 bytes @ 0x9
   957                           
   958  004F                     Timer_Start@ret_error:	
   959                           ; 1 bytes @ 0x9
   960                           
   961  004F                     ___awdiv@sign:	
   962                           ; 1 bytes @ 0x9
   963                           
   964  004F                     ___awmod@sign:	
   965                           ; 1 bytes @ 0x9
   966                           
   967  004F                     SOS_Create_Task@u16_Time_delay:	
   968                           ; 1 bytes @ 0x9
   969                           
   970                           
   971                           ; 2 bytes @ 0x9
   972  004F                     	ds	1
   973  0050                     ??_sevenSegDisable:
   974  0050                     ??_pushButtonGetStatus:	
   975                           ; 1 bytes @ 0xA
   976                           
   977  0050                     ADC_INIT@ret_error:	
   978                           ; 1 bytes @ 0xA
   979                           
   980  0050                     Timer_Init@ret_error:	
   981                           ; 1 bytes @ 0xA
   982                           
   983  0050                     ___awdiv@quotient:	
   984                           ; 1 bytes @ 0xA
   985                           
   986                           
   987                           ; 2 bytes @ 0xA
   988  0050                     	ds	1
   989  0051                     ??_SOS_Create_Task:
   990  0051                     ADC_INIT@ADC_info:	
   991                           ; 1 bytes @ 0xB
   992                           
   993  0051                     SOS_Create_Task@Function_Consumer:	
   994                           ; 1 bytes @ 0xB
   995                           
   996  0051                     Timer_Init@Timer_cfg:	
   997                           ; 1 bytes @ 0xB
   998                           
   999                           
  1000                           ; 1 bytes @ 0xB
  1001  0051                     	ds	1
  1002  0052                     ??_sevenSegWrite:
  1003  0052                     ??_SOS_Init:	
  1004                           ; 1 bytes @ 0xC
  1005                           
  1006  0052                     ??___lldiv:	
  1007                           ; 1 bytes @ 0xC
  1008                           
  1009  0052                     sevenSegDisable@en_segment_id:	
  1010                           ; 1 bytes @ 0xC
  1011                           
  1012  0052                     pushButtonGetStatus@en_butotn_id:	
  1013                           ; 1 bytes @ 0xC
  1014                           
  1015  0052                     SwDelay_ms@counter_256:	
  1016                           ; 1 bytes @ 0xC
  1017                           
  1018  0052                     SOS_Create_Task@ret:	
  1019                           ; 1 bytes @ 0xC
  1020                           
  1021                           
  1022                           ; 1 bytes @ 0xC
  1023  0052                     	ds	1
  1024  0053                     sevenSegDisable@ret:
  1025  0053                     pushButtonGetStatus@pushreturn:	
  1026                           ; 1 bytes @ 0xD
  1027                           
  1028  0053                     SwDelay_ms@counter_21:	
  1029                           ; 1 bytes @ 0xD
  1030                           
  1031  0053                     ___lldiv@quotient:	
  1032                           ; 1 bytes @ 0xD
  1033                           
  1034                           
  1035                           ; 4 bytes @ 0xD
  1036  0053                     	ds	1
  1037  0054                     ??_Task1:
  1038  0054                     ??_sevenSegInit:	
  1039                           ; 1 bytes @ 0xE
  1040                           
  1041  0054                     ?_ADC_READ:	
  1042                           ; 1 bytes @ 0xE
  1043                           
  1044  0054                     sevenSegInit@ret:	
  1045                           ; 2 bytes @ 0xE
  1046                           
  1047  0054                     sevenSegWrite@ret:	
  1048                           ; 1 bytes @ 0xE
  1049                           
  1050  0054                     SOS_Init@u8_channel_ID:	
  1051                           ; 1 bytes @ 0xE
  1052                           
  1053                           
  1054                           ; 1 bytes @ 0xE
  1055  0054                     	ds	1
  1056  0055                     sevenSegWrite@u8_number:
  1057  0055                     SOS_Init@ret:	
  1058                           ; 1 bytes @ 0xF
  1059                           
  1060                           
  1061                           ; 1 bytes @ 0xF
  1062  0055                     	ds	1
  1063  0056                     ??_ADC_READ:
  1064  0056                     SOS_Init@ConfigPtr:	
  1065                           ; 1 bytes @ 0x10
  1066                           
  1067                           
  1068                           ; 1 bytes @ 0x10
  1069  0056                     	ds	1
  1070  0057                     ??_system_init:
  1071  0057                     ___lldiv@counter:	
  1072                           ; 1 bytes @ 0x11
  1073                           
  1074                           
  1075                           ; 1 bytes @ 0x11
  1076  0057                     	ds	1
  1077  0058                     ?_I2C_Master_Init:
  1078  0058                     I2C_Master_Init@baud:	
  1079                           ; 1 bytes @ 0x12
  1080                           
  1081                           
  1082                           ; 4 bytes @ 0x12
  1083  0058                     	ds	4
  1084  005C                     ??_I2C_Master_Init:
  1085                           
  1086                           ; 1 bytes @ 0x16
  1087  005C                     	ds	4
  1088  0060                     ??_Task2:
  1089                           
  1090                           ; 1 bytes @ 0x1A
  1091  0060                     	ds	2
  1092  0062                     Task2@EE_Data:
  1093                           
  1094                           ; 1 bytes @ 0x1C
  1095  0062                     	ds	4
  1096  0066                     ??_main:
  1097                           
  1098                           	psect	maintext
  1099  09A9                     __pmaintext:	
  1100                           ; 1 bytes @ 0x20
  1101 ;;
  1102 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1103 ;;
  1104 ;; *************** function _main *****************
  1105 ;; Defined at:
  1106 ;;		line 19 in file "main.c"
  1107 ;; Parameters:    Size  Location     Type
  1108 ;;		None
  1109 ;; Auto vars:     Size  Location     Type
  1110 ;;		None
  1111 ;; Return value:  Size  Location     Type
  1112 ;;                  1    wreg      void 
  1113 ;; Registers used:
  1114 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1115 ;; Tracked objects:
  1116 ;;		On entry : B00/0
  1117 ;;		On exit  : 0/0
  1118 ;;		Unchanged: 0/0
  1119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1120 ;;      Params:         0       0       0       0       0
  1121 ;;      Locals:         0       0       0       0       0
  1122 ;;      Temps:          0       0       0       0       0
  1123 ;;      Totals:         0       0       0       0       0
  1124 ;;Total ram usage:        0 bytes
  1125 ;; Hardware stack levels required when called:   11
  1126 ;; This function calls:
  1127 ;;		_SOS_Run
  1128 ;;		_system_init
  1129 ;; This function is called by:
  1130 ;;		Startup code after reset
  1131 ;; This function uses a non-reentrant model
  1132 ;;
  1133                           
  1134                           
  1135                           ;psect for function _main
  1136  09A9                     _main:
  1137  09A9                     l5638:	
  1138                           ;incstack = 0
  1139 ;; hardware stack exceeded
  1140                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1141                           
  1142                           
  1143                           ;main.c: 20:     system_init();
  1144  09A9  120A  158A  239D  120A  158A  	fcall	_system_init
  1145  09AE                     l650:	
  1146                           ;main.c: 21:   while(1)
  1147                           
  1148                           
  1149                           ;main.c: 22:   {;main.c: 23:  SOS_Run();
  1150  09AE  120A  118A  22B8  120A  158A  	fcall	_SOS_Run
  1151  09B3  29AE               	goto	l650
  1152  09B4  120A  118A  2812   	ljmp	start
  1153  09B7                     __end_of_main:
  1154                           
  1155                           	psect	text1
  1156  0B9D                     __ptext1:	
  1157 ;; *************** function _system_init *****************
  1158 ;; Defined at:
  1159 ;;		line 9 in file "main.c"
  1160 ;; Parameters:    Size  Location     Type
  1161 ;;		None
  1162 ;; Auto vars:     Size  Location     Type
  1163 ;;  ret             1    0        unsigned char 
  1164 ;; Return value:  Size  Location     Type
  1165 ;;                  1    wreg      void 
  1166 ;; Registers used:
  1167 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1168 ;; Tracked objects:
  1169 ;;		On entry : 0/0
  1170 ;;		On exit  : 0/0
  1171 ;;		Unchanged: 0/0
  1172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1173 ;;      Params:         0       0       0       0       0
  1174 ;;      Locals:         0       1       0       0       0
  1175 ;;      Temps:          0       0       0       0       0
  1176 ;;      Totals:         0       1       0       0       0
  1177 ;;Total ram usage:        1 bytes
  1178 ;; Hardware stack levels used:    1
  1179 ;; Hardware stack levels required when called:    9
  1180 ;; This function calls:
  1181 ;;		_SOS_Create_Task
  1182 ;;		_SOS_Init
  1183 ;; This function is called by:
  1184 ;;		_main
  1185 ;; This function uses a non-reentrant model
  1186 ;;
  1187                           
  1188                           
  1189                           ;psect for function _system_init
  1190  0B9D                     _system_init:
  1191  0B9D                     l5616:	
  1192                           ;incstack = 0
  1193 ;; hardware stack exceeded
  1194                           ; Regs used in _system_init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1195                           
  1196  0B9D                     l5618:
  1197  0B9D  3001               	movlw	(low ((_TMU_Configuration-__stringbase)| (0+32768)))& (0+255)
  1198  0B9E  120A  118A  24DA  120A  158A  	fcall	_SOS_Init
  1199  0BA3                     l5620:
  1200  0BA3  1283               	bcf	3,5	;RP0=0, select bank0
  1201  0BA4  1303               	bcf	3,6	;RP1=0, select bank0
  1202  0BA5  01CD               	clrf	SOS_Create_Task@u8_Preodicity
  1203  0BA6  0ACD               	incf	SOS_Create_Task@u8_Preodicity,f
  1204  0BA7  01CE               	clrf	SOS_Create_Task@u8_function_index
  1205  0BA8  3001               	movlw	1
  1206  0BA9  00CF               	movwf	SOS_Create_Task@u16_Time_delay
  1207  0BAA  3000               	movlw	0
  1208  0BAB  00D0               	movwf	SOS_Create_Task@u16_Time_delay+1
  1209  0BAC  300A               	movlw	(low (fp__Task1-fpbase))& (0+255)
  1210  0BAD  120A  118A  26E4  120A  158A  	fcall	_SOS_Create_Task
  1211  0BB2                     l5622:
  1212  0BB2  1283               	bcf	3,5	;RP0=0, select bank0
  1213  0BB3  1303               	bcf	3,6	;RP1=0, select bank0
  1214  0BB4  01CD               	clrf	SOS_Create_Task@u8_Preodicity
  1215  0BB5  0ACD               	incf	SOS_Create_Task@u8_Preodicity,f
  1216  0BB6  01CE               	clrf	SOS_Create_Task@u8_function_index
  1217  0BB7  0ACE               	incf	SOS_Create_Task@u8_function_index,f
  1218  0BB8  3032               	movlw	50
  1219  0BB9  00CF               	movwf	SOS_Create_Task@u16_Time_delay
  1220  0BBA  3000               	movlw	0
  1221  0BBB  00D0               	movwf	SOS_Create_Task@u16_Time_delay+1
  1222  0BBC  300D               	movlw	(low (fp__Task2-fpbase))& (0+255)
  1223  0BBD  120A  118A  26E4  120A  158A  	fcall	_SOS_Create_Task
  1224  0BC2                     l5624:
  1225  0BC2  1283               	bcf	3,5	;RP0=0, select bank0
  1226  0BC3  1303               	bcf	3,6	;RP1=0, select bank0
  1227  0BC4  01CD               	clrf	SOS_Create_Task@u8_Preodicity
  1228  0BC5  0ACD               	incf	SOS_Create_Task@u8_Preodicity,f
  1229  0BC6  3002               	movlw	2
  1230  0BC7  00FF               	movwf	btemp+1
  1231  0BC8  087F               	movf	btemp+1,w
  1232  0BC9  00CE               	movwf	SOS_Create_Task@u8_function_index
  1233  0BCA  30C4               	movlw	196
  1234  0BCB  00CF               	movwf	SOS_Create_Task@u16_Time_delay
  1235  0BCC  3009               	movlw	9
  1236  0BCD  00D0               	movwf	SOS_Create_Task@u16_Time_delay+1
  1237  0BCE  3007               	movlw	(low (fp__Task3-fpbase))& (0+255)
  1238  0BCF  120A  118A  26E4  120A  158A  	fcall	_SOS_Create_Task
  1239  0BD4                     l645:
  1240  0BD4  0008               	return
  1241  0BD5                     __end_of_system_init:
  1242                           
  1243                           	psect	text2
  1244  04DA                     __ptext2:	
  1245 ;; *************** function _SOS_Init *****************
  1246 ;; Defined at:
  1247 ;;		line 25 in file "SOS.c"
  1248 ;; Parameters:    Size  Location     Type
  1249 ;;  ConfigPtr       1    wreg     PTR const struct TMU_Con
  1250 ;;		 -> TMU_Configuration(2), 
  1251 ;; Auto vars:     Size  Location     Type
  1252 ;;  ConfigPtr       1   16[BANK0 ] PTR const struct TMU_Con
  1253 ;;		 -> TMU_Configuration(2), 
  1254 ;;  ret             1   15[BANK0 ] unsigned char 
  1255 ;;  u8_channel_I    1   14[BANK0 ] unsigned char 
  1256 ;; Return value:  Size  Location     Type
  1257 ;;                  1    wreg      unsigned char 
  1258 ;; Registers used:
  1259 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1260 ;; Tracked objects:
  1261 ;;		On entry : 0/0
  1262 ;;		On exit  : 0/0
  1263 ;;		Unchanged: 0/0
  1264 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1265 ;;      Params:         0       0       0       0       0
  1266 ;;      Locals:         0       3       0       0       0
  1267 ;;      Temps:          0       2       0       0       0
  1268 ;;      Totals:         0       5       0       0       0
  1269 ;;Total ram usage:        5 bytes
  1270 ;; Hardware stack levels used:    1
  1271 ;; Hardware stack levels required when called:    8
  1272 ;; This function calls:
  1273 ;;		_Timer_Init
  1274 ;;		_Timer_Start
  1275 ;; This function is called by:
  1276 ;;		_system_init
  1277 ;; This function uses a non-reentrant model
  1278 ;;
  1279                           
  1280                           
  1281                           ;psect for function _SOS_Init
  1282  04DA                     _SOS_Init:
  1283                           
  1284                           ;incstack = 0
  1285 ;; hardware stack exceeded
  1286                           ; Regs used in _SOS_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1287                           ;SOS_Init@ConfigPtr stored from wreg
  1288  04DA  1283               	bcf	3,5	;RP0=0, select bank0
  1289  04DB  1303               	bcf	3,6	;RP1=0, select bank0
  1290  04DC  00D6               	movwf	SOS_Init@ConfigPtr
  1291  04DD                     l5514:
  1292                           
  1293                           ;SOS.c: 25: ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr );SOS.c: 26: {uint8_
      +                          t u8_channel_ID=ConfigPtr->u8_Timer_channel;
  1294  04DD  0856               	movf	SOS_Init@ConfigPtr,w
  1295  04DE  3E01               	addlw	1
  1296  04DF  0084               	movwf	4
  1297  04E0  120A  158A  2000  120A  118A  	fcall	stringdir
  1298  04E5  00FF               	movwf	btemp+1
  1299  04E6  087F               	movf	btemp+1,w
  1300  04E7  00D4               	movwf	SOS_Init@u8_channel_ID
  1301  04E8                     l5516:
  1302                           
  1303                           ;SOS.c: 27: uint8_t ret=0;
  1304  04E8  01D5               	clrf	SOS_Init@ret
  1305  04E9                     l5518:
  1306                           
  1307                           ;SOS.c: 31: u8_Is_Intialized++;
  1308  04E9  3001               	movlw	1
  1309  04EA  00FF               	movwf	btemp+1
  1310  04EB  087F               	movf	btemp+1,w
  1311  04EC  07B6               	addwf	_u8_Is_Intialized,f
  1312  04ED                     l5520:
  1313                           
  1314                           ;SOS.c: 33: if(ConfigPtr==((void *)0)){ret=32 +16;}
  1315  04ED  0856               	movf	SOS_Init@ConfigPtr,w
  1316  04EE  1D03               	btfss	3,2
  1317  04EF  2CF1               	goto	u1981
  1318  04F0  2CF2               	goto	u1980
  1319  04F1                     u1981:
  1320  04F1  2D10               	goto	l5534
  1321  04F2                     u1980:
  1322  04F2                     l5522:
  1323  04F2  3030               	movlw	48
  1324  04F3  00FF               	movwf	btemp+1
  1325  04F4  087F               	movf	btemp+1,w
  1326  04F5  00D5               	movwf	SOS_Init@ret
  1327  04F6  2D10               	goto	l5534
  1328  04F7                     l5524:
  1329                           
  1330                           ;SOS.c: 37:    Timer_Init(&Timer_Configuration0);
  1331  04F7  30BC               	movlw	(low (_Timer_Configuration0| 0))& (0+255)
  1332  04F8  120A  118A  2078  120A  118A  	fcall	_Timer_Init
  1333                           
  1334                           ;SOS.c: 38:     break;
  1335  04FD  2D4B               	goto	l5550
  1336  04FE                     l5526:
  1337                           
  1338                           ;SOS.c: 41:   Timer_Init(&Timer_Configuration2_SOS);
  1339  04FE  30B7               	movlw	(low (_Timer_Configuration2_SOS| 0))& (0+255)
  1340  04FF  120A  118A  2078  120A  118A  	fcall	_Timer_Init
  1341  0504                     l5528:
  1342                           
  1343                           ;SOS.c: 42:                 TIMER2OVF_INT = timer_interrupt;
  1344  0504  3004               	movlw	(low (fp__timer_interrupt-i1fpbase))& (0+255)
  1345  0505  00FF               	movwf	btemp+1
  1346  0506  087F               	movf	btemp+1,w
  1347  0507  1283               	bcf	3,5	;RP0=0, select bank0
  1348  0508  1303               	bcf	3,6	;RP1=0, select bank0
  1349  0509  00BB               	movwf	_TIMER2OVF_INT
  1350                           
  1351                           ;SOS.c: 43:    break;
  1352  050A  2D4B               	goto	l5550
  1353  050B                     l5530:
  1354                           
  1355                           ;SOS.c: 45:    ret+=1;
  1356  050B  3001               	movlw	1
  1357  050C  00FF               	movwf	btemp+1
  1358  050D  087F               	movf	btemp+1,w
  1359  050E  07D5               	addwf	SOS_Init@ret,f
  1360                           
  1361                           ;SOS.c: 46:    break;
  1362  050F  2D4B               	goto	l5550
  1363  0510                     l5534:
  1364  0510  0854               	movf	SOS_Init@u8_channel_ID,w
  1365  0511  00D2               	movwf	??_SOS_Init
  1366  0512  01D3               	clrf	??_SOS_Init+1
  1367                           
  1368                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1369                           ; Switch size 1, requested type "simple"
  1370                           ; Number of cases is 1, Range of values is 0 to 0
  1371                           ; switch strategies available:
  1372                           ; Name         Instructions Cycles
  1373                           ; simple_byte            4     3 (average)
  1374                           ; direct_byte           11     8 (fixed)
  1375                           ; jumptable            260     6 (fixed)
  1376                           ;	Chosen strategy is simple_byte
  1377  0513  0853               	movf	??_SOS_Init+1,w
  1378  0514  3A00               	xorlw	0	; case 0
  1379  0515  1903               	skipnz
  1380  0516  2D18               	goto	l6440
  1381  0517  2D0B               	goto	l5530
  1382  0518                     l6440:
  1383                           
  1384                           ; Switch size 1, requested type "simple"
  1385                           ; Number of cases is 2, Range of values is 0 to 2
  1386                           ; switch strategies available:
  1387                           ; Name         Instructions Cycles
  1388                           ; simple_byte            7     4 (average)
  1389                           ; direct_byte           17     8 (fixed)
  1390                           ; jumptable            260     6 (fixed)
  1391                           ;	Chosen strategy is simple_byte
  1392  0518  0852               	movf	??_SOS_Init,w
  1393  0519  3A00               	xorlw	0	; case 0
  1394  051A  1903               	skipnz
  1395  051B  2CF7               	goto	l5524
  1396  051C  3A02               	xorlw	2	; case 2
  1397  051D  1903               	skipnz
  1398  051E  2CFE               	goto	l5526
  1399  051F  2D0B               	goto	l5530
  1400  0520                     l5536:
  1401                           
  1402                           ;SOS.c: 60:   Timer_Start(0,250);
  1403  0520  30FA               	movlw	250
  1404  0521  00CA               	movwf	Timer_Start@Timer_Count
  1405  0522  3000               	movlw	0
  1406  0523  00CB               	movwf	Timer_Start@Timer_Count+1
  1407  0524  3000               	movlw	0
  1408  0525  120A  158A  2368  120A  118A  	fcall	_Timer_Start
  1409                           
  1410                           ;SOS.c: 62:      break;
  1411  052A  2D60               	goto	l5552
  1412  052B                     l5538:
  1413                           
  1414                           ;SOS.c: 64:     Timer_Start(2,250);
  1415  052B  30FA               	movlw	250
  1416  052C  00CA               	movwf	Timer_Start@Timer_Count
  1417  052D  3000               	movlw	0
  1418  052E  00CB               	movwf	Timer_Start@Timer_Count+1
  1419  052F  3002               	movlw	2
  1420  0530  120A  158A  2368  120A  118A  	fcall	_Timer_Start
  1421                           
  1422                           ;SOS.c: 65:      break;
  1423  0535  2D60               	goto	l5552
  1424  0536                     l5540:
  1425                           
  1426                           ;SOS.c: 67:     ret+=1;
  1427  0536  3001               	movlw	1
  1428  0537  00FF               	movwf	btemp+1
  1429  0538  087F               	movf	btemp+1,w
  1430  0539  07D5               	addwf	SOS_Init@ret,f
  1431                           
  1432                           ;SOS.c: 68:      break;
  1433  053A  2D60               	goto	l5552
  1434  053B                     l5544:
  1435  053B  0854               	movf	SOS_Init@u8_channel_ID,w
  1436  053C  00D2               	movwf	??_SOS_Init
  1437  053D  01D3               	clrf	??_SOS_Init+1
  1438                           
  1439                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1440                           ; Switch size 1, requested type "simple"
  1441                           ; Number of cases is 1, Range of values is 0 to 0
  1442                           ; switch strategies available:
  1443                           ; Name         Instructions Cycles
  1444                           ; simple_byte            4     3 (average)
  1445                           ; direct_byte           11     8 (fixed)
  1446                           ; jumptable            260     6 (fixed)
  1447                           ;	Chosen strategy is simple_byte
  1448  053E  0853               	movf	??_SOS_Init+1,w
  1449  053F  3A00               	xorlw	0	; case 0
  1450  0540  1903               	skipnz
  1451  0541  2D43               	goto	l6442
  1452  0542  2D36               	goto	l5540
  1453  0543                     l6442:
  1454                           
  1455                           ; Switch size 1, requested type "simple"
  1456                           ; Number of cases is 2, Range of values is 0 to 2
  1457                           ; switch strategies available:
  1458                           ; Name         Instructions Cycles
  1459                           ; simple_byte            7     4 (average)
  1460                           ; direct_byte           17     8 (fixed)
  1461                           ; jumptable            260     6 (fixed)
  1462                           ;	Chosen strategy is simple_byte
  1463  0543  0852               	movf	??_SOS_Init,w
  1464  0544  3A00               	xorlw	0	; case 0
  1465  0545  1903               	skipnz
  1466  0546  2D20               	goto	l5536
  1467  0547  3A02               	xorlw	2	; case 2
  1468  0548  1903               	skipnz
  1469  0549  2D2B               	goto	l5538
  1470  054A  2D36               	goto	l5540
  1471  054B                     l5550:
  1472  054B  1283               	bcf	3,5	;RP0=0, select bank0
  1473  054C  1303               	bcf	3,6	;RP1=0, select bank0
  1474  054D  0856               	movf	SOS_Init@ConfigPtr,w
  1475  054E  0084               	movwf	4
  1476  054F  120A  158A  2000  120A  118A  	fcall	stringdir
  1477  0554  00D2               	movwf	??_SOS_Init
  1478  0555  01D3               	clrf	??_SOS_Init+1
  1479                           
  1480                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1481                           ; Switch size 1, requested type "simple"
  1482                           ; Number of cases is 1, Range of values is 0 to 0
  1483                           ; switch strategies available:
  1484                           ; Name         Instructions Cycles
  1485                           ; simple_byte            4     3 (average)
  1486                           ; direct_byte           11     8 (fixed)
  1487                           ; jumptable            260     6 (fixed)
  1488                           ;	Chosen strategy is simple_byte
  1489  0556  0853               	movf	??_SOS_Init+1,w
  1490  0557  3A00               	xorlw	0	; case 0
  1491  0558  1903               	skipnz
  1492  0559  2D5B               	goto	l6444
  1493  055A  2D36               	goto	l5540
  1494  055B                     l6444:
  1495                           
  1496                           ; Switch size 1, requested type "simple"
  1497                           ; Number of cases is 1, Range of values is 1 to 1
  1498                           ; switch strategies available:
  1499                           ; Name         Instructions Cycles
  1500                           ; simple_byte            4     3 (average)
  1501                           ; direct_byte           14    11 (fixed)
  1502                           ; jumptable            263     9 (fixed)
  1503                           ;	Chosen strategy is simple_byte
  1504  055B  0852               	movf	??_SOS_Init,w
  1505  055C  3A01               	xorlw	1	; case 1
  1506  055D  1903               	skipnz
  1507  055E  2D3B               	goto	l5544
  1508  055F  2D36               	goto	l5540
  1509  0560                     l5552:
  1510                           
  1511                           ;SOS.c: 86: return ret;
  1512  0560  1283               	bcf	3,5	;RP0=0, select bank0
  1513  0561  1303               	bcf	3,6	;RP1=0, select bank0
  1514  0562  0855               	movf	SOS_Init@ret,w
  1515  0563                     l469:
  1516  0563  0008               	return
  1517  0564                     __end_of_SOS_Init:
  1518                           
  1519                           	psect	text3
  1520  06E4                     __ptext3:	
  1521 ;; *************** function _SOS_Create_Task *****************
  1522 ;; Defined at:
  1523 ;;		line 113 in file "SOS.c"
  1524 ;; Parameters:    Size  Location     Type
  1525 ;;  Function_Con    1    wreg     PTR FTN()void 
  1526 ;;		 -> Task3(1), Task2(1), Task1(1), 
  1527 ;;  u8_Preodicit    1    7[BANK0 ] unsigned char 
  1528 ;;  u8_function_    1    8[BANK0 ] unsigned char 
  1529 ;;  u16_Time_del    2    9[BANK0 ] unsigned int 
  1530 ;; Auto vars:     Size  Location     Type
  1531 ;;  Function_Con    1   11[BANK0 ] PTR FTN()void 
  1532 ;;		 -> Task3(1), Task2(1), Task1(1), 
  1533 ;;  ret             1   12[BANK0 ] unsigned char 
  1534 ;; Return value:  Size  Location     Type
  1535 ;;                  1    wreg      unsigned char 
  1536 ;; Registers used:
  1537 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1538 ;; Tracked objects:
  1539 ;;		On entry : 0/0
  1540 ;;		On exit  : 0/0
  1541 ;;		Unchanged: 0/0
  1542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1543 ;;      Params:         0       4       0       0       0
  1544 ;;      Locals:         0       2       0       0       0
  1545 ;;      Temps:          0       0       0       0       0
  1546 ;;      Totals:         0       6       0       0       0
  1547 ;;Total ram usage:        6 bytes
  1548 ;; Hardware stack levels used:    1
  1549 ;; Hardware stack levels required when called:    6
  1550 ;; This function calls:
  1551 ;;		___bmul
  1552 ;; This function is called by:
  1553 ;;		_system_init
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           
  1558                           ;psect for function _SOS_Create_Task
  1559  06E4                     _SOS_Create_Task:
  1560                           
  1561                           ;incstack = 0
  1562                           ; Regs used in _SOS_Create_Task: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1563                           ;SOS_Create_Task@Function_Consumer stored from wreg
  1564  06E4  1283               	bcf	3,5	;RP0=0, select bank0
  1565  06E5  1303               	bcf	3,6	;RP1=0, select bank0
  1566  06E6  00D1               	movwf	SOS_Create_Task@Function_Consumer
  1567  06E7                     l4248:
  1568                           
  1569                           ;SOS.c: 113: ERROR_STATUS SOS_Create_Task(ptr_to_Fun Function_Consumer,uint8_t u8_Preodi
      +                          city,;SOS.c: 114:                              uint8_t u8_function_index,uint16_t u16_Ti
      +                          me_delay);SOS.c: 115: {uint8_t ret=0;
  1570  06E7  01D2               	clrf	SOS_Create_Task@ret
  1571  06E8                     l4250:
  1572                           
  1573                           ;SOS.c: 116:   u8Excution_to_be_done++;
  1574  06E8  3001               	movlw	1
  1575  06E9  00FF               	movwf	btemp+1
  1576  06EA  087F               	movf	btemp+1,w
  1577  06EB  07B4               	addwf	_u8Excution_to_be_done,f	;volatile
  1578  06EC                     l4252:
  1579                           
  1580                           ;SOS.c: 122:  if(u8_Is_Intialized == 1)
  1581  06EC  0336               	decf	_u8_Is_Intialized,w
  1582  06ED  1D03               	btfss	3,2
  1583  06EE  2EF0               	goto	u1671
  1584  06EF  2EF1               	goto	u1670
  1585  06F0                     u1671:
  1586  06F0  2F3B               	goto	l4256
  1587  06F1                     u1670:
  1588  06F1                     l4254:
  1589                           
  1590                           ;SOS.c: 123:  {;SOS.c: 125:   (Buffer_Array[u8_function_index]).Fuction_consumer=Functio
      +                          n_Consumer;
  1591  06F1  3007               	movlw	7
  1592  06F2  00FF               	movwf	btemp+1
  1593  06F3  087F               	movf	btemp+1,w
  1594  06F4  00CA               	movwf	___bmul@multiplicand
  1595  06F5  084E               	movf	SOS_Create_Task@u8_function_index,w
  1596  06F6  120A  158A  222A  120A  118A  	fcall	___bmul
  1597  06FB  3E90               	addlw	(low (_Buffer_Array| (0+256)))& (0+255)
  1598  06FC  0084               	movwf	4
  1599  06FD  1283               	bcf	3,5	;RP0=0, select bank0
  1600  06FE  1303               	bcf	3,6	;RP1=0, select bank0
  1601  06FF  0851               	movf	SOS_Create_Task@Function_Consumer,w
  1602  0700  00FF               	movwf	btemp+1
  1603  0701  087F               	movf	btemp+1,w
  1604  0702  1783               	bsf	3,7	;select IRP bank3
  1605  0703  0080               	movwf	0
  1606                           
  1607                           ;SOS.c: 126:   (Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
  1608  0704  3007               	movlw	7
  1609  0705  00FF               	movwf	btemp+1
  1610  0706  087F               	movf	btemp+1,w
  1611  0707  00CA               	movwf	___bmul@multiplicand
  1612  0708  084E               	movf	SOS_Create_Task@u8_function_index,w
  1613  0709  120A  158A  222A  120A  118A  	fcall	___bmul
  1614  070E  3E94               	addlw	(low ((_Buffer_Array| (0+256)+4)))& (0+255)
  1615  070F  0084               	movwf	4
  1616  0710  1283               	bcf	3,5	;RP0=0, select bank0
  1617  0711  1303               	bcf	3,6	;RP1=0, select bank0
  1618  0712  084D               	movf	SOS_Create_Task@u8_Preodicity,w
  1619  0713  00FF               	movwf	btemp+1
  1620  0714  087F               	movf	btemp+1,w
  1621  0715  1783               	bsf	3,7	;select IRP bank3
  1622  0716  0080               	movwf	0
  1623                           
  1624                           ;SOS.c: 127:   (Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
  1625  0717  3007               	movlw	7
  1626  0718  00FF               	movwf	btemp+1
  1627  0719  087F               	movf	btemp+1,w
  1628  071A  00CA               	movwf	___bmul@multiplicand
  1629  071B  084E               	movf	SOS_Create_Task@u8_function_index,w
  1630  071C  120A  158A  222A  120A  118A  	fcall	___bmul
  1631  0721  3E92               	addlw	(low ((_Buffer_Array| (0+256)+2)))& (0+255)
  1632  0722  0084               	movwf	4
  1633  0723  1283               	bcf	3,5	;RP0=0, select bank0
  1634  0724  1303               	bcf	3,6	;RP1=0, select bank0
  1635  0725  084F               	movf	SOS_Create_Task@u16_Time_delay,w
  1636  0726  1783               	bsf	3,7	;select IRP bank3
  1637  0727  0080               	movwf	0
  1638  0728  0A84               	incf	4,f
  1639  0729  0850               	movf	SOS_Create_Task@u16_Time_delay+1,w
  1640  072A  0080               	movwf	0
  1641                           
  1642                           ;SOS.c: 128:   (Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
  1643  072B  3007               	movlw	7
  1644  072C  00FF               	movwf	btemp+1
  1645  072D  087F               	movf	btemp+1,w
  1646  072E  00CA               	movwf	___bmul@multiplicand
  1647  072F  084E               	movf	SOS_Create_Task@u8_function_index,w
  1648  0730  120A  158A  222A  120A  118A  	fcall	___bmul
  1649  0735  3E91               	addlw	(low ((_Buffer_Array| (0+256)+1)))& (0+255)
  1650  0736  0084               	movwf	4
  1651  0737  1783               	bsf	3,7	;select IRP bank3
  1652  0738  0180               	clrf	0
  1653  0739  0A80               	incf	0,f
  1654                           
  1655                           ;SOS.c: 131:  }
  1656  073A  2F4A               	goto	l4262
  1657  073B                     l4256:
  1658  073B  3002               	movlw	2
  1659  073C  0236               	subwf	_u8_Is_Intialized,w
  1660  073D  1C03               	skipc
  1661  073E  2F40               	goto	u1681
  1662  073F  2F41               	goto	u1680
  1663  0740                     u1681:
  1664  0740  2F46               	goto	l4260
  1665  0741                     u1680:
  1666  0741                     l4258:
  1667  0741  300A               	movlw	10
  1668  0742  00FF               	movwf	btemp+1
  1669  0743  087F               	movf	btemp+1,w
  1670  0744  07D2               	addwf	SOS_Create_Task@ret,f
  1671  0745  2F4A               	goto	l4262
  1672  0746                     l4260:
  1673                           
  1674                           ;SOS.c: 133:   ret+=12;
  1675  0746  300C               	movlw	12
  1676  0747  00FF               	movwf	btemp+1
  1677  0748  087F               	movf	btemp+1,w
  1678  0749  07D2               	addwf	SOS_Create_Task@ret,f
  1679  074A                     l4262:
  1680                           
  1681                           ;SOS.c: 136:  return ret;
  1682  074A  1283               	bcf	3,5	;RP0=0, select bank0
  1683  074B  1303               	bcf	3,6	;RP1=0, select bank0
  1684  074C  0852               	movf	SOS_Create_Task@ret,w
  1685  074D                     l483:
  1686  074D  0008               	return
  1687  074E                     __end_of_SOS_Create_Task:
  1688                           
  1689                           	psect	text4
  1690  02B8                     __ptext4:	
  1691 ;; *************** function _SOS_Run *****************
  1692 ;; Defined at:
  1693 ;;		line 139 in file "SOS.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;		None
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;  ret             1    0        unsigned char 
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      unsigned char 
  1700 ;; Registers used:
  1701 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1707 ;;      Params:         0       0       0       0       0
  1708 ;;      Locals:         0       1       0       0       0
  1709 ;;      Temps:          0       0       4       0       0
  1710 ;;      Totals:         0       1       4       0       0
  1711 ;;Total ram usage:        5 bytes
  1712 ;; Hardware stack levels used:    1
  1713 ;; Hardware stack levels required when called:   10
  1714 ;; This function calls:
  1715 ;;		_Task1
  1716 ;;		_Task2
  1717 ;;		_Task3
  1718 ;;		___bmul
  1719 ;; This function is called by:
  1720 ;;		_main
  1721 ;; This function uses a non-reentrant model
  1722 ;;
  1723                           
  1724                           
  1725                           ;psect for function _SOS_Run
  1726  02B8                     _SOS_Run:
  1727  02B8                     l5592:	
  1728                           ;incstack = 0
  1729 ;; hardware stack exceeded
  1730                           ; Regs used in _SOS_Run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1731                           
  1732  02B8                     l5594:
  1733                           
  1734                           ;SOS.c: 151:   {;SOS.c: 152: if (u8Excution_to_be_done)
  1735  02B8  1283               	bcf	3,5	;RP0=0, select bank0
  1736  02B9  1303               	bcf	3,6	;RP1=0, select bank0
  1737  02BA  0834               	movf	_u8Excution_to_be_done,w	;volatile
  1738  02BB  1903               	btfsc	3,2
  1739  02BC  2ABE               	goto	u1991
  1740  02BD  2ABF               	goto	u1990
  1741  02BE                     u1991:
  1742  02BE  2B75               	goto	l494
  1743  02BF                     u1990:
  1744  02BF                     l5596:
  1745                           
  1746                           ;SOS.c: 153: { u8Excution_to_be_done=0;
  1747  02BF  01B4               	clrf	_u8Excution_to_be_done	;volatile
  1748                           
  1749                           ;SOS.c: 155:   for (u8_FUN_index=0;u8_FUN_index<3;u8_FUN_index++)
  1750  02C0  01B5               	clrf	_u8_FUN_index
  1751  02C1                     l5602:
  1752                           
  1753                           ;SOS.c: 156:    {;SOS.c: 166:                     if((Buffer_Array[u8_FUN_index]).u8_fla
      +                          g_is_stopped==0){ret=0;}
  1754  02C1  3007               	movlw	7
  1755  02C2  00FF               	movwf	btemp+1
  1756  02C3  087F               	movf	btemp+1,w
  1757  02C4  00CA               	movwf	___bmul@multiplicand
  1758  02C5  0835               	movf	_u8_FUN_index,w
  1759  02C6  120A  158A  222A  120A  118A  	fcall	___bmul
  1760  02CB  3E91               	addlw	(low ((_Buffer_Array| (0+256)+1)))& (0+255)
  1761  02CC  0084               	movwf	4
  1762  02CD  1783               	bsf	3,7	;select IRP bank3
  1763  02CE  0800               	movf	0,w
  1764  02CF  1D03               	btfss	3,2
  1765  02D0  2AD2               	goto	u2001
  1766  02D1  2AD3               	goto	u2000
  1767  02D2                     u2001:
  1768  02D2  2AD4               	goto	l5606
  1769  02D3                     u2000:
  1770  02D3                     l5604:
  1771  02D3  2B69               	goto	l5612
  1772  02D4                     l5606:
  1773                           
  1774                           ;SOS.c: 174:  ((Buffer_Array[u8_FUN_index]).u16_Counter)++;
  1775  02D4  3007               	movlw	7
  1776  02D5  00FF               	movwf	btemp+1
  1777  02D6  087F               	movf	btemp+1,w
  1778  02D7  1283               	bcf	3,5	;RP0=0, select bank0
  1779  02D8  1303               	bcf	3,6	;RP1=0, select bank0
  1780  02D9  00CA               	movwf	___bmul@multiplicand
  1781  02DA  0835               	movf	_u8_FUN_index,w
  1782  02DB  120A  158A  222A  120A  118A  	fcall	___bmul
  1783  02E0  3E95               	addlw	(low ((_Buffer_Array| (0+256)+5)))& (0+255)
  1784  02E1  0084               	movwf	4
  1785  02E2  3001               	movlw	1
  1786  02E3  1783               	bsf	3,7	;select IRP bank3
  1787  02E4  0780               	addwf	0,f
  1788  02E5  0A84               	incf	4,f
  1789  02E6  1803               	skipnc
  1790  02E7  0A80               	incf	0,f
  1791                           
  1792                           ;SOS.c: 179:  if(((Buffer_Array[u8_FUN_index]).u16_time_delay) == ((Buffer_Array[u8_FUN_
      +                          index]).u16_Counter) )
  1793  02E8  3007               	movlw	7
  1794  02E9  00FF               	movwf	btemp+1
  1795  02EA  087F               	movf	btemp+1,w
  1796  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  1797  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  1798  02ED  00CA               	movwf	___bmul@multiplicand
  1799  02EE  0835               	movf	_u8_FUN_index,w
  1800  02EF  120A  158A  222A  120A  118A  	fcall	___bmul
  1801  02F4  3E95               	addlw	(low ((_Buffer_Array| (0+256)+5)))& (0+255)
  1802  02F5  0084               	movwf	4
  1803  02F6  1783               	bsf	3,7	;select IRP bank3
  1804  02F7  0800               	movf	0,w
  1805  02F8  1683               	bsf	3,5	;RP0=1, select bank1
  1806  02F9  1303               	bcf	3,6	;RP1=0, select bank1
  1807  02FA  00EC               	movwf	??_SOS_Run^(0+128)
  1808  02FB  0A84               	incf	4,f
  1809  02FC  0800               	movf	0,w
  1810  02FD  00ED               	movwf	(??_SOS_Run^(0+128)+1)
  1811  02FE  3007               	movlw	7
  1812  02FF  00FF               	movwf	btemp+1
  1813  0300  087F               	movf	btemp+1,w
  1814  0301  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0302  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0303  00CA               	movwf	___bmul@multiplicand
  1817  0304  0835               	movf	_u8_FUN_index,w
  1818  0305  120A  158A  222A  120A  118A  	fcall	___bmul
  1819  030A  3E92               	addlw	(low ((_Buffer_Array| (0+256)+2)))& (0+255)
  1820  030B  0084               	movwf	4
  1821  030C  1783               	bsf	3,7	;select IRP bank3
  1822  030D  0800               	movf	0,w
  1823  030E  1683               	bsf	3,5	;RP0=1, select bank1
  1824  030F  1303               	bcf	3,6	;RP1=0, select bank1
  1825  0310  00EE               	movwf	(??_SOS_Run+2)^(0+128)
  1826  0311  0A84               	incf	4,f
  1827  0312  0800               	movf	0,w
  1828  0313  00EF               	movwf	((??_SOS_Run+2)^(0+128)+1)
  1829  0314  086D               	movf	(??_SOS_Run+1)^(0+128),w
  1830  0315  066F               	xorwf	(??_SOS_Run+3)^(0+128),w
  1831  0316  1D03               	skipz
  1832  0317  2B1A               	goto	u2015
  1833  0318  086C               	movf	??_SOS_Run^(0+128),w
  1834  0319  066E               	xorwf	(??_SOS_Run+2)^(0+128),w
  1835  031A                     u2015:
  1836  031A  1D03               	skipz
  1837  031B  2B1D               	goto	u2011
  1838  031C  2B1E               	goto	u2010
  1839  031D                     u2011:
  1840  031D  2B45               	goto	l492
  1841  031E                     u2010:
  1842  031E                     l5608:
  1843                           
  1844                           ;SOS.c: 180:  {;SOS.c: 181:   ((Buffer_Array[u8_FUN_index]).Fuction_consumer)();
  1845  031E  3007               	movlw	7
  1846  031F  00FF               	movwf	btemp+1
  1847  0320  087F               	movf	btemp+1,w
  1848  0321  1283               	bcf	3,5	;RP0=0, select bank0
  1849  0322  1303               	bcf	3,6	;RP1=0, select bank0
  1850  0323  00CA               	movwf	___bmul@multiplicand
  1851  0324  0835               	movf	_u8_FUN_index,w
  1852  0325  120A  158A  222A  120A  118A  	fcall	___bmul
  1853  032A  3E90               	addlw	(low (_Buffer_Array| (0+256)))& (0+255)
  1854  032B  0084               	movwf	4
  1855  032C  1783               	bsf	3,7	;select IRP bank3
  1856  032D  0800               	movf	0,w
  1857  032E  120A  118A  204E  120A  118A  	fcall	fptable
  1858                           
  1859                           ;SOS.c: 185:   (Buffer_Array[u8_FUN_index]).u16_Counter=0;
  1860  0333  3007               	movlw	7
  1861  0334  00FF               	movwf	btemp+1
  1862  0335  087F               	movf	btemp+1,w
  1863  0336  1283               	bcf	3,5	;RP0=0, select bank0
  1864  0337  1303               	bcf	3,6	;RP1=0, select bank0
  1865  0338  00CA               	movwf	___bmul@multiplicand
  1866  0339  0835               	movf	_u8_FUN_index,w
  1867  033A  120A  158A  222A  120A  118A  	fcall	___bmul
  1868  033F  3E95               	addlw	(low ((_Buffer_Array| (0+256)+5)))& (0+255)
  1869  0340  0084               	movwf	4
  1870  0341  1783               	bsf	3,7	;select IRP bank3
  1871  0342  0180               	clrf	0
  1872  0343  0A84               	incf	4,f
  1873  0344  0180               	clrf	0
  1874  0345                     l492:	
  1875                           ;SOS.c: 187:  }
  1876                           
  1877                           
  1878                           ;SOS.c: 193:  if((Buffer_Array[u8_FUN_index]).preodic==0)
  1879  0345  3007               	movlw	7
  1880  0346  00FF               	movwf	btemp+1
  1881  0347  087F               	movf	btemp+1,w
  1882  0348  1283               	bcf	3,5	;RP0=0, select bank0
  1883  0349  1303               	bcf	3,6	;RP1=0, select bank0
  1884  034A  00CA               	movwf	___bmul@multiplicand
  1885  034B  0835               	movf	_u8_FUN_index,w
  1886  034C  120A  158A  222A  120A  118A  	fcall	___bmul
  1887  0351  3E94               	addlw	(low ((_Buffer_Array| (0+256)+4)))& (0+255)
  1888  0352  0084               	movwf	4
  1889  0353  1783               	bsf	3,7	;select IRP bank3
  1890  0354  0800               	movf	0,w
  1891  0355  1D03               	btfss	3,2
  1892  0356  2B58               	goto	u2021
  1893  0357  2B59               	goto	u2020
  1894  0358                     u2021:
  1895  0358  2B69               	goto	l5612
  1896  0359                     u2020:
  1897  0359                     l5610:
  1898                           
  1899                           ;SOS.c: 194:  {;SOS.c: 198:   (Buffer_Array[u8_FUN_index]).u8_flag_is_stopped=0;
  1900  0359  3007               	movlw	7
  1901  035A  00FF               	movwf	btemp+1
  1902  035B  087F               	movf	btemp+1,w
  1903  035C  1283               	bcf	3,5	;RP0=0, select bank0
  1904  035D  1303               	bcf	3,6	;RP1=0, select bank0
  1905  035E  00CA               	movwf	___bmul@multiplicand
  1906  035F  0835               	movf	_u8_FUN_index,w
  1907  0360  120A  158A  222A  120A  118A  	fcall	___bmul
  1908  0365  3E91               	addlw	(low ((_Buffer_Array| (0+256)+1)))& (0+255)
  1909  0366  0084               	movwf	4
  1910  0367  1783               	bsf	3,7	;select IRP bank3
  1911  0368  0180               	clrf	0
  1912  0369                     l5612:
  1913                           
  1914                           ;SOS.c: 203:  }
  1915  0369  3001               	movlw	1
  1916  036A  00FF               	movwf	btemp+1
  1917  036B  087F               	movf	btemp+1,w
  1918  036C  1283               	bcf	3,5	;RP0=0, select bank0
  1919  036D  1303               	bcf	3,6	;RP1=0, select bank0
  1920  036E  07B5               	addwf	_u8_FUN_index,f
  1921  036F                     l5614:
  1922  036F  3003               	movlw	3
  1923  0370  0235               	subwf	_u8_FUN_index,w
  1924  0371  1C03               	skipc
  1925  0372  2B74               	goto	u2031
  1926  0373  2B75               	goto	u2030
  1927  0374                     u2031:
  1928  0374  2AC1               	goto	l5602
  1929  0375                     u2030:
  1930  0375                     l494:
  1931  0375  0008               	return
  1932  0376                     __end_of_SOS_Run:
  1933                           
  1934                           	psect	text5
  1935  0A2A                     __ptext5:	
  1936 ;; *************** function ___bmul *****************
  1937 ;; Defined at:
  1938 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul8.c"
  1939 ;; Parameters:    Size  Location     Type
  1940 ;;  multiplier      1    wreg     unsigned char 
  1941 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  1942 ;; Auto vars:     Size  Location     Type
  1943 ;;  multiplier      1    6[BANK0 ] unsigned char 
  1944 ;;  product         1    5[BANK0 ] unsigned char 
  1945 ;; Return value:  Size  Location     Type
  1946 ;;                  1    wreg      unsigned char 
  1947 ;; Registers used:
  1948 ;;		wreg, status,2, status,0, btemp+1
  1949 ;; Tracked objects:
  1950 ;;		On entry : 0/0
  1951 ;;		On exit  : 0/0
  1952 ;;		Unchanged: 0/0
  1953 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1954 ;;      Params:         0       1       0       0       0
  1955 ;;      Locals:         0       2       0       0       0
  1956 ;;      Temps:          0       0       0       0       0
  1957 ;;      Totals:         0       3       0       0       0
  1958 ;;Total ram usage:        3 bytes
  1959 ;; Hardware stack levels used:    1
  1960 ;; Hardware stack levels required when called:    5
  1961 ;; This function calls:
  1962 ;;		Nothing
  1963 ;; This function is called by:
  1964 ;;		_SOS_Create_Task
  1965 ;;		_SOS_Run
  1966 ;;		_TMU_Stop_Timer
  1967 ;; This function uses a non-reentrant model
  1968 ;;
  1969                           
  1970                           
  1971                           ;psect for function ___bmul
  1972  0A2A                     ___bmul:
  1973                           
  1974                           ;incstack = 0
  1975                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  1976                           ;___bmul@multiplier stored from wreg
  1977  0A2A  1283               	bcf	3,5	;RP0=0, select bank0
  1978  0A2B  1303               	bcf	3,6	;RP1=0, select bank0
  1979  0A2C  00CC               	movwf	___bmul@multiplier
  1980  0A2D                     l4126:
  1981  0A2D  01CB               	clrf	___bmul@product
  1982  0A2E                     l4128:
  1983  0A2E  1C4C               	btfss	___bmul@multiplier,0
  1984  0A2F  2A31               	goto	u1641
  1985  0A30  2A32               	goto	u1640
  1986  0A31                     u1641:
  1987  0A31  2A36               	goto	l4132
  1988  0A32                     u1640:
  1989  0A32                     l4130:
  1990  0A32  084A               	movf	___bmul@multiplicand,w
  1991  0A33  00FF               	movwf	btemp+1
  1992  0A34  087F               	movf	btemp+1,w
  1993  0A35  07CB               	addwf	___bmul@product,f
  1994  0A36                     l4132:
  1995  0A36  1003               	clrc
  1996  0A37  0DCA               	rlf	___bmul@multiplicand,f
  1997  0A38                     l4134:
  1998  0A38  1003               	clrc
  1999  0A39  0CCC               	rrf	___bmul@multiplier,f
  2000  0A3A                     l4136:
  2001  0A3A  084C               	movf	___bmul@multiplier,w
  2002  0A3B  1D03               	btfss	3,2
  2003  0A3C  2A3E               	goto	u1651
  2004  0A3D  2A3F               	goto	u1650
  2005  0A3E                     u1651:
  2006  0A3E  2A2E               	goto	l4128
  2007  0A3F                     u1650:
  2008  0A3F                     l4138:
  2009  0A3F  084B               	movf	___bmul@product,w
  2010  0A40                     l818:
  2011  0A40  0008               	return
  2012  0A41                     __end_of___bmul:
  2013                           
  2014                           	psect	text6
  2015  0F34                     __ptext6:	
  2016 ;; *************** function _Task2 *****************
  2017 ;; Defined at:
  2018 ;;		line 33 in file "tasks.c"
  2019 ;; Parameters:    Size  Location     Type
  2020 ;;		None
  2021 ;; Auto vars:     Size  Location     Type
  2022 ;;  EE_Address      1    0        unsigned char 
  2023 ;;  ret             1    0        unsigned char 
  2024 ;;  EE_Data         1   28[BANK0 ] unsigned char 
  2025 ;; Return value:  Size  Location     Type
  2026 ;;                  1    wreg      void 
  2027 ;; Registers used:
  2028 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2029 ;; Tracked objects:
  2030 ;;		On entry : 0/0
  2031 ;;		On exit  : 0/0
  2032 ;;		Unchanged: 0/0
  2033 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2034 ;;      Params:         0       0       0       0       0
  2035 ;;      Locals:         0       3       0       0       0
  2036 ;;      Temps:          0       2       0       0       0
  2037 ;;      Totals:         0       5       0       0       0
  2038 ;;Total ram usage:        5 bytes
  2039 ;; Hardware stack levels used:    1
  2040 ;; Hardware stack levels required when called:    9
  2041 ;; This function calls:
  2042 ;;		_ADC_INIT
  2043 ;;		_ADC_READ
  2044 ;;		_DIO_init
  2045 ;;		_EEPROM_Read
  2046 ;;		_EEPROM_Write
  2047 ;;		_I2C_Master_Init
  2048 ;;		_sevenSegInit
  2049 ;;		_sevenSegWrite
  2050 ;; This function is called by:
  2051 ;;		_system_init
  2052 ;;		_SOS_Run
  2053 ;; This function uses a non-reentrant model
  2054 ;;
  2055                           
  2056                           
  2057                           ;psect for function _Task2
  2058  0F34                     _Task2:
  2059  0F34                     l5568:	
  2060                           ;incstack = 0
  2061 ;; hardware stack exceeded
  2062                           ; Regs used in _Task2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2063                           
  2064  0F34                     l5570:
  2065  0F34                     l5572:
  2066                           
  2067                           ;tasks.c: 38:      uint8_t EE_Data = adc_data ;
  2068  0F34  1283               	bcf	3,5	;RP0=0, select bank0
  2069  0F35  1303               	bcf	3,6	;RP1=0, select bank0
  2070  0F36  0826               	movf	Task2@adc_data,w
  2071  0F37  00FF               	movwf	btemp+1
  2072  0F38  087F               	movf	btemp+1,w
  2073  0F39  00E2               	movwf	Task2@EE_Data
  2074  0F3A                     l5574:
  2075  0F3A  30CB               	movlw	(low (_Dio_configutation_A_ADC| 0))& (0+255)
  2076  0F3B  120A  118A  21A2  120A  158A  	fcall	_DIO_init
  2077  0F40                     l5576:
  2078  0F40  30C6               	movlw	(low (_ADC_Cnfiguration| 0))& (0+255)
  2079  0F41  120A  118A  2564  120A  158A  	fcall	_ADC_INIT
  2080  0F46                     l5578:
  2081  0F46  120A  158A  2334  120A  158A  	fcall	_sevenSegInit
  2082  0F4B                     l5580:
  2083                           
  2084                           ;tasks.c: 43:      I2C_Master_Init(100000);
  2085  0F4B  3000               	movlw	0
  2086  0F4C  1283               	bcf	3,5	;RP0=0, select bank0
  2087  0F4D  1303               	bcf	3,6	;RP1=0, select bank0
  2088  0F4E  00DB               	movwf	I2C_Master_Init@baud+3
  2089  0F4F  3001               	movlw	1
  2090  0F50  00DA               	movwf	I2C_Master_Init@baud+2
  2091  0F51  3086               	movlw	134
  2092  0F52  00D9               	movwf	I2C_Master_Init@baud+1
  2093  0F53  30A0               	movlw	160
  2094  0F54  00D8               	movwf	I2C_Master_Init@baud
  2095  0F55  120A  158A  24C0  120A  158A  	fcall	_I2C_Master_Init
  2096  0F5A                     l5582:
  2097                           
  2098                           ;tasks.c: 46:     adc_data = ADC_READ();
  2099  0F5A  120A  158A  240E  120A  158A  	fcall	_ADC_READ
  2100  0F5F  1283               	bcf	3,5	;RP0=0, select bank0
  2101  0F60  1303               	bcf	3,6	;RP1=0, select bank0
  2102  0F61  0855               	movf	?_ADC_READ+1,w
  2103  0F62  00A7               	movwf	Task2@adc_data+1
  2104  0F63  0854               	movf	?_ADC_READ,w
  2105  0F64  00A6               	movwf	Task2@adc_data
  2106  0F65                     l5584:
  2107  0F65  0826               	movf	Task2@adc_data,w
  2108  0F66  120A  158A  26D6  120A  158A  	fcall	_sevenSegWrite
  2109  0F6B                     l5586:
  2110                           
  2111                           ;tasks.c: 49:   EEPROM_Write(EE_Address, EE_Data);
  2112  0F6B  3020               	movlw	32
  2113  0F6C  1283               	bcf	3,5	;RP0=0, select bank0
  2114  0F6D  1303               	bcf	3,6	;RP1=0, select bank0
  2115  0F6E  00CB               	movwf	EEPROM_Write@add
  2116  0F6F  3000               	movlw	0
  2117  0F70  00CC               	movwf	EEPROM_Write@add+1
  2118  0F71  0862               	movf	Task2@EE_Data,w
  2119  0F72  00FF               	movwf	btemp+1
  2120  0F73  087F               	movf	btemp+1,w
  2121  0F74  00CD               	movwf	EEPROM_Write@data
  2122  0F75  120A  158A  2300  120A  158A  	fcall	_EEPROM_Write
  2123  0F7A                     l5588:
  2124                           
  2125                           ;tasks.c: 50:    last_temp_reading= EEPROM_Read(EE_Address);
  2126  0F7A  3020               	movlw	32
  2127  0F7B  1283               	bcf	3,5	;RP0=0, select bank0
  2128  0F7C  1303               	bcf	3,6	;RP1=0, select bank0
  2129  0F7D  00CB               	movwf	EEPROM_Read@add
  2130  0F7E  3000               	movlw	0
  2131  0F7F  00CC               	movwf	EEPROM_Read@add+1
  2132  0F80  120A  118A  27B7  120A  158A  	fcall	_EEPROM_Read
  2133  0F85  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0F86  1303               	bcf	3,6	;RP1=0, select bank0
  2135  0F87  00E0               	movwf	??_Task2
  2136  0F88  01E1               	clrf	??_Task2+1
  2137  0F89  0860               	movf	??_Task2,w
  2138  0F8A  00A8               	movwf	_last_temp_reading
  2139  0F8B  0861               	movf	??_Task2+1,w
  2140  0F8C  00A9               	movwf	_last_temp_reading+1
  2141  0F8D                     l5590:
  2142                           
  2143                           ;tasks.c: 52:    last_Ten_readings[readings_counter]=adc_data;
  2144  0F8D  0827               	movf	Task2@adc_data+1,w
  2145  0F8E  1683               	bsf	3,5	;RP0=1, select bank3
  2146  0F8F  1703               	bsf	3,6	;RP1=1, select bank3
  2147  0F90  00A6               	movwf	(_last_Ten_readings+1)^(0+384)
  2148  0F91  1283               	bcf	3,5	;RP0=0, select bank0
  2149  0F92  1303               	bcf	3,6	;RP1=0, select bank0
  2150  0F93  0826               	movf	Task2@adc_data,w
  2151  0F94  1683               	bsf	3,5	;RP0=1, select bank3
  2152  0F95  1703               	bsf	3,6	;RP1=1, select bank3
  2153  0F96  00A5               	movwf	_last_Ten_readings^(0+384)
  2154  0F97                     l703:
  2155  0F97  0008               	return
  2156  0F98                     __end_of_Task2:
  2157                           
  2158                           	psect	text7
  2159  0C49                     __ptext7:	
  2160 ;; *************** function _Task1 *****************
  2161 ;; Defined at:
  2162 ;;		line 5 in file "tasks.c"
  2163 ;; Parameters:    Size  Location     Type
  2164 ;;		None
  2165 ;; Auto vars:     Size  Location     Type
  2166 ;;		None
  2167 ;; Return value:  Size  Location     Type
  2168 ;;                  1    wreg      void 
  2169 ;; Registers used:
  2170 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2171 ;; Tracked objects:
  2172 ;;		On entry : 0/0
  2173 ;;		On exit  : 0/0
  2174 ;;		Unchanged: 0/0
  2175 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2176 ;;      Params:         0       0       0       0       0
  2177 ;;      Locals:         0       0       0       0       0
  2178 ;;      Temps:          0       0       0       0       0
  2179 ;;      Totals:         0       0       0       0       0
  2180 ;;Total ram usage:        0 bytes
  2181 ;; Hardware stack levels used:    1
  2182 ;; Hardware stack levels required when called:    7
  2183 ;; This function calls:
  2184 ;;		_pushButtonGetStatus
  2185 ;; This function is called by:
  2186 ;;		_system_init
  2187 ;;		_SOS_Run
  2188 ;; This function uses a non-reentrant model
  2189 ;;
  2190                           
  2191                           
  2192                           ;psect for function _Task1
  2193  0C49                     _Task1:
  2194  0C49                     l4266:	
  2195                           ;incstack = 0
  2196 ;; hardware stack exceeded
  2197                           ; Regs used in _Task1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2198                           
  2199                           
  2200                           ;tasks.c: 7: static uint8_t u8_Counter=0;;tasks.c: 8: static uint8_t u8_Counter1=0;;task
      +                          s.c: 9:  if (pushButtonGetStatus(BTN_0))
  2201  0C49  3000               	movlw	0
  2202  0C4A  120A  118A  25EC  120A  158A  	fcall	_pushButtonGetStatus
  2203  0C4F  3A00               	xorlw	0
  2204  0C50  1903               	skipnz
  2205  0C51  2C53               	goto	u1691
  2206  0C52  2C54               	goto	u1690
  2207  0C53                     u1691:
  2208  0C53  2C5A               	goto	l4270
  2209  0C54                     u1690:
  2210  0C54                     l4268:
  2211                           
  2212                           ;tasks.c: 10:  {;tasks.c: 11:   u8_Counter++;
  2213  0C54  3001               	movlw	1
  2214  0C55  00FF               	movwf	btemp+1
  2215  0C56  087F               	movf	btemp+1,w
  2216  0C57  1283               	bcf	3,5	;RP0=0, select bank0
  2217  0C58  1303               	bcf	3,6	;RP1=0, select bank0
  2218  0C59  07B0               	addwf	Task1@u8_Counter,f
  2219  0C5A                     l4270:
  2220                           
  2221                           ;tasks.c: 13:  if (u8_Counter > 20)
  2222  0C5A  3015               	movlw	21
  2223  0C5B  1283               	bcf	3,5	;RP0=0, select bank0
  2224  0C5C  1303               	bcf	3,6	;RP1=0, select bank0
  2225  0C5D  0230               	subwf	Task1@u8_Counter,w
  2226  0C5E  1C03               	skipc
  2227  0C5F  2C61               	goto	u1701
  2228  0C60  2C62               	goto	u1700
  2229  0C61                     u1701:
  2230  0C61  2C67               	goto	l4276
  2231  0C62                     u1700:
  2232  0C62                     l4272:
  2233                           
  2234                           ;tasks.c: 14:  {;tasks.c: 15:  stu8_increment++;
  2235  0C62  3001               	movlw	1
  2236  0C63  00FF               	movwf	btemp+1
  2237  0C64  087F               	movf	btemp+1,w
  2238  0C65  07B1               	addwf	_stu8_increment,f
  2239  0C66                     l4274:
  2240                           
  2241                           ;tasks.c: 16:  u8_Counter=0;
  2242  0C66  01B0               	clrf	Task1@u8_Counter
  2243  0C67                     l4276:
  2244                           
  2245                           ;tasks.c: 19:  if (pushButtonGetStatus(BTN_1))
  2246  0C67  3001               	movlw	1
  2247  0C68  120A  118A  25EC  120A  158A  	fcall	_pushButtonGetStatus
  2248  0C6D  3A00               	xorlw	0
  2249  0C6E  1903               	skipnz
  2250  0C6F  2C71               	goto	u1711
  2251  0C70  2C72               	goto	u1710
  2252  0C71                     u1711:
  2253  0C71  2C78               	goto	l4280
  2254  0C72                     u1710:
  2255  0C72                     l4278:
  2256                           
  2257                           ;tasks.c: 20:  {;tasks.c: 21:   u8_Counter1++;
  2258  0C72  3001               	movlw	1
  2259  0C73  00FF               	movwf	btemp+1
  2260  0C74  087F               	movf	btemp+1,w
  2261  0C75  1283               	bcf	3,5	;RP0=0, select bank0
  2262  0C76  1303               	bcf	3,6	;RP1=0, select bank0
  2263  0C77  07AF               	addwf	Task1@u8_Counter1,f
  2264  0C78                     l4280:
  2265                           
  2266                           ;tasks.c: 24:  if (u8_Counter1 > 20)
  2267  0C78  3015               	movlw	21
  2268  0C79  1283               	bcf	3,5	;RP0=0, select bank0
  2269  0C7A  1303               	bcf	3,6	;RP1=0, select bank0
  2270  0C7B  022F               	subwf	Task1@u8_Counter1,w
  2271  0C7C  1C03               	skipc
  2272  0C7D  2C7F               	goto	u1721
  2273  0C7E  2C80               	goto	u1720
  2274  0C7F                     u1721:
  2275  0C7F  2C83               	goto	l696
  2276  0C80                     u1720:
  2277  0C80                     l4282:
  2278                           
  2279                           ;tasks.c: 25:  {;tasks.c: 26:   stu8_increment--;
  2280  0C80  3001               	movlw	1
  2281  0C81  02B1               	subwf	_stu8_increment,f
  2282  0C82                     l4284:
  2283                           
  2284                           ;tasks.c: 27:   u8_Counter1=0;
  2285  0C82  01AF               	clrf	Task1@u8_Counter1
  2286  0C83                     l696:
  2287  0C83  0008               	return
  2288  0C84                     __end_of_Task1:
  2289                           
  2290                           	psect	text8
  2291  0003                     __ptext8:	
  2292 ;; *************** function _Task3 *****************
  2293 ;; Defined at:
  2294 ;;		line 56 in file "tasks.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;		None
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;		None
  2299 ;; Return value:  Size  Location     Type
  2300 ;;                  1    wreg      void 
  2301 ;; Registers used:
  2302 ;;		None
  2303 ;; Tracked objects:
  2304 ;;		On entry : 0/0
  2305 ;;		On exit  : 0/0
  2306 ;;		Unchanged: 0/0
  2307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2308 ;;      Params:         0       0       0       0       0
  2309 ;;      Locals:         0       0       0       0       0
  2310 ;;      Temps:          0       0       0       0       0
  2311 ;;      Totals:         0       0       0       0       0
  2312 ;;Total ram usage:        0 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    5
  2315 ;; This function calls:
  2316 ;;		Nothing
  2317 ;; This function is called by:
  2318 ;;		_system_init
  2319 ;;		_SOS_Run
  2320 ;; This function uses a non-reentrant model
  2321 ;;
  2322                           
  2323                           
  2324                           ;psect for function _Task3
  2325  0003                     _Task3:
  2326  0003                     l706:	
  2327                           ;incstack = 0
  2328                           ; Regs used in _Task3: []
  2329                           
  2330  0003  0008               	return
  2331  0004                     __end_of_Task3:
  2332                           
  2333                           	psect	text9
  2334  0ED6                     __ptext9:	
  2335 ;; *************** function _sevenSegWrite *****************
  2336 ;; Defined at:
  2337 ;;		line 87 in file "seven_segment.c"
  2338 ;; Parameters:    Size  Location     Type
  2339 ;;  u8_number       1    wreg     unsigned char 
  2340 ;; Auto vars:     Size  Location     Type
  2341 ;;  u8_number       1   15[BANK0 ] unsigned char 
  2342 ;;  ret             1   14[BANK0 ] unsigned char 
  2343 ;; Return value:  Size  Location     Type
  2344 ;;                  1    wreg      unsigned char 
  2345 ;; Registers used:
  2346 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2347 ;; Tracked objects:
  2348 ;;		On entry : 0/0
  2349 ;;		On exit  : 0/0
  2350 ;;		Unchanged: 0/0
  2351 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2352 ;;      Params:         0       0       0       0       0
  2353 ;;      Locals:         0       2       0       0       0
  2354 ;;      Temps:          0       2       0       0       0
  2355 ;;      Totals:         0       4       0       0       0
  2356 ;;Total ram usage:        4 bytes
  2357 ;; Hardware stack levels used:    1
  2358 ;; Hardware stack levels required when called:    6
  2359 ;; This function calls:
  2360 ;;		_Timer_Start
  2361 ;;		___awdiv
  2362 ;;		___awmod
  2363 ;; This function is called by:
  2364 ;;		_Task2
  2365 ;; This function uses a non-reentrant model
  2366 ;;
  2367                           
  2368                           
  2369                           ;psect for function _sevenSegWrite
  2370  0ED6                     _sevenSegWrite:
  2371                           
  2372                           ;incstack = 0
  2373 ;; hardware stack exceeded
  2374                           ; Regs used in _sevenSegWrite: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2375                           ;sevenSegWrite@u8_number stored from wreg
  2376  0ED6  1283               	bcf	3,5	;RP0=0, select bank0
  2377  0ED7  1303               	bcf	3,6	;RP1=0, select bank0
  2378  0ED8  00D5               	movwf	sevenSegWrite@u8_number
  2379  0ED9                     l4000:
  2380                           
  2381                           ;seven_segment.c: 87: ERROR_STATUS sevenSegWrite( uint8_t u8_number);seven_segment.c: 88
      +                          : {;seven_segment.c: 89: uint8_t ret=0;
  2382  0ED9  01D4               	clrf	sevenSegWrite@ret
  2383  0EDA                     l4002:
  2384                           
  2385                           ;seven_segment.c: 90: if(u8_number < 99 && u8_number >= 10 ){
  2386  0EDA  3063               	movlw	99
  2387  0EDB  0255               	subwf	sevenSegWrite@u8_number,w
  2388  0EDC  1803               	skipnc
  2389  0EDD  2EDF               	goto	u1521
  2390  0EDE  2EE0               	goto	u1520
  2391  0EDF                     u1521:
  2392  0EDF  2F17               	goto	l4010
  2393  0EE0                     u1520:
  2394  0EE0                     l4004:
  2395  0EE0  300A               	movlw	10
  2396  0EE1  0255               	subwf	sevenSegWrite@u8_number,w
  2397  0EE2  1C03               	skipc
  2398  0EE3  2EE5               	goto	u1531
  2399  0EE4  2EE6               	goto	u1530
  2400  0EE5                     u1531:
  2401  0EE5  2F17               	goto	l4010
  2402  0EE6                     u1530:
  2403  0EE6                     l4006:
  2404                           
  2405                           ;seven_segment.c: 91:  arr_display[0] = (u8_number / 10);
  2406  0EE6  300A               	movlw	10
  2407  0EE7  00CA               	movwf	___awdiv@divisor
  2408  0EE8  3000               	movlw	0
  2409  0EE9  00CB               	movwf	___awdiv@divisor+1
  2410  0EEA  0855               	movf	sevenSegWrite@u8_number,w
  2411  0EEB  00D2               	movwf	??_sevenSegWrite
  2412  0EEC  01D3               	clrf	??_sevenSegWrite+1
  2413  0EED  0852               	movf	??_sevenSegWrite,w
  2414  0EEE  00CC               	movwf	___awdiv@dividend
  2415  0EEF  0853               	movf	??_sevenSegWrite+1,w
  2416  0EF0  00CD               	movwf	___awdiv@dividend+1
  2417  0EF1  120A  118A  274E  120A  158A  	fcall	___awdiv
  2418  0EF6  1283               	bcf	3,5	;RP0=0, select bank0
  2419  0EF7  1303               	bcf	3,6	;RP1=0, select bank0
  2420  0EF8  084A               	movf	?___awdiv,w
  2421  0EF9  00FF               	movwf	btemp+1
  2422  0EFA  087F               	movf	btemp+1,w
  2423  0EFB  00AA               	movwf	_arr_display
  2424                           
  2425                           ;seven_segment.c: 92:     u8_number%=10;
  2426  0EFC  300A               	movlw	10
  2427  0EFD  00CA               	movwf	___awmod@divisor
  2428  0EFE  3000               	movlw	0
  2429  0EFF  00CB               	movwf	___awmod@divisor+1
  2430  0F00  0855               	movf	sevenSegWrite@u8_number,w
  2431  0F01  00D2               	movwf	??_sevenSegWrite
  2432  0F02  01D3               	clrf	??_sevenSegWrite+1
  2433  0F03  0852               	movf	??_sevenSegWrite,w
  2434  0F04  00CC               	movwf	___awmod@dividend
  2435  0F05  0853               	movf	??_sevenSegWrite+1,w
  2436  0F06  00CD               	movwf	___awmod@dividend+1
  2437  0F07  120A  158A  261E  120A  158A  	fcall	___awmod
  2438  0F0C  1283               	bcf	3,5	;RP0=0, select bank0
  2439  0F0D  1303               	bcf	3,6	;RP1=0, select bank0
  2440  0F0E  084A               	movf	?___awmod,w
  2441  0F0F  00FF               	movwf	btemp+1
  2442  0F10  087F               	movf	btemp+1,w
  2443  0F11  00D5               	movwf	sevenSegWrite@u8_number
  2444  0F12                     l4008:
  2445                           
  2446                           ;seven_segment.c: 93:     arr_display[1] = u8_number;
  2447  0F12  0855               	movf	sevenSegWrite@u8_number,w
  2448  0F13  00FF               	movwf	btemp+1
  2449  0F14  087F               	movf	btemp+1,w
  2450  0F15  00AB               	movwf	_arr_display+1
  2451                           
  2452                           ;seven_segment.c: 94: }else if(u8_number < 10)
  2453  0F16  2F23               	goto	l4018
  2454  0F17                     l4010:
  2455  0F17  300A               	movlw	10
  2456  0F18  0255               	subwf	sevenSegWrite@u8_number,w
  2457  0F19  1803               	skipnc
  2458  0F1A  2F1C               	goto	u1541
  2459  0F1B  2F1D               	goto	u1540
  2460  0F1C                     u1541:
  2461  0F1C  2F1F               	goto	l4016
  2462  0F1D                     u1540:
  2463  0F1D                     l4012:
  2464                           
  2465                           ;seven_segment.c: 95: {;seven_segment.c: 96: arr_display[0] = 0;
  2466  0F1D  01AA               	clrf	_arr_display
  2467  0F1E  2F12               	goto	l4008
  2468  0F1F                     l4016:
  2469                           
  2470                           ;seven_segment.c: 99:     ret += 1;
  2471  0F1F  3001               	movlw	1
  2472  0F20  00FF               	movwf	btemp+1
  2473  0F21  087F               	movf	btemp+1,w
  2474  0F22  07D4               	addwf	sevenSegWrite@ret,f
  2475  0F23                     l4018:
  2476                           
  2477                           ;seven_segment.c: 101:  ret=Timer_Start(0,100);
  2478  0F23  3064               	movlw	100
  2479  0F24  00CA               	movwf	Timer_Start@Timer_Count
  2480  0F25  3000               	movlw	0
  2481  0F26  00CB               	movwf	Timer_Start@Timer_Count+1
  2482  0F27  3000               	movlw	0
  2483  0F28  120A  158A  2368  120A  158A  	fcall	_Timer_Start
  2484  0F2D  00FF               	movwf	btemp+1
  2485  0F2E  087F               	movf	btemp+1,w
  2486  0F2F  1283               	bcf	3,5	;RP0=0, select bank0
  2487  0F30  1303               	bcf	3,6	;RP1=0, select bank0
  2488  0F31  00D4               	movwf	sevenSegWrite@ret
  2489  0F32                     l4020:
  2490                           
  2491                           ;seven_segment.c: 102: return ret;
  2492  0F32  0854               	movf	sevenSegWrite@ret,w
  2493  0F33                     l95:
  2494  0F33  0008               	return
  2495  0F34                     __end_of_sevenSegWrite:
  2496                           
  2497                           	psect	text10
  2498  0E1E                     __ptext10:	
  2499 ;; *************** function ___awmod *****************
  2500 ;; Defined at:
  2501 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;  divisor         2    4[BANK0 ] int 
  2504 ;;  dividend        2    6[BANK0 ] int 
  2505 ;; Auto vars:     Size  Location     Type
  2506 ;;  sign            1    9[BANK0 ] unsigned char 
  2507 ;;  counter         1    8[BANK0 ] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;                  2    4[BANK0 ] int 
  2510 ;; Registers used:
  2511 ;;		wreg, status,2, status,0, btemp+1
  2512 ;; Tracked objects:
  2513 ;;		On entry : 0/0
  2514 ;;		On exit  : 0/0
  2515 ;;		Unchanged: 0/0
  2516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2517 ;;      Params:         0       4       0       0       0
  2518 ;;      Locals:         0       2       0       0       0
  2519 ;;      Temps:          0       0       0       0       0
  2520 ;;      Totals:         0       6       0       0       0
  2521 ;;Total ram usage:        6 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    5
  2524 ;; This function calls:
  2525 ;;		Nothing
  2526 ;; This function is called by:
  2527 ;;		_sevenSegWrite
  2528 ;; This function uses a non-reentrant model
  2529 ;;
  2530                           
  2531                           
  2532                           ;psect for function ___awmod
  2533  0E1E                     ___awmod:
  2534  0E1E                     l3798:	
  2535                           ;incstack = 0
  2536 ;; hardware stack exceeded
  2537                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  2538                           
  2539  0E1E  1283               	bcf	3,5	;RP0=0, select bank0
  2540  0E1F  1303               	bcf	3,6	;RP1=0, select bank0
  2541  0E20  01CF               	clrf	___awmod@sign
  2542  0E21                     l3800:
  2543  0E21  1FCD               	btfss	___awmod@dividend+1,7
  2544  0E22  2E24               	goto	u1371
  2545  0E23  2E25               	goto	u1370
  2546  0E24                     u1371:
  2547  0E24  2E2C               	goto	l3806
  2548  0E25                     u1370:
  2549  0E25                     l3802:
  2550  0E25  09CC               	comf	___awmod@dividend,f
  2551  0E26  09CD               	comf	___awmod@dividend+1,f
  2552  0E27  0ACC               	incf	___awmod@dividend,f
  2553  0E28  1903               	skipnz
  2554  0E29  0ACD               	incf	___awmod@dividend+1,f
  2555  0E2A                     l3804:
  2556  0E2A  01CF               	clrf	___awmod@sign
  2557  0E2B  0ACF               	incf	___awmod@sign,f
  2558  0E2C                     l3806:
  2559  0E2C  1FCB               	btfss	___awmod@divisor+1,7
  2560  0E2D  2E2F               	goto	u1381
  2561  0E2E  2E30               	goto	u1380
  2562  0E2F                     u1381:
  2563  0E2F  2E35               	goto	l3810
  2564  0E30                     u1380:
  2565  0E30                     l3808:
  2566  0E30  09CA               	comf	___awmod@divisor,f
  2567  0E31  09CB               	comf	___awmod@divisor+1,f
  2568  0E32  0ACA               	incf	___awmod@divisor,f
  2569  0E33  1903               	skipnz
  2570  0E34  0ACB               	incf	___awmod@divisor+1,f
  2571  0E35                     l3810:
  2572  0E35  084A               	movf	___awmod@divisor,w
  2573  0E36  044B               	iorwf	___awmod@divisor+1,w
  2574  0E37  1903               	btfsc	3,2
  2575  0E38  2E3A               	goto	u1391
  2576  0E39  2E3B               	goto	u1390
  2577  0E3A                     u1391:
  2578  0E3A  2E6A               	goto	l3828
  2579  0E3B                     u1390:
  2580  0E3B                     l3812:
  2581  0E3B  01CE               	clrf	___awmod@counter
  2582  0E3C  0ACE               	incf	___awmod@counter,f
  2583  0E3D  2E49               	goto	l3818
  2584  0E3E                     l3814:
  2585  0E3E  3001               	movlw	1
  2586  0E3F                     u1405:
  2587  0E3F  1003               	clrc
  2588  0E40  0DCA               	rlf	___awmod@divisor,f
  2589  0E41  0DCB               	rlf	___awmod@divisor+1,f
  2590  0E42  3EFF               	addlw	-1
  2591  0E43  1D03               	skipz
  2592  0E44  2E3F               	goto	u1405
  2593  0E45                     l3816:
  2594  0E45  3001               	movlw	1
  2595  0E46  00FF               	movwf	btemp+1
  2596  0E47  087F               	movf	btemp+1,w
  2597  0E48  07CE               	addwf	___awmod@counter,f
  2598  0E49                     l3818:
  2599  0E49  1FCB               	btfss	___awmod@divisor+1,7
  2600  0E4A  2E4C               	goto	u1411
  2601  0E4B  2E4D               	goto	u1410
  2602  0E4C                     u1411:
  2603  0E4C  2E3E               	goto	l3814
  2604  0E4D                     u1410:
  2605  0E4D                     l3820:
  2606  0E4D  084B               	movf	___awmod@divisor+1,w
  2607  0E4E  024D               	subwf	___awmod@dividend+1,w
  2608  0E4F  1D03               	skipz
  2609  0E50  2E53               	goto	u1425
  2610  0E51  084A               	movf	___awmod@divisor,w
  2611  0E52  024C               	subwf	___awmod@dividend,w
  2612  0E53                     u1425:
  2613  0E53  1C03               	skipc
  2614  0E54  2E56               	goto	u1421
  2615  0E55  2E57               	goto	u1420
  2616  0E56                     u1421:
  2617  0E56  2E5D               	goto	l3824
  2618  0E57                     u1420:
  2619  0E57                     l3822:
  2620  0E57  084A               	movf	___awmod@divisor,w
  2621  0E58  02CC               	subwf	___awmod@dividend,f
  2622  0E59  084B               	movf	___awmod@divisor+1,w
  2623  0E5A  1C03               	skipc
  2624  0E5B  03CD               	decf	___awmod@dividend+1,f
  2625  0E5C  02CD               	subwf	___awmod@dividend+1,f
  2626  0E5D                     l3824:
  2627  0E5D  3001               	movlw	1
  2628  0E5E                     u1435:
  2629  0E5E  1003               	clrc
  2630  0E5F  0CCB               	rrf	___awmod@divisor+1,f
  2631  0E60  0CCA               	rrf	___awmod@divisor,f
  2632  0E61  3EFF               	addlw	-1
  2633  0E62  1D03               	skipz
  2634  0E63  2E5E               	goto	u1435
  2635  0E64                     l3826:
  2636  0E64  3001               	movlw	1
  2637  0E65  02CE               	subwf	___awmod@counter,f
  2638  0E66  1D03               	btfss	3,2
  2639  0E67  2E69               	goto	u1441
  2640  0E68  2E6A               	goto	u1440
  2641  0E69                     u1441:
  2642  0E69  2E4D               	goto	l3820
  2643  0E6A                     u1440:
  2644  0E6A                     l3828:
  2645  0E6A  084F               	movf	___awmod@sign,w
  2646  0E6B  1903               	btfsc	3,2
  2647  0E6C  2E6E               	goto	u1451
  2648  0E6D  2E6F               	goto	u1450
  2649  0E6E                     u1451:
  2650  0E6E  2E74               	goto	l3832
  2651  0E6F                     u1450:
  2652  0E6F                     l3830:
  2653  0E6F  09CC               	comf	___awmod@dividend,f
  2654  0E70  09CD               	comf	___awmod@dividend+1,f
  2655  0E71  0ACC               	incf	___awmod@dividend,f
  2656  0E72  1903               	skipnz
  2657  0E73  0ACD               	incf	___awmod@dividend+1,f
  2658  0E74                     l3832:
  2659  0E74  084D               	movf	___awmod@dividend+1,w
  2660  0E75  00CB               	movwf	?___awmod+1
  2661  0E76  084C               	movf	___awmod@dividend,w
  2662  0E77  00CA               	movwf	?___awmod
  2663  0E78                     l958:
  2664  0E78  0008               	return
  2665  0E79                     __end_of___awmod:
  2666                           
  2667                           	psect	text11
  2668  074E                     __ptext11:	
  2669 ;; *************** function ___awdiv *****************
  2670 ;; Defined at:
  2671 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;  divisor         2    4[BANK0 ] int 
  2674 ;;  dividend        2    6[BANK0 ] int 
  2675 ;; Auto vars:     Size  Location     Type
  2676 ;;  quotient        2   10[BANK0 ] int 
  2677 ;;  sign            1    9[BANK0 ] unsigned char 
  2678 ;;  counter         1    8[BANK0 ] unsigned char 
  2679 ;; Return value:  Size  Location     Type
  2680 ;;                  2    4[BANK0 ] int 
  2681 ;; Registers used:
  2682 ;;		wreg, status,2, status,0, btemp+1
  2683 ;; Tracked objects:
  2684 ;;		On entry : 0/0
  2685 ;;		On exit  : 0/0
  2686 ;;		Unchanged: 0/0
  2687 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2688 ;;      Params:         0       4       0       0       0
  2689 ;;      Locals:         0       4       0       0       0
  2690 ;;      Temps:          0       0       0       0       0
  2691 ;;      Totals:         0       8       0       0       0
  2692 ;;Total ram usage:        8 bytes
  2693 ;; Hardware stack levels used:    1
  2694 ;; Hardware stack levels required when called:    5
  2695 ;; This function calls:
  2696 ;;		Nothing
  2697 ;; This function is called by:
  2698 ;;		_sevenSegWrite
  2699 ;; This function uses a non-reentrant model
  2700 ;;
  2701                           
  2702                           
  2703                           ;psect for function ___awdiv
  2704  074E                     ___awdiv:
  2705  074E                     l3754:	
  2706                           ;incstack = 0
  2707 ;; hardware stack exceeded
  2708                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  2709                           
  2710  074E  1283               	bcf	3,5	;RP0=0, select bank0
  2711  074F  1303               	bcf	3,6	;RP1=0, select bank0
  2712  0750  01CF               	clrf	___awdiv@sign
  2713  0751                     l3756:
  2714  0751  1FCB               	btfss	___awdiv@divisor+1,7
  2715  0752  2F54               	goto	u1271
  2716  0753  2F55               	goto	u1270
  2717  0754                     u1271:
  2718  0754  2F5C               	goto	l3762
  2719  0755                     u1270:
  2720  0755                     l3758:
  2721  0755  09CA               	comf	___awdiv@divisor,f
  2722  0756  09CB               	comf	___awdiv@divisor+1,f
  2723  0757  0ACA               	incf	___awdiv@divisor,f
  2724  0758  1903               	skipnz
  2725  0759  0ACB               	incf	___awdiv@divisor+1,f
  2726  075A                     l3760:
  2727  075A  01CF               	clrf	___awdiv@sign
  2728  075B  0ACF               	incf	___awdiv@sign,f
  2729  075C                     l3762:
  2730  075C  1FCD               	btfss	___awdiv@dividend+1,7
  2731  075D  2F5F               	goto	u1281
  2732  075E  2F60               	goto	u1280
  2733  075F                     u1281:
  2734  075F  2F69               	goto	l3768
  2735  0760                     u1280:
  2736  0760                     l3764:
  2737  0760  09CC               	comf	___awdiv@dividend,f
  2738  0761  09CD               	comf	___awdiv@dividend+1,f
  2739  0762  0ACC               	incf	___awdiv@dividend,f
  2740  0763  1903               	skipnz
  2741  0764  0ACD               	incf	___awdiv@dividend+1,f
  2742  0765                     l3766:
  2743  0765  3001               	movlw	1
  2744  0766  00FF               	movwf	btemp+1
  2745  0767  087F               	movf	btemp+1,w
  2746  0768  06CF               	xorwf	___awdiv@sign,f
  2747  0769                     l3768:
  2748  0769  01D0               	clrf	___awdiv@quotient
  2749  076A  01D1               	clrf	___awdiv@quotient+1
  2750  076B                     l3770:
  2751  076B  084A               	movf	___awdiv@divisor,w
  2752  076C  044B               	iorwf	___awdiv@divisor+1,w
  2753  076D  1903               	btfsc	3,2
  2754  076E  2F70               	goto	u1291
  2755  076F  2F71               	goto	u1290
  2756  0770                     u1291:
  2757  0770  2FA8               	goto	l3790
  2758  0771                     u1290:
  2759  0771                     l3772:
  2760  0771  01CE               	clrf	___awdiv@counter
  2761  0772  0ACE               	incf	___awdiv@counter,f
  2762  0773  2F7F               	goto	l3778
  2763  0774                     l3774:
  2764  0774  3001               	movlw	1
  2765  0775                     u1305:
  2766  0775  1003               	clrc
  2767  0776  0DCA               	rlf	___awdiv@divisor,f
  2768  0777  0DCB               	rlf	___awdiv@divisor+1,f
  2769  0778  3EFF               	addlw	-1
  2770  0779  1D03               	skipz
  2771  077A  2F75               	goto	u1305
  2772  077B                     l3776:
  2773  077B  3001               	movlw	1
  2774  077C  00FF               	movwf	btemp+1
  2775  077D  087F               	movf	btemp+1,w
  2776  077E  07CE               	addwf	___awdiv@counter,f
  2777  077F                     l3778:
  2778  077F  1FCB               	btfss	___awdiv@divisor+1,7
  2779  0780  2F82               	goto	u1311
  2780  0781  2F83               	goto	u1310
  2781  0782                     u1311:
  2782  0782  2F74               	goto	l3774
  2783  0783                     u1310:
  2784  0783                     l3780:
  2785  0783  3001               	movlw	1
  2786  0784                     u1325:
  2787  0784  1003               	clrc
  2788  0785  0DD0               	rlf	___awdiv@quotient,f
  2789  0786  0DD1               	rlf	___awdiv@quotient+1,f
  2790  0787  3EFF               	addlw	-1
  2791  0788  1D03               	skipz
  2792  0789  2F84               	goto	u1325
  2793  078A  084B               	movf	___awdiv@divisor+1,w
  2794  078B  024D               	subwf	___awdiv@dividend+1,w
  2795  078C  1D03               	skipz
  2796  078D  2F90               	goto	u1335
  2797  078E  084A               	movf	___awdiv@divisor,w
  2798  078F  024C               	subwf	___awdiv@dividend,w
  2799  0790                     u1335:
  2800  0790  1C03               	skipc
  2801  0791  2F93               	goto	u1331
  2802  0792  2F94               	goto	u1330
  2803  0793                     u1331:
  2804  0793  2F9B               	goto	l3786
  2805  0794                     u1330:
  2806  0794                     l3782:
  2807  0794  084A               	movf	___awdiv@divisor,w
  2808  0795  02CC               	subwf	___awdiv@dividend,f
  2809  0796  084B               	movf	___awdiv@divisor+1,w
  2810  0797  1C03               	skipc
  2811  0798  03CD               	decf	___awdiv@dividend+1,f
  2812  0799  02CD               	subwf	___awdiv@dividend+1,f
  2813  079A                     l3784:
  2814  079A  1450               	bsf	___awdiv@quotient,0
  2815  079B                     l3786:
  2816  079B  3001               	movlw	1
  2817  079C                     u1345:
  2818  079C  1003               	clrc
  2819  079D  0CCB               	rrf	___awdiv@divisor+1,f
  2820  079E  0CCA               	rrf	___awdiv@divisor,f
  2821  079F  3EFF               	addlw	-1
  2822  07A0  1D03               	skipz
  2823  07A1  2F9C               	goto	u1345
  2824  07A2                     l3788:
  2825  07A2  3001               	movlw	1
  2826  07A3  02CE               	subwf	___awdiv@counter,f
  2827  07A4  1D03               	btfss	3,2
  2828  07A5  2FA7               	goto	u1351
  2829  07A6  2FA8               	goto	u1350
  2830  07A7                     u1351:
  2831  07A7  2F83               	goto	l3780
  2832  07A8                     u1350:
  2833  07A8                     l3790:
  2834  07A8  084F               	movf	___awdiv@sign,w
  2835  07A9  1903               	btfsc	3,2
  2836  07AA  2FAC               	goto	u1361
  2837  07AB  2FAD               	goto	u1360
  2838  07AC                     u1361:
  2839  07AC  2FB2               	goto	l3794
  2840  07AD                     u1360:
  2841  07AD                     l3792:
  2842  07AD  09D0               	comf	___awdiv@quotient,f
  2843  07AE  09D1               	comf	___awdiv@quotient+1,f
  2844  07AF  0AD0               	incf	___awdiv@quotient,f
  2845  07B0  1903               	skipnz
  2846  07B1  0AD1               	incf	___awdiv@quotient+1,f
  2847  07B2                     l3794:
  2848  07B2  0851               	movf	___awdiv@quotient+1,w
  2849  07B3  00CB               	movwf	?___awdiv+1
  2850  07B4  0850               	movf	___awdiv@quotient,w
  2851  07B5  00CA               	movwf	?___awdiv
  2852  07B6                     l945:
  2853  07B6  0008               	return
  2854  07B7                     __end_of___awdiv:
  2855                           
  2856                           	psect	text12
  2857  0B68                     __ptext12:	
  2858 ;; *************** function _Timer_Start *****************
  2859 ;; Defined at:
  2860 ;;		line 148 in file "Timer.c"
  2861 ;; Parameters:    Size  Location     Type
  2862 ;;  Timer_CH_NO     1    wreg     unsigned char 
  2863 ;;  Timer_Count     2    4[BANK0 ] unsigned int 
  2864 ;; Auto vars:     Size  Location     Type
  2865 ;;  Timer_CH_NO     1    8[BANK0 ] unsigned char 
  2866 ;;  ret_error       1    9[BANK0 ] unsigned char 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  1    wreg      unsigned char 
  2869 ;; Registers used:
  2870 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  2871 ;; Tracked objects:
  2872 ;;		On entry : 0/0
  2873 ;;		On exit  : 0/0
  2874 ;;		Unchanged: 0/0
  2875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2876 ;;      Params:         0       2       0       0       0
  2877 ;;      Locals:         0       2       0       0       0
  2878 ;;      Temps:          0       2       0       0       0
  2879 ;;      Totals:         0       6       0       0       0
  2880 ;;Total ram usage:        6 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; Hardware stack levels required when called:    5
  2883 ;; This function calls:
  2884 ;;		Nothing
  2885 ;; This function is called by:
  2886 ;;		_sevenSegWrite
  2887 ;;		_SOS_Init
  2888 ;; This function uses a non-reentrant model
  2889 ;;
  2890                           
  2891                           
  2892                           ;psect for function _Timer_Start
  2893  0B68                     _Timer_Start:
  2894                           
  2895                           ;incstack = 0
  2896                           ; Regs used in _Timer_Start: [wreg-fsr0h+status,2+status,0+btemp+1]
  2897                           ;Timer_Start@Timer_CH_NO stored from wreg
  2898  0B68  1283               	bcf	3,5	;RP0=0, select bank0
  2899  0B69  1303               	bcf	3,6	;RP1=0, select bank0
  2900  0B6A  00CE               	movwf	Timer_Start@Timer_CH_NO
  2901  0B6B                     l3640:
  2902                           
  2903                           ;Timer.c: 148: ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count);Timer
      +                          .c: 149: {;Timer.c: 150:   uint8_t ret_error = 0;
  2904  0B6B  01CF               	clrf	Timer_Start@ret_error
  2905                           
  2906                           ;Timer.c: 151:   switch (Timer_CH_NO) {
  2907  0B6C  2B87               	goto	l3654
  2908  0B6D                     l3642:
  2909                           
  2910                           ;Timer.c: 155:   *((reg_type8_t)(0x0081)) = Prescaler0;
  2911  0B6D  0866               	movf	_Prescaler0,w
  2912  0B6E  00FF               	movwf	btemp+1
  2913  0B6F  087F               	movf	btemp+1,w
  2914  0B70  1683               	bsf	3,5	;RP0=1, select bank1
  2915  0B71  1303               	bcf	3,6	;RP1=0, select bank1
  2916  0B72  0081               	movwf	1	;volatile
  2917                           
  2918                           ;Timer.c: 161:     break;
  2919  0B73  2B9A               	goto	l3656
  2920  0B74                     l3644:
  2921                           
  2922                           ;Timer.c: 167:     *((reg_type8_t)(0x0010)) = Prescaler1;
  2923  0B74  0833               	movf	_Prescaler1,w
  2924  0B75  00FF               	movwf	btemp+1
  2925  0B76  087F               	movf	btemp+1,w
  2926  0B77  0090               	movwf	16	;volatile
  2927  0B78                     l3646:
  2928                           
  2929                           ;Timer.c: 168:     *((reg_type8_t)(0x0010)) |=0x01;
  2930  0B78  1410               	bsf	16,0	;volatile
  2931                           
  2932                           ;Timer.c: 172:     break;
  2933  0B79  2B9A               	goto	l3656
  2934  0B7A                     l581:	
  2935                           ;Timer.c: 174:     case 2:
  2936                           
  2937                           
  2938                           ;Timer.c: 175:     *((reg_type8_t)(0x0012)) |= 0x04;
  2939  0B7A  1512               	bsf	18,2	;volatile
  2940  0B7B                     l3648:
  2941                           
  2942                           ;Timer.c: 176:     *((reg_type8_t)(0x0092)) = Timer_Count;
  2943  0B7B  084A               	movf	Timer_Start@Timer_Count,w
  2944  0B7C  00FF               	movwf	btemp+1
  2945  0B7D  087F               	movf	btemp+1,w
  2946  0B7E  1683               	bsf	3,5	;RP0=1, select bank1
  2947  0B7F  1303               	bcf	3,6	;RP1=0, select bank1
  2948  0B80  0092               	movwf	18	;volatile
  2949                           
  2950                           ;Timer.c: 177:     break;
  2951  0B81  2B9A               	goto	l3656
  2952  0B82                     l3650:
  2953                           
  2954                           ;Timer.c: 179:     ret_error += 1 +26;
  2955  0B82  301B               	movlw	27
  2956  0B83  00FF               	movwf	btemp+1
  2957  0B84  087F               	movf	btemp+1,w
  2958  0B85  07CF               	addwf	Timer_Start@ret_error,f
  2959                           
  2960                           ;Timer.c: 180:     break;
  2961  0B86  2B9A               	goto	l3656
  2962  0B87                     l3654:
  2963  0B87  084E               	movf	Timer_Start@Timer_CH_NO,w
  2964  0B88  00CC               	movwf	??_Timer_Start
  2965  0B89  01CD               	clrf	??_Timer_Start+1
  2966                           
  2967                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2968                           ; Switch size 1, requested type "simple"
  2969                           ; Number of cases is 1, Range of values is 0 to 0
  2970                           ; switch strategies available:
  2971                           ; Name         Instructions Cycles
  2972                           ; simple_byte            4     3 (average)
  2973                           ; direct_byte           11     8 (fixed)
  2974                           ; jumptable            260     6 (fixed)
  2975                           ;	Chosen strategy is simple_byte
  2976  0B8A  084D               	movf	??_Timer_Start+1,w
  2977  0B8B  3A00               	xorlw	0	; case 0
  2978  0B8C  1903               	skipnz
  2979  0B8D  2B8F               	goto	l6446
  2980  0B8E  2B82               	goto	l3650
  2981  0B8F                     l6446:
  2982                           
  2983                           ; Switch size 1, requested type "simple"
  2984                           ; Number of cases is 3, Range of values is 0 to 2
  2985                           ; switch strategies available:
  2986                           ; Name         Instructions Cycles
  2987                           ; simple_byte           10     6 (average)
  2988                           ; direct_byte           17     8 (fixed)
  2989                           ; jumptable            260     6 (fixed)
  2990                           ;	Chosen strategy is simple_byte
  2991  0B8F  084C               	movf	??_Timer_Start,w
  2992  0B90  3A00               	xorlw	0	; case 0
  2993  0B91  1903               	skipnz
  2994  0B92  2B6D               	goto	l3642
  2995  0B93  3A01               	xorlw	1	; case 1
  2996  0B94  1903               	skipnz
  2997  0B95  2B74               	goto	l3644
  2998  0B96  3A03               	xorlw	3	; case 2
  2999  0B97  1903               	skipnz
  3000  0B98  2B7A               	goto	l581
  3001  0B99  2B82               	goto	l3650
  3002  0B9A                     l3656:
  3003                           
  3004                           ;Timer.c: 184:   return ret_error;
  3005  0B9A  1283               	bcf	3,5	;RP0=0, select bank0
  3006  0B9B  084F               	movf	Timer_Start@ret_error,w
  3007  0B9C                     l583:
  3008  0B9C  0008               	return
  3009  0B9D                     __end_of_Timer_Start:
  3010                           
  3011                           	psect	text13
  3012  0B34                     __ptext13:	
  3013 ;; *************** function _sevenSegInit *****************
  3014 ;; Defined at:
  3015 ;;		line 10 in file "seven_segment.c"
  3016 ;; Parameters:    Size  Location     Type
  3017 ;;		None
  3018 ;; Auto vars:     Size  Location     Type
  3019 ;;  ret             1   14[BANK0 ] unsigned char 
  3020 ;; Return value:  Size  Location     Type
  3021 ;;                  1    wreg      unsigned char 
  3022 ;; Registers used:
  3023 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3024 ;; Tracked objects:
  3025 ;;		On entry : 0/0
  3026 ;;		On exit  : 0/0
  3027 ;;		Unchanged: 0/0
  3028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3029 ;;      Params:         0       0       0       0       0
  3030 ;;      Locals:         0       1       0       0       0
  3031 ;;      Temps:          0       0       0       0       0
  3032 ;;      Totals:         0       1       0       0       0
  3033 ;;Total ram usage:        1 bytes
  3034 ;; Hardware stack levels used:    1
  3035 ;; Hardware stack levels required when called:    8
  3036 ;; This function calls:
  3037 ;;		_DIO_init
  3038 ;;		_Timer_Init
  3039 ;;		_sevenSegDisable
  3040 ;; This function is called by:
  3041 ;;		_Task2
  3042 ;; This function uses a non-reentrant model
  3043 ;;
  3044                           
  3045                           
  3046                           ;psect for function _sevenSegInit
  3047  0B34                     _sevenSegInit:
  3048  0B34                     l5498:	
  3049                           ;incstack = 0
  3050 ;; hardware stack exceeded
  3051                           ; Regs used in _sevenSegInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3052                           
  3053  0B34                     l5500:
  3054  0B34  30C1               	movlw	(low (_Timer_Configuration1_7_seg| 0))& (0+255)
  3055  0B35  120A  118A  2078  120A  158A  	fcall	_Timer_Init
  3056  0B3A                     l5502:
  3057                           
  3058                           ;seven_segment.c: 17:     ret=DIO_init(&Dio_configutation_A_7_seg);
  3059  0B3A  3067               	movlw	(low (_Dio_configutation_A_7_seg| 0))& (0+255)
  3060  0B3B  120A  118A  21A2  120A  158A  	fcall	_DIO_init
  3061  0B40  00FF               	movwf	btemp+1
  3062  0B41  087F               	movf	btemp+1,w
  3063  0B42  1283               	bcf	3,5	;RP0=0, select bank0
  3064  0B43  1303               	bcf	3,6	;RP1=0, select bank0
  3065  0B44  00D4               	movwf	sevenSegInit@ret
  3066  0B45                     l5504:
  3067                           
  3068                           ;seven_segment.c: 18:     ret += sevenSegDisable(SEG_0);
  3069  0B45  3000               	movlw	0
  3070  0B46  120A  158A  23D5  120A  158A  	fcall	_sevenSegDisable
  3071  0B4B  00FF               	movwf	btemp+1
  3072  0B4C  087F               	movf	btemp+1,w
  3073  0B4D  1283               	bcf	3,5	;RP0=0, select bank0
  3074  0B4E  1303               	bcf	3,6	;RP1=0, select bank0
  3075  0B4F  07D4               	addwf	sevenSegInit@ret,f
  3076  0B50                     l5506:
  3077                           
  3078                           ;seven_segment.c: 19:     ret += sevenSegDisable(SEG_1);
  3079  0B50  3001               	movlw	1
  3080  0B51  120A  158A  23D5  120A  158A  	fcall	_sevenSegDisable
  3081  0B56  00FF               	movwf	btemp+1
  3082  0B57  087F               	movf	btemp+1,w
  3083  0B58  1283               	bcf	3,5	;RP0=0, select bank0
  3084  0B59  1303               	bcf	3,6	;RP1=0, select bank0
  3085  0B5A  07D4               	addwf	sevenSegInit@ret,f
  3086  0B5B                     l5508:
  3087                           
  3088                           ;seven_segment.c: 21:     ret=DIO_init(&Dio_configutation_D);
  3089  0B5B  30CF               	movlw	(low (_Dio_configutation_D| 0))& (0+255)
  3090  0B5C  120A  118A  21A2  120A  158A  	fcall	_DIO_init
  3091  0B61  00FF               	movwf	btemp+1
  3092  0B62  087F               	movf	btemp+1,w
  3093  0B63  1283               	bcf	3,5	;RP0=0, select bank0
  3094  0B64  1303               	bcf	3,6	;RP1=0, select bank0
  3095  0B65  00D4               	movwf	sevenSegInit@ret
  3096  0B66                     l5510:
  3097                           
  3098                           ;seven_segment.c: 22:     return ret;
  3099  0B66  0854               	movf	sevenSegInit@ret,w
  3100  0B67                     l69:
  3101  0B67  0008               	return
  3102  0B68                     __end_of_sevenSegInit:
  3103                           
  3104                           	psect	text14
  3105  0BD5                     __ptext14:	
  3106 ;; *************** function _sevenSegDisable *****************
  3107 ;; Defined at:
  3108 ;;		line 67 in file "seven_segment.c"
  3109 ;; Parameters:    Size  Location     Type
  3110 ;;  en_segment_i    1    wreg     enum E96
  3111 ;; Auto vars:     Size  Location     Type
  3112 ;;  en_segment_i    1   12[BANK0 ] enum E96
  3113 ;;  ret             1   13[BANK0 ] unsigned char 
  3114 ;; Return value:  Size  Location     Type
  3115 ;;                  1    wreg      unsigned char 
  3116 ;; Registers used:
  3117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3118 ;; Tracked objects:
  3119 ;;		On entry : 0/0
  3120 ;;		On exit  : 0/0
  3121 ;;		Unchanged: 0/0
  3122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3123 ;;      Params:         0       0       0       0       0
  3124 ;;      Locals:         0       2       0       0       0
  3125 ;;      Temps:          0       2       0       0       0
  3126 ;;      Totals:         0       4       0       0       0
  3127 ;;Total ram usage:        4 bytes
  3128 ;; Hardware stack levels used:    1
  3129 ;; Hardware stack levels required when called:    6
  3130 ;; This function calls:
  3131 ;;		_DIO_Write
  3132 ;; This function is called by:
  3133 ;;		_sevenSegInit
  3134 ;; This function uses a non-reentrant model
  3135 ;;
  3136                           
  3137                           
  3138                           ;psect for function _sevenSegDisable
  3139  0BD5                     _sevenSegDisable:
  3140                           
  3141                           ;incstack = 0
  3142 ;; hardware stack exceeded
  3143                           ; Regs used in _sevenSegDisable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3144                           ;sevenSegDisable@en_segment_id stored from wreg
  3145  0BD5  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0BD6  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0BD7  00D2               	movwf	sevenSegDisable@en_segment_id
  3148  0BD8                     l3622:
  3149                           
  3150                           ;seven_segment.c: 67: ERROR_STATUS sevenSegDisable(En_SevenSegId_t en_segment_id);seven_
      +                          segment.c: 68: {;seven_segment.c: 70: uint8_t ret=0;
  3151  0BD8  01D3               	clrf	sevenSegDisable@ret
  3152                           
  3153                           ;seven_segment.c: 71: switch(en_segment_id)
  3154  0BD9  2BFC               	goto	l3630
  3155  0BDA                     l3624:
  3156                           
  3157                           ;seven_segment.c: 74: ret +=DIO_Write(0,0x04,0);
  3158  0BDA  3004               	movlw	4
  3159  0BDB  00FF               	movwf	btemp+1
  3160  0BDC  087F               	movf	btemp+1,w
  3161  0BDD  00CA               	movwf	DIO_Write@pins
  3162  0BDE  01CB               	clrf	DIO_Write@value
  3163  0BDF  3000               	movlw	0
  3164  0BE0  120A  118A  2376  120A  158A  	fcall	_DIO_Write
  3165  0BE5  00FF               	movwf	btemp+1
  3166  0BE6  087F               	movf	btemp+1,w
  3167  0BE7  1283               	bcf	3,5	;RP0=0, select bank0
  3168  0BE8  1303               	bcf	3,6	;RP1=0, select bank0
  3169  0BE9  07D3               	addwf	sevenSegDisable@ret,f
  3170                           
  3171                           ;seven_segment.c: 75: break;
  3172  0BEA  2C0C               	goto	l3632
  3173  0BEB                     l3626:
  3174                           
  3175                           ;seven_segment.c: 77: ret +=DIO_Write(0,0x08,0);
  3176  0BEB  3008               	movlw	8
  3177  0BEC  00FF               	movwf	btemp+1
  3178  0BED  087F               	movf	btemp+1,w
  3179  0BEE  00CA               	movwf	DIO_Write@pins
  3180  0BEF  01CB               	clrf	DIO_Write@value
  3181  0BF0  3000               	movlw	0
  3182  0BF1  120A  118A  2376  120A  158A  	fcall	_DIO_Write
  3183  0BF6  00FF               	movwf	btemp+1
  3184  0BF7  087F               	movf	btemp+1,w
  3185  0BF8  1283               	bcf	3,5	;RP0=0, select bank0
  3186  0BF9  1303               	bcf	3,6	;RP1=0, select bank0
  3187  0BFA  07D3               	addwf	sevenSegDisable@ret,f
  3188                           
  3189                           ;seven_segment.c: 78: break;
  3190  0BFB  2C0C               	goto	l3632
  3191  0BFC                     l3630:
  3192  0BFC  0852               	movf	sevenSegDisable@en_segment_id,w
  3193  0BFD  00D0               	movwf	??_sevenSegDisable
  3194  0BFE  01D1               	clrf	??_sevenSegDisable+1
  3195                           
  3196                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3197                           ; Switch size 1, requested type "simple"
  3198                           ; Number of cases is 1, Range of values is 0 to 0
  3199                           ; switch strategies available:
  3200                           ; Name         Instructions Cycles
  3201                           ; simple_byte            4     3 (average)
  3202                           ; direct_byte           11     8 (fixed)
  3203                           ; jumptable            260     6 (fixed)
  3204                           ;	Chosen strategy is simple_byte
  3205  0BFF  0851               	movf	??_sevenSegDisable+1,w
  3206  0C00  3A00               	xorlw	0	; case 0
  3207  0C01  1903               	skipnz
  3208  0C02  2C04               	goto	l6448
  3209  0C03  2C0C               	goto	l3632
  3210  0C04                     l6448:
  3211                           
  3212                           ; Switch size 1, requested type "simple"
  3213                           ; Number of cases is 2, Range of values is 0 to 1
  3214                           ; switch strategies available:
  3215                           ; Name         Instructions Cycles
  3216                           ; simple_byte            7     4 (average)
  3217                           ; direct_byte           14     8 (fixed)
  3218                           ; jumptable            260     6 (fixed)
  3219                           ;	Chosen strategy is simple_byte
  3220  0C04  0850               	movf	??_sevenSegDisable,w
  3221  0C05  3A00               	xorlw	0	; case 0
  3222  0C06  1903               	skipnz
  3223  0C07  2BDA               	goto	l3624
  3224  0C08  3A01               	xorlw	1	; case 1
  3225  0C09  1903               	skipnz
  3226  0C0A  2BEB               	goto	l3626
  3227  0C0B  2C0C               	goto	l3632
  3228  0C0C                     l3632:
  3229                           
  3230                           ;seven_segment.c: 80: return ret;
  3231  0C0C  0853               	movf	sevenSegDisable@ret,w
  3232  0C0D                     l88:
  3233  0C0D  0008               	return
  3234  0C0E                     __end_of_sevenSegDisable:
  3235                           
  3236                           	psect	text15
  3237  0376                     __ptext15:	
  3238 ;; *************** function _DIO_Write *****************
  3239 ;; Defined at:
  3240 ;;		line 132 in file "DIO.c"
  3241 ;; Parameters:    Size  Location     Type
  3242 ;;  GPIO            1    wreg     unsigned char 
  3243 ;;  pins            1    4[BANK0 ] unsigned char 
  3244 ;;  value           1    5[BANK0 ] unsigned char 
  3245 ;; Auto vars:     Size  Location     Type
  3246 ;;  GPIO            1    9[BANK0 ] unsigned char 
  3247 ;;  ret_error       1    8[BANK0 ] unsigned char 
  3248 ;; Return value:  Size  Location     Type
  3249 ;;                  1    wreg      unsigned char 
  3250 ;; Registers used:
  3251 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  3252 ;; Tracked objects:
  3253 ;;		On entry : 0/0
  3254 ;;		On exit  : 0/0
  3255 ;;		Unchanged: 0/0
  3256 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3257 ;;      Params:         0       2       0       0       0
  3258 ;;      Locals:         0       2       0       0       0
  3259 ;;      Temps:          0       2       0       0       0
  3260 ;;      Totals:         0       6       0       0       0
  3261 ;;Total ram usage:        6 bytes
  3262 ;; Hardware stack levels used:    1
  3263 ;; Hardware stack levels required when called:    5
  3264 ;; This function calls:
  3265 ;;		Nothing
  3266 ;; This function is called by:
  3267 ;;		_sevenSegDisable
  3268 ;; This function uses a non-reentrant model
  3269 ;;
  3270                           
  3271                           
  3272                           ;psect for function _DIO_Write
  3273  0376                     _DIO_Write:
  3274                           
  3275                           ;incstack = 0
  3276 ;; hardware stack exceeded
  3277                           ; Regs used in _DIO_Write: [wreg-fsr0h+status,2+status,0+btemp+1]
  3278                           ;DIO_Write@GPIO stored from wreg
  3279  0376  1283               	bcf	3,5	;RP0=0, select bank0
  3280  0377  1303               	bcf	3,6	;RP1=0, select bank0
  3281  0378  00CF               	movwf	DIO_Write@GPIO
  3282  0379                     l3312:
  3283                           
  3284                           ;DIO.c: 132: ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value);DIO.c: 1
      +                          33: { uint8_t ret_error=0;
  3285  0379  01CE               	clrf	DIO_Write@ret_error
  3286  037A                     l3314:
  3287                           
  3288                           ;DIO.c: 135:   static uint8_t first_powerup = 0;;DIO.c: 136: if (first_powerup == 0) {
  3289  037A  0838               	movf	DIO_Write@first_powerup,w
  3290  037B  1D03               	btfss	3,2
  3291  037C  2B7E               	goto	u1051
  3292  037D  2B7F               	goto	u1050
  3293  037E                     u1051:
  3294  037E  2C16               	goto	l3370
  3295  037F                     u1050:
  3296  037F  2B8A               	goto	l3330
  3297  0380                     l3318:
  3298                           
  3299                           ;DIO.c: 139:   *((reg_type8_t)(0x0005))=0x00;
  3300  0380  0185               	clrf	5	;volatile
  3301                           
  3302                           ;DIO.c: 140:   break;
  3303  0381  2BA3               	goto	l3332
  3304  0382                     l3320:
  3305                           
  3306                           ;DIO.c: 142:   *((reg_type8_t)(0x0006))=0x00;
  3307  0382  0186               	clrf	6	;volatile
  3308                           
  3309                           ;DIO.c: 143:   break;
  3310  0383  2BA3               	goto	l3332
  3311  0384                     l3322:
  3312                           
  3313                           ;DIO.c: 145:   *((reg_type8_t)(0x0007))=0x00;
  3314  0384  0187               	clrf	7	;volatile
  3315                           
  3316                           ;DIO.c: 146:   break;
  3317  0385  2BA3               	goto	l3332
  3318  0386                     l3324:
  3319                           
  3320                           ;DIO.c: 148:   *((reg_type8_t)(0x0008))=0x00;
  3321  0386  0188               	clrf	8	;volatile
  3322                           
  3323                           ;DIO.c: 149:   break;
  3324  0387  2BA3               	goto	l3332
  3325  0388                     l3326:
  3326                           
  3327                           ;DIO.c: 151:   *((reg_type8_t)(0x0009))=0x00;
  3328  0388  0189               	clrf	9	;volatile
  3329                           
  3330                           ;DIO.c: 152:   break;
  3331  0389  2BA3               	goto	l3332
  3332  038A                     l3330:
  3333  038A  084F               	movf	DIO_Write@GPIO,w
  3334  038B  00CC               	movwf	??_DIO_Write
  3335  038C  01CD               	clrf	??_DIO_Write+1
  3336                           
  3337                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3338                           ; Switch size 1, requested type "simple"
  3339                           ; Number of cases is 1, Range of values is 0 to 0
  3340                           ; switch strategies available:
  3341                           ; Name         Instructions Cycles
  3342                           ; simple_byte            4     3 (average)
  3343                           ; direct_byte           11     8 (fixed)
  3344                           ; jumptable            260     6 (fixed)
  3345                           ;	Chosen strategy is simple_byte
  3346  038D  084D               	movf	??_DIO_Write+1,w
  3347  038E  3A00               	xorlw	0	; case 0
  3348  038F  1903               	skipnz
  3349  0390  2B92               	goto	l6450
  3350  0391  2BA3               	goto	l3332
  3351  0392                     l6450:
  3352                           
  3353                           ; Switch size 1, requested type "simple"
  3354                           ; Number of cases is 5, Range of values is 0 to 4
  3355                           ; switch strategies available:
  3356                           ; Name         Instructions Cycles
  3357                           ; simple_byte           16     9 (average)
  3358                           ; direct_byte           23     8 (fixed)
  3359                           ; jumptable            260     6 (fixed)
  3360                           ;	Chosen strategy is simple_byte
  3361  0392  084C               	movf	??_DIO_Write,w
  3362  0393  3A00               	xorlw	0	; case 0
  3363  0394  1903               	skipnz
  3364  0395  2B80               	goto	l3318
  3365  0396  3A01               	xorlw	1	; case 1
  3366  0397  1903               	skipnz
  3367  0398  2B82               	goto	l3320
  3368  0399  3A03               	xorlw	3	; case 2
  3369  039A  1903               	skipnz
  3370  039B  2B84               	goto	l3322
  3371  039C  3A01               	xorlw	1	; case 3
  3372  039D  1903               	skipnz
  3373  039E  2B86               	goto	l3324
  3374  039F  3A07               	xorlw	7	; case 4
  3375  03A0  1903               	skipnz
  3376  03A1  2B88               	goto	l3326
  3377  03A2  2BA3               	goto	l3332
  3378  03A3                     l3332:
  3379                           
  3380                           ;DIO.c: 154:   first_powerup++;
  3381  03A3  3001               	movlw	1
  3382  03A4  00FF               	movwf	btemp+1
  3383  03A5  087F               	movf	btemp+1,w
  3384  03A6  07B8               	addwf	DIO_Write@first_powerup,f
  3385  03A7  2C16               	goto	l3370
  3386  03A8                     l3334:
  3387                           
  3388                           ;DIO.c: 160:       *((reg_type8_t)(0x0005)) |= pins;
  3389  03A8  084A               	movf	DIO_Write@pins,w
  3390  03A9  00FF               	movwf	btemp+1
  3391  03AA  087F               	movf	btemp+1,w
  3392  03AB  0485               	iorwf	5,f	;volatile
  3393                           
  3394                           ;DIO.c: 161:       break;
  3395  03AC  2C26               	goto	l3372
  3396  03AD                     l3336:
  3397                           
  3398                           ;DIO.c: 163:       *((reg_type8_t)(0x0006)) |= pins;
  3399  03AD  084A               	movf	DIO_Write@pins,w
  3400  03AE  00FF               	movwf	btemp+1
  3401  03AF  087F               	movf	btemp+1,w
  3402  03B0  0486               	iorwf	6,f	;volatile
  3403                           
  3404                           ;DIO.c: 164:       break;
  3405  03B1  2C26               	goto	l3372
  3406  03B2                     l3338:
  3407                           
  3408                           ;DIO.c: 166:       *((reg_type8_t)(0x0007)) |= pins;
  3409  03B2  084A               	movf	DIO_Write@pins,w
  3410  03B3  00FF               	movwf	btemp+1
  3411  03B4  087F               	movf	btemp+1,w
  3412  03B5  0487               	iorwf	7,f	;volatile
  3413                           
  3414                           ;DIO.c: 167:       break;
  3415  03B6  2C26               	goto	l3372
  3416  03B7                     l3340:
  3417                           
  3418                           ;DIO.c: 169:       *((reg_type8_t)(0x0008)) |= pins;
  3419  03B7  084A               	movf	DIO_Write@pins,w
  3420  03B8  00FF               	movwf	btemp+1
  3421  03B9  087F               	movf	btemp+1,w
  3422  03BA  0488               	iorwf	8,f	;volatile
  3423                           
  3424                           ;DIO.c: 170:       break;
  3425  03BB  2C26               	goto	l3372
  3426  03BC                     l3342:
  3427                           
  3428                           ;DIO.c: 172:       *((reg_type8_t)(0x0009)) |= pins;
  3429  03BC  084A               	movf	DIO_Write@pins,w
  3430  03BD  00FF               	movwf	btemp+1
  3431  03BE  087F               	movf	btemp+1,w
  3432  03BF  0489               	iorwf	9,f	;volatile
  3433                           
  3434                           ;DIO.c: 173:       break;
  3435  03C0  2C26               	goto	l3372
  3436  03C1                     l3344:
  3437                           
  3438                           ;DIO.c: 175:       ret_error +=1 +14;
  3439  03C1  300F               	movlw	15
  3440  03C2  00FF               	movwf	btemp+1
  3441  03C3  087F               	movf	btemp+1,w
  3442  03C4  07CE               	addwf	DIO_Write@ret_error,f
  3443                           
  3444                           ;DIO.c: 176:       break;
  3445  03C5  2C26               	goto	l3372
  3446  03C6                     l3348:
  3447  03C6  084F               	movf	DIO_Write@GPIO,w
  3448  03C7  00CC               	movwf	??_DIO_Write
  3449  03C8  01CD               	clrf	??_DIO_Write+1
  3450                           
  3451                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3452                           ; Switch size 1, requested type "simple"
  3453                           ; Number of cases is 1, Range of values is 0 to 0
  3454                           ; switch strategies available:
  3455                           ; Name         Instructions Cycles
  3456                           ; simple_byte            4     3 (average)
  3457                           ; direct_byte           11     8 (fixed)
  3458                           ; jumptable            260     6 (fixed)
  3459                           ;	Chosen strategy is simple_byte
  3460  03C9  084D               	movf	??_DIO_Write+1,w
  3461  03CA  3A00               	xorlw	0	; case 0
  3462  03CB  1903               	skipnz
  3463  03CC  2BCE               	goto	l6452
  3464  03CD  2BC1               	goto	l3344
  3465  03CE                     l6452:
  3466                           
  3467                           ; Switch size 1, requested type "simple"
  3468                           ; Number of cases is 5, Range of values is 0 to 4
  3469                           ; switch strategies available:
  3470                           ; Name         Instructions Cycles
  3471                           ; simple_byte           16     9 (average)
  3472                           ; direct_byte           23     8 (fixed)
  3473                           ; jumptable            260     6 (fixed)
  3474                           ;	Chosen strategy is simple_byte
  3475  03CE  084C               	movf	??_DIO_Write,w
  3476  03CF  3A00               	xorlw	0	; case 0
  3477  03D0  1903               	skipnz
  3478  03D1  2BA8               	goto	l3334
  3479  03D2  3A01               	xorlw	1	; case 1
  3480  03D3  1903               	skipnz
  3481  03D4  2BAD               	goto	l3336
  3482  03D5  3A03               	xorlw	3	; case 2
  3483  03D6  1903               	skipnz
  3484  03D7  2BB2               	goto	l3338
  3485  03D8  3A01               	xorlw	1	; case 3
  3486  03D9  1903               	skipnz
  3487  03DA  2BB7               	goto	l3340
  3488  03DB  3A07               	xorlw	7	; case 4
  3489  03DC  1903               	skipnz
  3490  03DD  2BBC               	goto	l3342
  3491  03DE  2BC1               	goto	l3344
  3492  03DF                     l3350:
  3493                           
  3494                           ;DIO.c: 183:       *((reg_type8_t)(0x0005)) &= (~pins);
  3495  03DF  094A               	comf	DIO_Write@pins,w
  3496  03E0  00FF               	movwf	btemp+1
  3497  03E1  087F               	movf	btemp+1,w
  3498  03E2  0585               	andwf	5,f	;volatile
  3499                           
  3500                           ;DIO.c: 184:       break;
  3501  03E3  2C26               	goto	l3372
  3502  03E4                     l3352:
  3503                           
  3504                           ;DIO.c: 186:       *((reg_type8_t)(0x0006)) &= (~pins);
  3505  03E4  094A               	comf	DIO_Write@pins,w
  3506  03E5  00FF               	movwf	btemp+1
  3507  03E6  087F               	movf	btemp+1,w
  3508  03E7  0586               	andwf	6,f	;volatile
  3509                           
  3510                           ;DIO.c: 187:       break;
  3511  03E8  2C26               	goto	l3372
  3512  03E9                     l3354:
  3513                           
  3514                           ;DIO.c: 189:       *((reg_type8_t)(0x0007)) &= (~pins);
  3515  03E9  094A               	comf	DIO_Write@pins,w
  3516  03EA  00FF               	movwf	btemp+1
  3517  03EB  087F               	movf	btemp+1,w
  3518  03EC  0587               	andwf	7,f	;volatile
  3519                           
  3520                           ;DIO.c: 190:       break;
  3521  03ED  2C26               	goto	l3372
  3522  03EE                     l3356:
  3523                           
  3524                           ;DIO.c: 192:       *((reg_type8_t)(0x0008)) &= (~pins);
  3525  03EE  094A               	comf	DIO_Write@pins,w
  3526  03EF  00FF               	movwf	btemp+1
  3527  03F0  087F               	movf	btemp+1,w
  3528  03F1  0588               	andwf	8,f	;volatile
  3529                           
  3530                           ;DIO.c: 193:       break;
  3531  03F2  2C26               	goto	l3372
  3532  03F3                     l3358:
  3533                           
  3534                           ;DIO.c: 195:       *((reg_type8_t)(0x0009)) &= (~pins);
  3535  03F3  094A               	comf	DIO_Write@pins,w
  3536  03F4  00FF               	movwf	btemp+1
  3537  03F5  087F               	movf	btemp+1,w
  3538  03F6  0589               	andwf	9,f	;volatile
  3539                           
  3540                           ;DIO.c: 196:       break;
  3541  03F7  2C26               	goto	l3372
  3542  03F8                     l3364:
  3543  03F8  084F               	movf	DIO_Write@GPIO,w
  3544  03F9  00CC               	movwf	??_DIO_Write
  3545  03FA  01CD               	clrf	??_DIO_Write+1
  3546                           
  3547                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3548                           ; Switch size 1, requested type "simple"
  3549                           ; Number of cases is 1, Range of values is 0 to 0
  3550                           ; switch strategies available:
  3551                           ; Name         Instructions Cycles
  3552                           ; simple_byte            4     3 (average)
  3553                           ; direct_byte           11     8 (fixed)
  3554                           ; jumptable            260     6 (fixed)
  3555                           ;	Chosen strategy is simple_byte
  3556  03FB  084D               	movf	??_DIO_Write+1,w
  3557  03FC  3A00               	xorlw	0	; case 0
  3558  03FD  1903               	skipnz
  3559  03FE  2C00               	goto	l6454
  3560  03FF  2BC1               	goto	l3344
  3561  0400                     l6454:
  3562                           
  3563                           ; Switch size 1, requested type "simple"
  3564                           ; Number of cases is 5, Range of values is 0 to 4
  3565                           ; switch strategies available:
  3566                           ; Name         Instructions Cycles
  3567                           ; simple_byte           16     9 (average)
  3568                           ; direct_byte           23     8 (fixed)
  3569                           ; jumptable            260     6 (fixed)
  3570                           ;	Chosen strategy is simple_byte
  3571  0400  084C               	movf	??_DIO_Write,w
  3572  0401  3A00               	xorlw	0	; case 0
  3573  0402  1903               	skipnz
  3574  0403  2BDF               	goto	l3350
  3575  0404  3A01               	xorlw	1	; case 1
  3576  0405  1903               	skipnz
  3577  0406  2BE4               	goto	l3352
  3578  0407  3A03               	xorlw	3	; case 2
  3579  0408  1903               	skipnz
  3580  0409  2BE9               	goto	l3354
  3581  040A  3A01               	xorlw	1	; case 3
  3582  040B  1903               	skipnz
  3583  040C  2BEE               	goto	l3356
  3584  040D  3A07               	xorlw	7	; case 4
  3585  040E  1903               	skipnz
  3586  040F  2BF3               	goto	l3358
  3587  0410  2BC1               	goto	l3344
  3588  0411                     l3366:
  3589                           
  3590                           ;DIO.c: 204: ret_error +=1 +18;
  3591  0411  3013               	movlw	19
  3592  0412  00FF               	movwf	btemp+1
  3593  0413  087F               	movf	btemp+1,w
  3594  0414  07CE               	addwf	DIO_Write@ret_error,f
  3595                           
  3596                           ;DIO.c: 205:   break;
  3597  0415  2C26               	goto	l3372
  3598  0416                     l3370:
  3599  0416  084B               	movf	DIO_Write@value,w
  3600  0417  00CC               	movwf	??_DIO_Write
  3601  0418  01CD               	clrf	??_DIO_Write+1
  3602                           
  3603                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3604                           ; Switch size 1, requested type "simple"
  3605                           ; Number of cases is 1, Range of values is 0 to 0
  3606                           ; switch strategies available:
  3607                           ; Name         Instructions Cycles
  3608                           ; simple_byte            4     3 (average)
  3609                           ; direct_byte           11     8 (fixed)
  3610                           ; jumptable            260     6 (fixed)
  3611                           ;	Chosen strategy is simple_byte
  3612  0419  084D               	movf	??_DIO_Write+1,w
  3613  041A  3A00               	xorlw	0	; case 0
  3614  041B  1903               	skipnz
  3615  041C  2C1E               	goto	l6456
  3616  041D  2C11               	goto	l3366
  3617  041E                     l6456:
  3618                           
  3619                           ; Switch size 1, requested type "simple"
  3620                           ; Number of cases is 2, Range of values is 0 to 255
  3621                           ; switch strategies available:
  3622                           ; Name         Instructions Cycles
  3623                           ; simple_byte            7     4 (average)
  3624                           ; jumptable            260     6 (fixed)
  3625                           ;	Chosen strategy is simple_byte
  3626  041E  084C               	movf	??_DIO_Write,w
  3627  041F  3A00               	xorlw	0	; case 0
  3628  0420  1903               	skipnz
  3629  0421  2BF8               	goto	l3364
  3630  0422  3AFF               	xorlw	255	; case 255
  3631  0423  1903               	skipnz
  3632  0424  2BC6               	goto	l3348
  3633  0425  2C11               	goto	l3366
  3634  0426                     l3372:
  3635                           
  3636                           ;DIO.c: 207: return ret_error;
  3637  0426  084E               	movf	DIO_Write@ret_error,w
  3638  0427                     l379:
  3639  0427  0008               	return
  3640  0428                     __end_of_DIO_Write:
  3641                           
  3642                           	psect	text16
  3643  0078                     __ptext16:	
  3644 ;; *************** function _Timer_Init *****************
  3645 ;; Defined at:
  3646 ;;		line 19 in file "Timer.c"
  3647 ;; Parameters:    Size  Location     Type
  3648 ;;  Timer_cfg       1    wreg     PTR struct Timer_cfg_s
  3649 ;;		 -> Timer_Deinit_Configuration0(5), Timer_Configuration2_SOS(5), Timer_Configuration0(5), Timer_Configuration1_7_seg
      +(5), 
  3650 ;; Auto vars:     Size  Location     Type
  3651 ;;  Timer_cfg       1   11[BANK0 ] PTR struct Timer_cfg_s
  3652 ;;		 -> Timer_Deinit_Configuration0(5), Timer_Configuration2_SOS(5), Timer_Configuration0(5), Timer_Configuration1_7_seg
      +(5), 
  3653 ;;  ret_error       1   10[BANK0 ] unsigned char 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  1    wreg      unsigned char 
  3656 ;; Registers used:
  3657 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3663 ;;      Params:         0       0       0       0       0
  3664 ;;      Locals:         0       2       0       0       0
  3665 ;;      Temps:          0       2       0       0       0
  3666 ;;      Totals:         0       4       0       0       0
  3667 ;;Total ram usage:        4 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; Hardware stack levels required when called:    7
  3670 ;; This function calls:
  3671 ;;		_special_int_disable
  3672 ;;		_special_int_enable
  3673 ;; This function is called by:
  3674 ;;		_sevenSegInit
  3675 ;;		_SOS_Init
  3676 ;;		_TMU_DeInit
  3677 ;; This function uses a non-reentrant model
  3678 ;;
  3679                           
  3680                           
  3681                           ;psect for function _Timer_Init
  3682  0078                     _Timer_Init:
  3683                           
  3684                           ;incstack = 0
  3685 ;; hardware stack exceeded
  3686                           ; Regs used in _Timer_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3687                           ;Timer_Init@Timer_cfg stored from wreg
  3688  0078  1283               	bcf	3,5	;RP0=0, select bank0
  3689  0079  1303               	bcf	3,6	;RP1=0, select bank0
  3690  007A  00D1               	movwf	Timer_Init@Timer_cfg
  3691  007B                     l5288:
  3692                           
  3693                           ;Timer.c: 19: ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg);Timer.c: 20: {;Timer.c: 21
      +                          : uint8_t ret_error = 0;
  3694  007B  01D0               	clrf	Timer_Init@ret_error
  3695                           
  3696                           ;Timer.c: 23: switch (Timer_cfg->Timer_CH_NO)
  3697  007C  298A               	goto	l5356
  3698  007D                     l5290:
  3699                           
  3700                           ;Timer.c: 26:     Prescaler0 &= (Timer_cfg -> Timer_Mode);
  3701  007D  0A51               	incf	Timer_Init@Timer_cfg,w
  3702  007E  0084               	movwf	4
  3703  007F  0800               	movf	0,w
  3704  0080  00FF               	movwf	btemp+1
  3705  0081  087F               	movf	btemp+1,w
  3706  0082  05E6               	andwf	_Prescaler0,f
  3707                           
  3708                           ;Timer.c: 27:         switch (Timer_cfg->Timer_Polling_Or_Interrupt)
  3709  0083  28A9               	goto	l5302
  3710  0084                     l5292:
  3711                           
  3712                           ;Timer.c: 30:            ret_error =special_int_enable(0);
  3713  0084  3000               	movlw	0
  3714  0085  120A  118A  266B  120A  118A  	fcall	_special_int_enable
  3715  008A  00FF               	movwf	btemp+1
  3716  008B  087F               	movf	btemp+1,w
  3717  008C  1283               	bcf	3,5	;RP0=0, select bank0
  3718  008D  1303               	bcf	3,6	;RP1=0, select bank0
  3719  008E  00D0               	movwf	Timer_Init@ret_error
  3720  008F                     l5294:
  3721                           
  3722                           ;Timer.c: 31:            TIMER0OVF_INT = ( Timer_cfg -> Timer_Cbk_ptr);
  3723  008F  0851               	movf	Timer_Init@Timer_cfg,w
  3724  0090  3E04               	addlw	4
  3725  0091  0084               	movwf	4
  3726  0092  1383               	bcf	3,7	;select IRP bank0
  3727  0093  0800               	movf	0,w
  3728  0094  00FF               	movwf	btemp+1
  3729  0095  087F               	movf	btemp+1,w
  3730  0096  00BD               	movwf	_TIMER0OVF_INT
  3731                           
  3732                           ;Timer.c: 32:             break;
  3733  0097  29A0               	goto	l5358
  3734  0098                     l5296:
  3735                           
  3736                           ;Timer.c: 34:             ret_error =special_int_disable(0);
  3737  0098  3000               	movlw	0
  3738  0099  120A  158A  24FD  120A  118A  	fcall	_special_int_disable
  3739  009E  00FF               	movwf	btemp+1
  3740  009F  087F               	movf	btemp+1,w
  3741  00A0  1283               	bcf	3,5	;RP0=0, select bank0
  3742  00A1  1303               	bcf	3,6	;RP1=0, select bank0
  3743  00A2  00D0               	movwf	Timer_Init@ret_error
  3744                           
  3745                           ;Timer.c: 35:             break;
  3746  00A3  29A0               	goto	l5358
  3747  00A4                     l5298:
  3748                           
  3749                           ;Timer.c: 37:             ret_error += 1 +24;
  3750  00A4  3019               	movlw	25
  3751  00A5  00FF               	movwf	btemp+1
  3752  00A6  087F               	movf	btemp+1,w
  3753  00A7  07D0               	addwf	Timer_Init@ret_error,f
  3754                           
  3755                           ;Timer.c: 38:             break;
  3756  00A8  29A0               	goto	l5358
  3757  00A9                     l5302:
  3758  00A9  0851               	movf	Timer_Init@Timer_cfg,w
  3759  00AA  3E02               	addlw	2
  3760  00AB  0084               	movwf	4
  3761  00AC  0800               	movf	0,w
  3762  00AD  00CE               	movwf	??_Timer_Init
  3763  00AE  01CF               	clrf	??_Timer_Init+1
  3764                           
  3765                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3766                           ; Switch size 1, requested type "simple"
  3767                           ; Number of cases is 1, Range of values is 0 to 0
  3768                           ; switch strategies available:
  3769                           ; Name         Instructions Cycles
  3770                           ; simple_byte            4     3 (average)
  3771                           ; direct_byte           11     8 (fixed)
  3772                           ; jumptable            260     6 (fixed)
  3773                           ;	Chosen strategy is simple_byte
  3774  00AF  084F               	movf	??_Timer_Init+1,w
  3775  00B0  3A00               	xorlw	0	; case 0
  3776  00B1  1903               	skipnz
  3777  00B2  28B4               	goto	l6458
  3778  00B3  28A4               	goto	l5298
  3779  00B4                     l6458:
  3780                           
  3781                           ; Switch size 1, requested type "simple"
  3782                           ; Number of cases is 2, Range of values is 160 to 223
  3783                           ; switch strategies available:
  3784                           ; Name         Instructions Cycles
  3785                           ; simple_byte            7     4 (average)
  3786                           ; direct_byte          203    11 (fixed)
  3787                           ; jumptable            263     9 (fixed)
  3788                           ;	Chosen strategy is simple_byte
  3789  00B4  084E               	movf	??_Timer_Init,w
  3790  00B5  3AA0               	xorlw	160	; case 160
  3791  00B6  1903               	skipnz
  3792  00B7  2884               	goto	l5292
  3793  00B8  3A7F               	xorlw	127	; case 223
  3794  00B9  1903               	skipnz
  3795  00BA  2898               	goto	l5296
  3796  00BB  28A4               	goto	l5298
  3797  00BC                     l5304:
  3798                           
  3799                           ;Timer.c: 45:         Prescaler1 |= (Timer_cfg -> Timer_Prescaler)|0X08;
  3800  00BC  0851               	movf	Timer_Init@Timer_cfg,w
  3801  00BD  3E03               	addlw	3
  3802  00BE  0084               	movwf	4
  3803  00BF  0800               	movf	0,w
  3804  00C0  3808               	iorlw	8
  3805  00C1  00FF               	movwf	btemp+1
  3806  00C2  087F               	movf	btemp+1,w
  3807  00C3  04B3               	iorwf	_Prescaler1,f
  3808                           
  3809                           ;Timer.c: 46:         switch (Timer_cfg->Timer_Polling_Or_Interrupt)
  3810  00C4  28E5               	goto	l5316
  3811  00C5                     l5306:
  3812                           
  3813                           ;Timer.c: 49:                 ret_error = special_int_enable(1);
  3814  00C5  3001               	movlw	1
  3815  00C6  120A  118A  266B  120A  118A  	fcall	_special_int_enable
  3816  00CB  00FF               	movwf	btemp+1
  3817  00CC  087F               	movf	btemp+1,w
  3818  00CD  1283               	bcf	3,5	;RP0=0, select bank0
  3819  00CE  1303               	bcf	3,6	;RP1=0, select bank0
  3820  00CF  00D0               	movwf	Timer_Init@ret_error
  3821  00D0                     l5308:
  3822                           
  3823                           ;Timer.c: 50:                 TIMER1OVF_INT = ( Timer_cfg -> Timer_Cbk_ptr);
  3824  00D0  0851               	movf	Timer_Init@Timer_cfg,w
  3825  00D1  3E04               	addlw	4
  3826  00D2  0084               	movwf	4
  3827  00D3  1383               	bcf	3,7	;select IRP bank0
  3828  00D4  0800               	movf	0,w
  3829  00D5  00FF               	movwf	btemp+1
  3830  00D6  087F               	movf	btemp+1,w
  3831  00D7  00BC               	movwf	_TIMER1OVF_INT
  3832                           
  3833                           ;Timer.c: 51:             break;
  3834  00D8  29A0               	goto	l5358
  3835  00D9                     l5310:
  3836                           
  3837                           ;Timer.c: 53:                 ret_error = special_int_disable(1);
  3838  00D9  3001               	movlw	1
  3839  00DA  120A  158A  24FD  120A  118A  	fcall	_special_int_disable
  3840  00DF  00FF               	movwf	btemp+1
  3841  00E0  087F               	movf	btemp+1,w
  3842  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  3843  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  3844  00E3  00D0               	movwf	Timer_Init@ret_error
  3845                           
  3846                           ;Timer.c: 54:             break;
  3847  00E4  29A0               	goto	l5358
  3848  00E5                     l5316:
  3849  00E5  0851               	movf	Timer_Init@Timer_cfg,w
  3850  00E6  3E02               	addlw	2
  3851  00E7  0084               	movwf	4
  3852  00E8  0800               	movf	0,w
  3853  00E9  00CE               	movwf	??_Timer_Init
  3854  00EA  01CF               	clrf	??_Timer_Init+1
  3855                           
  3856                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3857                           ; Switch size 1, requested type "simple"
  3858                           ; Number of cases is 1, Range of values is 0 to 0
  3859                           ; switch strategies available:
  3860                           ; Name         Instructions Cycles
  3861                           ; simple_byte            4     3 (average)
  3862                           ; direct_byte           11     8 (fixed)
  3863                           ; jumptable            260     6 (fixed)
  3864                           ;	Chosen strategy is simple_byte
  3865  00EB  084F               	movf	??_Timer_Init+1,w
  3866  00EC  3A00               	xorlw	0	; case 0
  3867  00ED  1903               	skipnz
  3868  00EE  28F0               	goto	l6460
  3869  00EF  28A4               	goto	l5298
  3870  00F0                     l6460:
  3871                           
  3872                           ; Switch size 1, requested type "simple"
  3873                           ; Number of cases is 2, Range of values is 1 to 254
  3874                           ; switch strategies available:
  3875                           ; Name         Instructions Cycles
  3876                           ; simple_byte            7     4 (average)
  3877                           ; jumptable            263     9 (fixed)
  3878                           ;	Chosen strategy is simple_byte
  3879  00F0  084E               	movf	??_Timer_Init,w
  3880  00F1  3A01               	xorlw	1	; case 1
  3881  00F2  1903               	skipnz
  3882  00F3  28C5               	goto	l5306
  3883  00F4  3AFF               	xorlw	255	; case 254
  3884  00F5  1903               	skipnz
  3885  00F6  28D9               	goto	l5310
  3886  00F7  28A4               	goto	l5298
  3887  00F8                     l5318:
  3888                           
  3889                           ;Timer.c: 61:       Prescaler1 |= (Timer_cfg -> Timer_Prescaler);
  3890  00F8  0851               	movf	Timer_Init@Timer_cfg,w
  3891  00F9  3E03               	addlw	3
  3892  00FA  0084               	movwf	4
  3893  00FB  0800               	movf	0,w
  3894  00FC  00FF               	movwf	btemp+1
  3895  00FD  087F               	movf	btemp+1,w
  3896  00FE  04B3               	iorwf	_Prescaler1,f
  3897                           
  3898                           ;Timer.c: 62:         switch (Timer_cfg->Timer_Polling_Or_Interrupt)
  3899  00FF  2920               	goto	l5330
  3900  0100                     l5320:
  3901                           
  3902                           ;Timer.c: 65:             ret_error = special_int_enable(1);
  3903  0100  3001               	movlw	1
  3904  0101  120A  118A  266B  120A  118A  	fcall	_special_int_enable
  3905  0106  00FF               	movwf	btemp+1
  3906  0107  087F               	movf	btemp+1,w
  3907  0108  1283               	bcf	3,5	;RP0=0, select bank0
  3908  0109  1303               	bcf	3,6	;RP1=0, select bank0
  3909  010A  00D0               	movwf	Timer_Init@ret_error
  3910  010B                     l5322:
  3911                           
  3912                           ;Timer.c: 66:             TIMER1OVF_INT = ( Timer_cfg -> Timer_Cbk_ptr);
  3913  010B  0851               	movf	Timer_Init@Timer_cfg,w
  3914  010C  3E04               	addlw	4
  3915  010D  0084               	movwf	4
  3916  010E  1383               	bcf	3,7	;select IRP bank0
  3917  010F  0800               	movf	0,w
  3918  0110  00FF               	movwf	btemp+1
  3919  0111  087F               	movf	btemp+1,w
  3920  0112  00BC               	movwf	_TIMER1OVF_INT
  3921                           
  3922                           ;Timer.c: 67:             break;
  3923  0113  29A0               	goto	l5358
  3924  0114                     l5324:
  3925                           
  3926                           ;Timer.c: 69:             ret_error = special_int_disable(1);
  3927  0114  3001               	movlw	1
  3928  0115  120A  158A  24FD  120A  118A  	fcall	_special_int_disable
  3929  011A  00FF               	movwf	btemp+1
  3930  011B  087F               	movf	btemp+1,w
  3931  011C  1283               	bcf	3,5	;RP0=0, select bank0
  3932  011D  1303               	bcf	3,6	;RP1=0, select bank0
  3933  011E  00D0               	movwf	Timer_Init@ret_error
  3934                           
  3935                           ;Timer.c: 70:             break;
  3936  011F  29A0               	goto	l5358
  3937  0120                     l5330:
  3938  0120  0851               	movf	Timer_Init@Timer_cfg,w
  3939  0121  3E02               	addlw	2
  3940  0122  0084               	movwf	4
  3941  0123  0800               	movf	0,w
  3942  0124  00CE               	movwf	??_Timer_Init
  3943  0125  01CF               	clrf	??_Timer_Init+1
  3944                           
  3945                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3946                           ; Switch size 1, requested type "simple"
  3947                           ; Number of cases is 1, Range of values is 0 to 0
  3948                           ; switch strategies available:
  3949                           ; Name         Instructions Cycles
  3950                           ; simple_byte            4     3 (average)
  3951                           ; direct_byte           11     8 (fixed)
  3952                           ; jumptable            260     6 (fixed)
  3953                           ;	Chosen strategy is simple_byte
  3954  0126  084F               	movf	??_Timer_Init+1,w
  3955  0127  3A00               	xorlw	0	; case 0
  3956  0128  1903               	skipnz
  3957  0129  292B               	goto	l6462
  3958  012A  28A4               	goto	l5298
  3959  012B                     l6462:
  3960                           
  3961                           ; Switch size 1, requested type "simple"
  3962                           ; Number of cases is 2, Range of values is 1 to 254
  3963                           ; switch strategies available:
  3964                           ; Name         Instructions Cycles
  3965                           ; simple_byte            7     4 (average)
  3966                           ; jumptable            263     9 (fixed)
  3967                           ;	Chosen strategy is simple_byte
  3968  012B  084E               	movf	??_Timer_Init,w
  3969  012C  3A01               	xorlw	1	; case 1
  3970  012D  1903               	skipnz
  3971  012E  2900               	goto	l5320
  3972  012F  3AFF               	xorlw	255	; case 254
  3973  0130  1903               	skipnz
  3974  0131  2914               	goto	l5324
  3975  0132  28A4               	goto	l5298
  3976  0133                     l5332:
  3977                           
  3978                           ;Timer.c: 77:       ret_error += 1 +22;
  3979  0133  3017               	movlw	23
  3980  0134  00FF               	movwf	btemp+1
  3981  0135  087F               	movf	btemp+1,w
  3982  0136  07D0               	addwf	Timer_Init@ret_error,f
  3983                           
  3984                           ;Timer.c: 78:       break;
  3985  0137  29A0               	goto	l5358
  3986  0138                     l5336:
  3987  0138  0A51               	incf	Timer_Init@Timer_cfg,w
  3988  0139  0084               	movwf	4
  3989  013A  0800               	movf	0,w
  3990  013B  00CE               	movwf	??_Timer_Init
  3991  013C  01CF               	clrf	??_Timer_Init+1
  3992                           
  3993                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3994                           ; Switch size 1, requested type "simple"
  3995                           ; Number of cases is 1, Range of values is 0 to 0
  3996                           ; switch strategies available:
  3997                           ; Name         Instructions Cycles
  3998                           ; simple_byte            4     3 (average)
  3999                           ; direct_byte           11     8 (fixed)
  4000                           ; jumptable            260     6 (fixed)
  4001                           ;	Chosen strategy is simple_byte
  4002  013D  084F               	movf	??_Timer_Init+1,w
  4003  013E  3A00               	xorlw	0	; case 0
  4004  013F  1903               	skipnz
  4005  0140  2942               	goto	l6464
  4006  0141  2933               	goto	l5332
  4007  0142                     l6464:
  4008                           
  4009                           ; Switch size 1, requested type "simple"
  4010                           ; Number of cases is 2, Range of values is 0 to 1
  4011                           ; switch strategies available:
  4012                           ; Name         Instructions Cycles
  4013                           ; simple_byte            7     4 (average)
  4014                           ; direct_byte           14     8 (fixed)
  4015                           ; jumptable            260     6 (fixed)
  4016                           ;	Chosen strategy is simple_byte
  4017  0142  084E               	movf	??_Timer_Init,w
  4018  0143  3A00               	xorlw	0	; case 0
  4019  0144  1903               	skipnz
  4020  0145  28BC               	goto	l5304
  4021  0146  3A01               	xorlw	1	; case 1
  4022  0147  1903               	skipnz
  4023  0148  28F8               	goto	l5318
  4024  0149  2933               	goto	l5332
  4025  014A                     l5338:
  4026                           
  4027                           ;Timer.c: 83:           *((reg_type8_t)(0x0012)) |= (Timer_cfg -> Timer_Prescaler);
  4028  014A  0851               	movf	Timer_Init@Timer_cfg,w
  4029  014B  3E03               	addlw	3
  4030  014C  0084               	movwf	4
  4031  014D  0800               	movf	0,w
  4032  014E  00FF               	movwf	btemp+1
  4033  014F  087F               	movf	btemp+1,w
  4034  0150  0492               	iorwf	18,f	;volatile
  4035                           
  4036                           ;Timer.c: 84:         switch (Timer_cfg->Timer_Polling_Or_Interrupt)
  4037  0151  2972               	goto	l5350
  4038  0152                     l5340:
  4039                           
  4040                           ;Timer.c: 87:                 ret_error =special_int_enable(2);
  4041  0152  3002               	movlw	2
  4042  0153  120A  118A  266B  120A  118A  	fcall	_special_int_enable
  4043  0158  00FF               	movwf	btemp+1
  4044  0159  087F               	movf	btemp+1,w
  4045  015A  1283               	bcf	3,5	;RP0=0, select bank0
  4046  015B  1303               	bcf	3,6	;RP1=0, select bank0
  4047  015C  00D0               	movwf	Timer_Init@ret_error
  4048  015D                     l5342:
  4049                           
  4050                           ;Timer.c: 88:                 TIMER2OVF_INT = ( Timer_cfg -> Timer_Cbk_ptr);
  4051  015D  0851               	movf	Timer_Init@Timer_cfg,w
  4052  015E  3E04               	addlw	4
  4053  015F  0084               	movwf	4
  4054  0160  1383               	bcf	3,7	;select IRP bank0
  4055  0161  0800               	movf	0,w
  4056  0162  00FF               	movwf	btemp+1
  4057  0163  087F               	movf	btemp+1,w
  4058  0164  00BB               	movwf	_TIMER2OVF_INT
  4059                           
  4060                           ;Timer.c: 90:             break;
  4061  0165  29A0               	goto	l5358
  4062  0166                     l5344:
  4063                           
  4064                           ;Timer.c: 92:                 ret_error =special_int_disable(2);
  4065  0166  3002               	movlw	2
  4066  0167  120A  158A  24FD  120A  118A  	fcall	_special_int_disable
  4067  016C  00FF               	movwf	btemp+1
  4068  016D  087F               	movf	btemp+1,w
  4069  016E  1283               	bcf	3,5	;RP0=0, select bank0
  4070  016F  1303               	bcf	3,6	;RP1=0, select bank0
  4071  0170  00D0               	movwf	Timer_Init@ret_error
  4072                           
  4073                           ;Timer.c: 93:             break;
  4074  0171  29A0               	goto	l5358
  4075  0172                     l5350:
  4076  0172  0851               	movf	Timer_Init@Timer_cfg,w
  4077  0173  3E02               	addlw	2
  4078  0174  0084               	movwf	4
  4079  0175  0800               	movf	0,w
  4080  0176  00CE               	movwf	??_Timer_Init
  4081  0177  01CF               	clrf	??_Timer_Init+1
  4082                           
  4083                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4084                           ; Switch size 1, requested type "simple"
  4085                           ; Number of cases is 1, Range of values is 0 to 0
  4086                           ; switch strategies available:
  4087                           ; Name         Instructions Cycles
  4088                           ; simple_byte            4     3 (average)
  4089                           ; direct_byte           11     8 (fixed)
  4090                           ; jumptable            260     6 (fixed)
  4091                           ;	Chosen strategy is simple_byte
  4092  0178  084F               	movf	??_Timer_Init+1,w
  4093  0179  3A00               	xorlw	0	; case 0
  4094  017A  1903               	skipnz
  4095  017B  297D               	goto	l6466
  4096  017C  28A4               	goto	l5298
  4097  017D                     l6466:
  4098                           
  4099                           ; Switch size 1, requested type "simple"
  4100                           ; Number of cases is 2, Range of values is 2 to 253
  4101                           ; switch strategies available:
  4102                           ; Name         Instructions Cycles
  4103                           ; simple_byte            7     4 (average)
  4104                           ; jumptable            263     9 (fixed)
  4105                           ;	Chosen strategy is simple_byte
  4106  017D  084E               	movf	??_Timer_Init,w
  4107  017E  3A02               	xorlw	2	; case 2
  4108  017F  1903               	skipnz
  4109  0180  2952               	goto	l5340
  4110  0181  3AFF               	xorlw	255	; case 253
  4111  0182  1903               	skipnz
  4112  0183  2966               	goto	l5344
  4113  0184  28A4               	goto	l5298
  4114  0185                     l5352:
  4115                           
  4116                           ;Timer.c: 100:   ret_error += 1 +26;
  4117  0185  301B               	movlw	27
  4118  0186  00FF               	movwf	btemp+1
  4119  0187  087F               	movf	btemp+1,w
  4120  0188  07D0               	addwf	Timer_Init@ret_error,f
  4121                           
  4122                           ;Timer.c: 101:   break;
  4123  0189  29A0               	goto	l5358
  4124  018A                     l5356:
  4125  018A  0851               	movf	Timer_Init@Timer_cfg,w
  4126  018B  0084               	movwf	4
  4127  018C  1383               	bcf	3,7	;select IRP bank0
  4128  018D  0800               	movf	0,w
  4129  018E  00CE               	movwf	??_Timer_Init
  4130  018F  01CF               	clrf	??_Timer_Init+1
  4131                           
  4132                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4133                           ; Switch size 1, requested type "simple"
  4134                           ; Number of cases is 1, Range of values is 0 to 0
  4135                           ; switch strategies available:
  4136                           ; Name         Instructions Cycles
  4137                           ; simple_byte            4     3 (average)
  4138                           ; direct_byte           11     8 (fixed)
  4139                           ; jumptable            260     6 (fixed)
  4140                           ;	Chosen strategy is simple_byte
  4141  0190  084F               	movf	??_Timer_Init+1,w
  4142  0191  3A00               	xorlw	0	; case 0
  4143  0192  1903               	skipnz
  4144  0193  2995               	goto	l6468
  4145  0194  2985               	goto	l5352
  4146  0195                     l6468:
  4147                           
  4148                           ; Switch size 1, requested type "simple"
  4149                           ; Number of cases is 3, Range of values is 0 to 2
  4150                           ; switch strategies available:
  4151                           ; Name         Instructions Cycles
  4152                           ; simple_byte           10     6 (average)
  4153                           ; direct_byte           17     8 (fixed)
  4154                           ; jumptable            260     6 (fixed)
  4155                           ;	Chosen strategy is simple_byte
  4156  0195  084E               	movf	??_Timer_Init,w
  4157  0196  3A00               	xorlw	0	; case 0
  4158  0197  1903               	skipnz
  4159  0198  287D               	goto	l5290
  4160  0199  3A01               	xorlw	1	; case 1
  4161  019A  1903               	skipnz
  4162  019B  2938               	goto	l5336
  4163  019C  3A03               	xorlw	3	; case 2
  4164  019D  1903               	skipnz
  4165  019E  294A               	goto	l5338
  4166  019F  2985               	goto	l5352
  4167  01A0                     l5358:
  4168                           
  4169                           ;Timer.c: 104: return ret_error;
  4170  01A0  0850               	movf	Timer_Init@ret_error,w
  4171  01A1                     l564:
  4172  01A1  0008               	return
  4173  01A2                     __end_of_Timer_Init:
  4174                           
  4175                           	psect	text17
  4176  01A2                     __ptext17:	
  4177 ;; *************** function _DIO_init *****************
  4178 ;; Defined at:
  4179 ;;		line 11 in file "DIO.c"
  4180 ;; Parameters:    Size  Location     Type
  4181 ;;  DIO_info        1    wreg     PTR struct DIO_Cfg_s
  4182 ;;		 -> Dio_configutation_A_ADC(4), Dio_configutation_D(4), Dio_configutation_A_7_seg(4), 
  4183 ;; Auto vars:     Size  Location     Type
  4184 ;;  DIO_info        1    7[BANK0 ] PTR struct DIO_Cfg_s
  4185 ;;		 -> Dio_configutation_A_ADC(4), Dio_configutation_D(4), Dio_configutation_A_7_seg(4), 
  4186 ;;  ret_error       1    6[BANK0 ] unsigned char 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      unsigned char 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4196 ;;      Params:         0       0       0       0       0
  4197 ;;      Locals:         0       2       0       0       0
  4198 ;;      Temps:          0       2       0       0       0
  4199 ;;      Totals:         0       4       0       0       0
  4200 ;;Total ram usage:        4 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:    5
  4203 ;; This function calls:
  4204 ;;		Nothing
  4205 ;; This function is called by:
  4206 ;;		_sevenSegInit
  4207 ;;		_Task2
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           
  4212                           ;psect for function _DIO_init
  4213  01A2                     _DIO_init:
  4214                           
  4215                           ;incstack = 0
  4216 ;; hardware stack exceeded
  4217                           ; Regs used in _DIO_init: [wreg-fsr0h+status,2+status,0+btemp+1]
  4218                           ;DIO_init@DIO_info stored from wreg
  4219  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  4220  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  4221  01A4  00CD               	movwf	DIO_init@DIO_info
  4222  01A5                     l5398:
  4223                           
  4224                           ;DIO.c: 11: ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info);DIO.c: 12: {;DIO.c: 13: uint8_t 
      +                          ret_error=0;
  4225  01A5  01CC               	clrf	DIO_init@ret_error
  4226  01A6                     l5400:
  4227                           
  4228                           ;DIO.c: 14: static uint8_t first_powerup_init = 0;;DIO.c: 15: is_init=1;
  4229  01A6  01BA               	clrf	_is_init
  4230  01A7  0ABA               	incf	_is_init,f
  4231  01A8                     l5402:
  4232                           
  4233                           ;DIO.c: 16:  if (first_powerup_init == 0) {
  4234  01A8  0839               	movf	DIO_init@first_powerup_init,w
  4235  01A9  1D03               	btfss	3,2
  4236  01AA  29AC               	goto	u1951
  4237  01AB  29AD               	goto	u1950
  4238  01AC                     u1951:
  4239  01AC  29E3               	goto	l5422
  4240  01AD                     u1950:
  4241  01AD  29C2               	goto	l5418
  4242  01AE                     l5406:
  4243                           
  4244                           ;DIO.c: 20:   *((reg_type8_t)(0x0085))=0x00;
  4245  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  4246  01AF  1303               	bcf	3,6	;RP1=0, select bank1
  4247  01B0  0185               	clrf	5	;volatile
  4248                           
  4249                           ;DIO.c: 21:       break;
  4250  01B1  29DE               	goto	l5420
  4251  01B2                     l5408:
  4252                           
  4253                           ;DIO.c: 23:   *((reg_type8_t)(0x0086))=0x00;
  4254  01B2  1683               	bsf	3,5	;RP0=1, select bank1
  4255  01B3  1303               	bcf	3,6	;RP1=0, select bank1
  4256  01B4  0186               	clrf	6	;volatile
  4257                           
  4258                           ;DIO.c: 24:       break;
  4259  01B5  29DE               	goto	l5420
  4260  01B6                     l5410:
  4261                           
  4262                           ;DIO.c: 26:   *((reg_type8_t)(0x0087))=0x00;
  4263  01B6  1683               	bsf	3,5	;RP0=1, select bank1
  4264  01B7  1303               	bcf	3,6	;RP1=0, select bank1
  4265  01B8  0187               	clrf	7	;volatile
  4266                           
  4267                           ;DIO.c: 27:       break;
  4268  01B9  29DE               	goto	l5420
  4269  01BA                     l5412:
  4270                           
  4271                           ;DIO.c: 29:   *((reg_type8_t)(0x0088))=0x00;
  4272  01BA  1683               	bsf	3,5	;RP0=1, select bank1
  4273  01BB  1303               	bcf	3,6	;RP1=0, select bank1
  4274  01BC  0188               	clrf	8	;volatile
  4275                           
  4276                           ;DIO.c: 30:       break;
  4277  01BD  29DE               	goto	l5420
  4278  01BE                     l5414:
  4279                           
  4280                           ;DIO.c: 32:   *((reg_type8_t)(0x0089))=0x00;
  4281  01BE  1683               	bsf	3,5	;RP0=1, select bank1
  4282  01BF  1303               	bcf	3,6	;RP1=0, select bank1
  4283  01C0  0189               	clrf	9	;volatile
  4284                           
  4285                           ;DIO.c: 33:       break;
  4286  01C1  29DE               	goto	l5420
  4287  01C2                     l5418:
  4288  01C2  084D               	movf	DIO_init@DIO_info,w
  4289  01C3  0084               	movwf	4
  4290  01C4  1383               	bcf	3,7	;select IRP bank0
  4291  01C5  0800               	movf	0,w
  4292  01C6  00CA               	movwf	??_DIO_init
  4293  01C7  01CB               	clrf	??_DIO_init+1
  4294                           
  4295                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4296                           ; Switch size 1, requested type "simple"
  4297                           ; Number of cases is 1, Range of values is 0 to 0
  4298                           ; switch strategies available:
  4299                           ; Name         Instructions Cycles
  4300                           ; simple_byte            4     3 (average)
  4301                           ; direct_byte           11     8 (fixed)
  4302                           ; jumptable            260     6 (fixed)
  4303                           ;	Chosen strategy is simple_byte
  4304  01C8  084B               	movf	??_DIO_init+1,w
  4305  01C9  3A00               	xorlw	0	; case 0
  4306  01CA  1903               	skipnz
  4307  01CB  29CD               	goto	l6470
  4308  01CC  29DE               	goto	l5420
  4309  01CD                     l6470:
  4310                           
  4311                           ; Switch size 1, requested type "simple"
  4312                           ; Number of cases is 5, Range of values is 0 to 4
  4313                           ; switch strategies available:
  4314                           ; Name         Instructions Cycles
  4315                           ; simple_byte           16     9 (average)
  4316                           ; direct_byte           23     8 (fixed)
  4317                           ; jumptable            260     6 (fixed)
  4318                           ;	Chosen strategy is simple_byte
  4319  01CD  084A               	movf	??_DIO_init,w
  4320  01CE  3A00               	xorlw	0	; case 0
  4321  01CF  1903               	skipnz
  4322  01D0  29AE               	goto	l5406
  4323  01D1  3A01               	xorlw	1	; case 1
  4324  01D2  1903               	skipnz
  4325  01D3  29B2               	goto	l5408
  4326  01D4  3A03               	xorlw	3	; case 2
  4327  01D5  1903               	skipnz
  4328  01D6  29B6               	goto	l5410
  4329  01D7  3A01               	xorlw	1	; case 3
  4330  01D8  1903               	skipnz
  4331  01D9  29BA               	goto	l5412
  4332  01DA  3A07               	xorlw	7	; case 4
  4333  01DB  1903               	skipnz
  4334  01DC  29BE               	goto	l5414
  4335  01DD  29DE               	goto	l5420
  4336  01DE                     l5420:
  4337                           
  4338                           ;DIO.c: 35:   first_powerup_init++;
  4339  01DE  3001               	movlw	1
  4340  01DF  00FF               	movwf	btemp+1
  4341  01E0  087F               	movf	btemp+1,w
  4342  01E1  1283               	bcf	3,5	;RP0=0, select bank0
  4343  01E2  07B9               	addwf	DIO_init@first_powerup_init,f
  4344  01E3                     l5422:
  4345                           
  4346                           ;DIO.c: 37: if((DIO_info -> port)== 0)
  4347  01E3  084D               	movf	DIO_init@DIO_info,w
  4348  01E4  0084               	movwf	4
  4349  01E5  1383               	bcf	3,7	;select IRP bank0
  4350  01E6  0800               	movf	0,w
  4351  01E7  1D03               	btfss	3,2
  4352  01E8  29EA               	goto	u1961
  4353  01E9  29EB               	goto	u1960
  4354  01EA                     u1961:
  4355  01EA  29F4               	goto	l5426
  4356  01EB                     u1960:
  4357  01EB                     l5424:
  4358                           
  4359                           ;DIO.c: 38:  *((reg_type8_t)(0x009F)) |=( DIO_info -> operation_mode) ;
  4360  01EB  084D               	movf	DIO_init@DIO_info,w
  4361  01EC  3E03               	addlw	3
  4362  01ED  0084               	movwf	4
  4363  01EE  0800               	movf	0,w
  4364  01EF  00FF               	movwf	btemp+1
  4365  01F0  087F               	movf	btemp+1,w
  4366  01F1  1683               	bsf	3,5	;RP0=1, select bank1
  4367  01F2  1303               	bcf	3,6	;RP1=0, select bank1
  4368  01F3  049F               	iorwf	31,f	;volatile
  4369  01F4                     l5426:
  4370                           
  4371                           ;DIO.c: 39: if(DIO_info != ((void *)0)){
  4372  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  4373  01F5  084D               	movf	DIO_init@DIO_info,w
  4374  01F6  1903               	btfsc	3,2
  4375  01F7  29F9               	goto	u1971
  4376  01F8  29FA               	goto	u1970
  4377  01F9                     u1971:
  4378  01F9  2AB1               	goto	l5468
  4379  01FA                     u1970:
  4380  01FA  2A9F               	goto	l5466
  4381  01FB                     l5430:
  4382                           
  4383                           ;DIO.c: 48:            *((reg_type8_t)(0x0085)) |=(DIO_info-> pin) ;
  4384  01FB  084D               	movf	DIO_init@DIO_info,w
  4385  01FC  3E02               	addlw	2
  4386  01FD  0084               	movwf	4
  4387  01FE  0800               	movf	0,w
  4388  01FF  00FF               	movwf	btemp+1
  4389  0200  087F               	movf	btemp+1,w
  4390  0201  1683               	bsf	3,5	;RP0=1, select bank1
  4391  0202  1303               	bcf	3,6	;RP1=0, select bank1
  4392  0203  0485               	iorwf	5,f	;volatile
  4393                           
  4394                           ;DIO.c: 49:             break;
  4395  0204  2AB5               	goto	l5470
  4396  0205                     l5432:
  4397                           
  4398                           ;DIO.c: 52:                 *((reg_type8_t)(0x0086)) |=(DIO_info->pin) ;
  4399  0205  084D               	movf	DIO_init@DIO_info,w
  4400  0206  3E02               	addlw	2
  4401  0207  0084               	movwf	4
  4402  0208  0800               	movf	0,w
  4403  0209  00FF               	movwf	btemp+1
  4404  020A  087F               	movf	btemp+1,w
  4405  020B  1683               	bsf	3,5	;RP0=1, select bank1
  4406  020C  1303               	bcf	3,6	;RP1=0, select bank1
  4407  020D  0486               	iorwf	6,f	;volatile
  4408                           
  4409                           ;DIO.c: 53:             break;
  4410  020E  2AB5               	goto	l5470
  4411  020F                     l5434:
  4412                           
  4413                           ;DIO.c: 56:                 *((reg_type8_t)(0x0087)) |=(DIO_info->pin) ;
  4414  020F  084D               	movf	DIO_init@DIO_info,w
  4415  0210  3E02               	addlw	2
  4416  0211  0084               	movwf	4
  4417  0212  0800               	movf	0,w
  4418  0213  00FF               	movwf	btemp+1
  4419  0214  087F               	movf	btemp+1,w
  4420  0215  1683               	bsf	3,5	;RP0=1, select bank1
  4421  0216  1303               	bcf	3,6	;RP1=0, select bank1
  4422  0217  0487               	iorwf	7,f	;volatile
  4423                           
  4424                           ;DIO.c: 57:             break;
  4425  0218  2AB5               	goto	l5470
  4426  0219                     l5436:
  4427                           
  4428                           ;DIO.c: 60:                 *((reg_type8_t)(0x0088)) |=(DIO_info->pin) ;
  4429  0219  084D               	movf	DIO_init@DIO_info,w
  4430  021A  3E02               	addlw	2
  4431  021B  0084               	movwf	4
  4432  021C  0800               	movf	0,w
  4433  021D  00FF               	movwf	btemp+1
  4434  021E  087F               	movf	btemp+1,w
  4435  021F  1683               	bsf	3,5	;RP0=1, select bank1
  4436  0220  1303               	bcf	3,6	;RP1=0, select bank1
  4437  0221  0488               	iorwf	8,f	;volatile
  4438                           
  4439                           ;DIO.c: 61:             break;
  4440  0222  2AB5               	goto	l5470
  4441  0223                     l5438:
  4442                           
  4443                           ;DIO.c: 64:             *((reg_type8_t)(0x0089)) |=(DIO_info->pin) ;
  4444  0223  084D               	movf	DIO_init@DIO_info,w
  4445  0224  3E02               	addlw	2
  4446  0225  0084               	movwf	4
  4447  0226  0800               	movf	0,w
  4448  0227  00FF               	movwf	btemp+1
  4449  0228  087F               	movf	btemp+1,w
  4450  0229  1683               	bsf	3,5	;RP0=1, select bank1
  4451  022A  1303               	bcf	3,6	;RP1=0, select bank1
  4452  022B  0489               	iorwf	9,f	;volatile
  4453                           
  4454                           ;DIO.c: 65:             break;
  4455  022C  2AB5               	goto	l5470
  4456  022D                     l5440:
  4457                           
  4458                           ;DIO.c: 67:             ret_error += 1 +14;
  4459  022D  300F               	movlw	15
  4460  022E  00FF               	movwf	btemp+1
  4461  022F  087F               	movf	btemp+1,w
  4462  0230  07CC               	addwf	DIO_init@ret_error,f
  4463                           
  4464                           ;DIO.c: 68:             break;
  4465  0231  2AB5               	goto	l5470
  4466  0232                     l5444:
  4467  0232  084D               	movf	DIO_init@DIO_info,w
  4468  0233  0084               	movwf	4
  4469  0234  0800               	movf	0,w
  4470  0235  00CA               	movwf	??_DIO_init
  4471  0236  01CB               	clrf	??_DIO_init+1
  4472                           
  4473                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4474                           ; Switch size 1, requested type "simple"
  4475                           ; Number of cases is 1, Range of values is 0 to 0
  4476                           ; switch strategies available:
  4477                           ; Name         Instructions Cycles
  4478                           ; simple_byte            4     3 (average)
  4479                           ; direct_byte           11     8 (fixed)
  4480                           ; jumptable            260     6 (fixed)
  4481                           ;	Chosen strategy is simple_byte
  4482  0237  084B               	movf	??_DIO_init+1,w
  4483  0238  3A00               	xorlw	0	; case 0
  4484  0239  1903               	skipnz
  4485  023A  2A3C               	goto	l6472
  4486  023B  2A2D               	goto	l5440
  4487  023C                     l6472:
  4488                           
  4489                           ; Switch size 1, requested type "simple"
  4490                           ; Number of cases is 5, Range of values is 0 to 4
  4491                           ; switch strategies available:
  4492                           ; Name         Instructions Cycles
  4493                           ; simple_byte           16     9 (average)
  4494                           ; direct_byte           23     8 (fixed)
  4495                           ; jumptable            260     6 (fixed)
  4496                           ;	Chosen strategy is simple_byte
  4497  023C  084A               	movf	??_DIO_init,w
  4498  023D  3A00               	xorlw	0	; case 0
  4499  023E  1903               	skipnz
  4500  023F  29FB               	goto	l5430
  4501  0240  3A01               	xorlw	1	; case 1
  4502  0241  1903               	skipnz
  4503  0242  2A05               	goto	l5432
  4504  0243  3A03               	xorlw	3	; case 2
  4505  0244  1903               	skipnz
  4506  0245  2A0F               	goto	l5434
  4507  0246  3A01               	xorlw	1	; case 3
  4508  0247  1903               	skipnz
  4509  0248  2A19               	goto	l5436
  4510  0249  3A07               	xorlw	7	; case 4
  4511  024A  1903               	skipnz
  4512  024B  2A23               	goto	l5438
  4513  024C  2A2D               	goto	l5440
  4514  024D                     l5446:
  4515                           
  4516                           ;DIO.c: 75:         *((reg_type8_t)(0x0085)) &=(~(DIO_info->pin)) ;
  4517  024D  084D               	movf	DIO_init@DIO_info,w
  4518  024E  3E02               	addlw	2
  4519  024F  0084               	movwf	4
  4520  0250  0900               	comf	0,w
  4521  0251  00FF               	movwf	btemp+1
  4522  0252  087F               	movf	btemp+1,w
  4523  0253  1683               	bsf	3,5	;RP0=1, select bank1
  4524  0254  1303               	bcf	3,6	;RP1=0, select bank1
  4525  0255  0585               	andwf	5,f	;volatile
  4526                           
  4527                           ;DIO.c: 76:       break;
  4528  0256  2AB5               	goto	l5470
  4529  0257                     l5448:
  4530                           
  4531                           ;DIO.c: 78:         *((reg_type8_t)(0x0086)) &=(~(DIO_info->pin)) ;
  4532  0257  084D               	movf	DIO_init@DIO_info,w
  4533  0258  3E02               	addlw	2
  4534  0259  0084               	movwf	4
  4535  025A  0900               	comf	0,w
  4536  025B  00FF               	movwf	btemp+1
  4537  025C  087F               	movf	btemp+1,w
  4538  025D  1683               	bsf	3,5	;RP0=1, select bank1
  4539  025E  1303               	bcf	3,6	;RP1=0, select bank1
  4540  025F  0586               	andwf	6,f	;volatile
  4541                           
  4542                           ;DIO.c: 79:       break;
  4543  0260  2AB5               	goto	l5470
  4544  0261                     l5450:
  4545                           
  4546                           ;DIO.c: 81:         *((reg_type8_t)(0x0087)) &=(~(DIO_info->pin)) ;
  4547  0261  084D               	movf	DIO_init@DIO_info,w
  4548  0262  3E02               	addlw	2
  4549  0263  0084               	movwf	4
  4550  0264  0900               	comf	0,w
  4551  0265  00FF               	movwf	btemp+1
  4552  0266  087F               	movf	btemp+1,w
  4553  0267  1683               	bsf	3,5	;RP0=1, select bank1
  4554  0268  1303               	bcf	3,6	;RP1=0, select bank1
  4555  0269  0587               	andwf	7,f	;volatile
  4556                           
  4557                           ;DIO.c: 82:       break;
  4558  026A  2AB5               	goto	l5470
  4559  026B                     l5452:
  4560                           
  4561                           ;DIO.c: 84:         *((reg_type8_t)(0x0088)) &=(~(DIO_info->pin)) ;
  4562  026B  084D               	movf	DIO_init@DIO_info,w
  4563  026C  3E02               	addlw	2
  4564  026D  0084               	movwf	4
  4565  026E  0900               	comf	0,w
  4566  026F  00FF               	movwf	btemp+1
  4567  0270  087F               	movf	btemp+1,w
  4568  0271  1683               	bsf	3,5	;RP0=1, select bank1
  4569  0272  1303               	bcf	3,6	;RP1=0, select bank1
  4570  0273  0588               	andwf	8,f	;volatile
  4571                           
  4572                           ;DIO.c: 85:       break;
  4573  0274  2AB5               	goto	l5470
  4574  0275                     l5454:
  4575                           
  4576                           ;DIO.c: 87:         *((reg_type8_t)(0x0089)) &=(~(DIO_info->pin)) ;
  4577  0275  084D               	movf	DIO_init@DIO_info,w
  4578  0276  3E02               	addlw	2
  4579  0277  0084               	movwf	4
  4580  0278  0900               	comf	0,w
  4581  0279  00FF               	movwf	btemp+1
  4582  027A  087F               	movf	btemp+1,w
  4583  027B  1683               	bsf	3,5	;RP0=1, select bank1
  4584  027C  1303               	bcf	3,6	;RP1=0, select bank1
  4585  027D  0589               	andwf	9,f	;volatile
  4586                           
  4587                           ;DIO.c: 88:       break;
  4588  027E  2AB5               	goto	l5470
  4589  027F                     l5460:
  4590  027F  084D               	movf	DIO_init@DIO_info,w
  4591  0280  0084               	movwf	4
  4592  0281  0800               	movf	0,w
  4593  0282  00CA               	movwf	??_DIO_init
  4594  0283  01CB               	clrf	??_DIO_init+1
  4595                           
  4596                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4597                           ; Switch size 1, requested type "simple"
  4598                           ; Number of cases is 1, Range of values is 0 to 0
  4599                           ; switch strategies available:
  4600                           ; Name         Instructions Cycles
  4601                           ; simple_byte            4     3 (average)
  4602                           ; direct_byte           11     8 (fixed)
  4603                           ; jumptable            260     6 (fixed)
  4604                           ;	Chosen strategy is simple_byte
  4605  0284  084B               	movf	??_DIO_init+1,w
  4606  0285  3A00               	xorlw	0	; case 0
  4607  0286  1903               	skipnz
  4608  0287  2A89               	goto	l6474
  4609  0288  2A2D               	goto	l5440
  4610  0289                     l6474:
  4611                           
  4612                           ; Switch size 1, requested type "simple"
  4613                           ; Number of cases is 5, Range of values is 0 to 4
  4614                           ; switch strategies available:
  4615                           ; Name         Instructions Cycles
  4616                           ; simple_byte           16     9 (average)
  4617                           ; direct_byte           23     8 (fixed)
  4618                           ; jumptable            260     6 (fixed)
  4619                           ;	Chosen strategy is simple_byte
  4620  0289  084A               	movf	??_DIO_init,w
  4621  028A  3A00               	xorlw	0	; case 0
  4622  028B  1903               	skipnz
  4623  028C  2A4D               	goto	l5446
  4624  028D  3A01               	xorlw	1	; case 1
  4625  028E  1903               	skipnz
  4626  028F  2A57               	goto	l5448
  4627  0290  3A03               	xorlw	3	; case 2
  4628  0291  1903               	skipnz
  4629  0292  2A61               	goto	l5450
  4630  0293  3A01               	xorlw	1	; case 3
  4631  0294  1903               	skipnz
  4632  0295  2A6B               	goto	l5452
  4633  0296  3A07               	xorlw	7	; case 4
  4634  0297  1903               	skipnz
  4635  0298  2A75               	goto	l5454
  4636  0299  2A2D               	goto	l5440
  4637  029A                     l5462:
  4638                           
  4639                           ;DIO.c: 95: ret_error +=1 + 18;
  4640  029A  3013               	movlw	19
  4641  029B  00FF               	movwf	btemp+1
  4642  029C  087F               	movf	btemp+1,w
  4643  029D  07CC               	addwf	DIO_init@ret_error,f
  4644                           
  4645                           ;DIO.c: 96: break;
  4646  029E  2AB5               	goto	l5470
  4647  029F                     l5466:
  4648  029F  0A4D               	incf	DIO_init@DIO_info,w
  4649  02A0  0084               	movwf	4
  4650  02A1  0800               	movf	0,w
  4651  02A2  00CA               	movwf	??_DIO_init
  4652  02A3  01CB               	clrf	??_DIO_init+1
  4653                           
  4654                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4655                           ; Switch size 1, requested type "simple"
  4656                           ; Number of cases is 1, Range of values is 0 to 0
  4657                           ; switch strategies available:
  4658                           ; Name         Instructions Cycles
  4659                           ; simple_byte            4     3 (average)
  4660                           ; direct_byte           11     8 (fixed)
  4661                           ; jumptable            260     6 (fixed)
  4662                           ;	Chosen strategy is simple_byte
  4663  02A4  084B               	movf	??_DIO_init+1,w
  4664  02A5  3A00               	xorlw	0	; case 0
  4665  02A6  1903               	skipnz
  4666  02A7  2AA9               	goto	l6476
  4667  02A8  2A9A               	goto	l5462
  4668  02A9                     l6476:
  4669                           
  4670                           ; Switch size 1, requested type "simple"
  4671                           ; Number of cases is 2, Range of values is 0 to 255
  4672                           ; switch strategies available:
  4673                           ; Name         Instructions Cycles
  4674                           ; simple_byte            7     4 (average)
  4675                           ; jumptable            260     6 (fixed)
  4676                           ;	Chosen strategy is simple_byte
  4677  02A9  084A               	movf	??_DIO_init,w
  4678  02AA  3A00               	xorlw	0	; case 0
  4679  02AB  1903               	skipnz
  4680  02AC  2A32               	goto	l5444
  4681  02AD  3AFF               	xorlw	255	; case 255
  4682  02AE  1903               	skipnz
  4683  02AF  2A7F               	goto	l5460
  4684  02B0  2A9A               	goto	l5462
  4685  02B1                     l5468:
  4686                           
  4687                           ;DIO.c: 99: {;DIO.c: 100: ret_error +=1 +16;
  4688  02B1  3011               	movlw	17
  4689  02B2  00FF               	movwf	btemp+1
  4690  02B3  087F               	movf	btemp+1,w
  4691  02B4  07CC               	addwf	DIO_init@ret_error,f
  4692  02B5                     l5470:
  4693                           
  4694                           ;DIO.c: 102: return ret_error;
  4695  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  4696  02B6  084C               	movf	DIO_init@ret_error,w
  4697  02B7                     l345:
  4698  02B7  0008               	return
  4699  02B8                     __end_of_DIO_init:
  4700                           
  4701                           	psect	text18
  4702  0CC0                     __ptext18:	
  4703 ;; *************** function _I2C_Master_Init *****************
  4704 ;; Defined at:
  4705 ;;		line 8 in file "i2c_EEPROM.c"
  4706 ;; Parameters:    Size  Location     Type
  4707 ;;  baud            4   18[BANK0 ] const unsigned long 
  4708 ;; Auto vars:     Size  Location     Type
  4709 ;;		None
  4710 ;; Return value:  Size  Location     Type
  4711 ;;                  1    wreg      void 
  4712 ;; Registers used:
  4713 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  4714 ;; Tracked objects:
  4715 ;;		On entry : 0/0
  4716 ;;		On exit  : 0/0
  4717 ;;		Unchanged: 0/0
  4718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4719 ;;      Params:         0       4       0       0       0
  4720 ;;      Locals:         0       0       0       0       0
  4721 ;;      Temps:          0       4       0       0       0
  4722 ;;      Totals:         0       8       0       0       0
  4723 ;;Total ram usage:        8 bytes
  4724 ;; Hardware stack levels used:    1
  4725 ;; Hardware stack levels required when called:    6
  4726 ;; This function calls:
  4727 ;;		___lldiv
  4728 ;; This function is called by:
  4729 ;;		_Task2
  4730 ;; This function uses a non-reentrant model
  4731 ;;
  4732                           
  4733                           
  4734                           ;psect for function _I2C_Master_Init
  4735  0CC0                     _I2C_Master_Init:
  4736  0CC0                     l4084:	
  4737                           ;incstack = 0
  4738 ;; hardware stack exceeded
  4739                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  4740                           
  4741                           
  4742                           ;i2c_EEPROM.c: 8: void I2C_Master_Init(const unsigned long baud);i2c_EEPROM.c: 9: {;i2c_
      +                          EEPROM.c: 10:   SSPCON = 0b00101000;
  4743  0CC0  3028               	movlw	40
  4744  0CC1  1283               	bcf	3,5	;RP0=0, select bank0
  4745  0CC2  1303               	bcf	3,6	;RP1=0, select bank0
  4746  0CC3  0094               	movwf	20	;volatile
  4747  0CC4                     l4086:
  4748                           
  4749                           ;i2c_EEPROM.c: 11:   SSPCON2 = 0;
  4750  0CC4  1683               	bsf	3,5	;RP0=1, select bank1
  4751  0CC5  1303               	bcf	3,6	;RP1=0, select bank1
  4752  0CC6  0191               	clrf	17	;volatile
  4753  0CC7                     l4088:
  4754                           
  4755                           ;i2c_EEPROM.c: 12:   SSPADD = (8000000/(4*baud))-1;
  4756  0CC7  1283               	bcf	3,5	;RP0=0, select bank0
  4757  0CC8  1303               	bcf	3,6	;RP1=0, select bank0
  4758  0CC9  0858               	movf	I2C_Master_Init@baud,w
  4759  0CCA  00DC               	movwf	??_I2C_Master_Init
  4760  0CCB  0859               	movf	I2C_Master_Init@baud+1,w
  4761  0CCC  00DD               	movwf	??_I2C_Master_Init+1
  4762  0CCD  085A               	movf	I2C_Master_Init@baud+2,w
  4763  0CCE  00DE               	movwf	??_I2C_Master_Init+2
  4764  0CCF  085B               	movf	I2C_Master_Init@baud+3,w
  4765  0CD0  00DF               	movwf	??_I2C_Master_Init+3
  4766  0CD1  3002               	movlw	2
  4767  0CD2                     u1615:
  4768  0CD2  1003               	clrc
  4769  0CD3  0DDC               	rlf	??_I2C_Master_Init,f
  4770  0CD4  0DDD               	rlf	??_I2C_Master_Init+1,f
  4771  0CD5  0DDE               	rlf	??_I2C_Master_Init+2,f
  4772  0CD6  0DDF               	rlf	??_I2C_Master_Init+3,f
  4773  0CD7                     u1610:
  4774  0CD7  3EFF               	addlw	-1
  4775  0CD8  1D03               	skipz
  4776  0CD9  2CD2               	goto	u1615
  4777  0CDA  085F               	movf	??_I2C_Master_Init+3,w
  4778  0CDB  00CD               	movwf	___lldiv@divisor+3
  4779  0CDC  085E               	movf	??_I2C_Master_Init+2,w
  4780  0CDD  00CC               	movwf	___lldiv@divisor+2
  4781  0CDE  085D               	movf	??_I2C_Master_Init+1,w
  4782  0CDF  00CB               	movwf	___lldiv@divisor+1
  4783  0CE0  085C               	movf	??_I2C_Master_Init,w
  4784  0CE1  00CA               	movwf	___lldiv@divisor
  4785  0CE2  3000               	movlw	0
  4786  0CE3  00D1               	movwf	___lldiv@dividend+3
  4787  0CE4  307A               	movlw	122
  4788  0CE5  00D0               	movwf	___lldiv@dividend+2
  4789  0CE6  3012               	movlw	18
  4790  0CE7  00CF               	movwf	___lldiv@dividend+1
  4791  0CE8  3000               	movlw	0
  4792  0CE9  00CE               	movwf	___lldiv@dividend
  4793  0CEA  120A  158A  2798  120A  158A  	fcall	___lldiv
  4794  0CEF  1283               	bcf	3,5	;RP0=0, select bank0
  4795  0CF0  1303               	bcf	3,6	;RP1=0, select bank0
  4796  0CF1  084A               	movf	?___lldiv,w
  4797  0CF2  3EFF               	addlw	255
  4798  0CF3  1683               	bsf	3,5	;RP0=1, select bank1
  4799  0CF4  1303               	bcf	3,6	;RP1=0, select bank1
  4800  0CF5  0093               	movwf	19	;volatile
  4801  0CF6                     l4090:
  4802                           
  4803                           ;i2c_EEPROM.c: 13:   SSPSTAT = 0;
  4804  0CF6  0194               	clrf	20	;volatile
  4805  0CF7                     l4092:
  4806                           
  4807                           ;i2c_EEPROM.c: 14:   TRISC |= 3 ;
  4808  0CF7  3003               	movlw	3
  4809  0CF8  00FF               	movwf	btemp+1
  4810  0CF9  087F               	movf	btemp+1,w
  4811  0CFA  0487               	iorwf	7,f	;volatile
  4812  0CFB                     l4094:
  4813                           
  4814                           ;i2c_EEPROM.c: 15:   TRISC |= 4 ;
  4815  0CFB  1507               	bsf	7,2	;volatile
  4816  0CFC                     l243:
  4817  0CFC  0008               	return
  4818  0CFD                     __end_of_I2C_Master_Init:
  4819                           
  4820                           	psect	text19
  4821  0F98                     __ptext19:	
  4822 ;; *************** function ___lldiv *****************
  4823 ;; Defined at:
  4824 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\__lldiv.c"
  4825 ;; Parameters:    Size  Location     Type
  4826 ;;  divisor         4    4[BANK0 ] unsigned long 
  4827 ;;  dividend        4    8[BANK0 ] unsigned long 
  4828 ;; Auto vars:     Size  Location     Type
  4829 ;;  quotient        4   13[BANK0 ] unsigned long 
  4830 ;;  counter         1   17[BANK0 ] unsigned char 
  4831 ;; Return value:  Size  Location     Type
  4832 ;;                  4    4[BANK0 ] unsigned long 
  4833 ;; Registers used:
  4834 ;;		wreg, status,2, status,0, btemp+1
  4835 ;; Tracked objects:
  4836 ;;		On entry : 0/0
  4837 ;;		On exit  : 0/0
  4838 ;;		Unchanged: 0/0
  4839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4840 ;;      Params:         0       8       0       0       0
  4841 ;;      Locals:         0       5       0       0       0
  4842 ;;      Temps:          0       1       0       0       0
  4843 ;;      Totals:         0      14       0       0       0
  4844 ;;Total ram usage:       14 bytes
  4845 ;; Hardware stack levels used:    1
  4846 ;; Hardware stack levels required when called:    5
  4847 ;; This function calls:
  4848 ;;		Nothing
  4849 ;; This function is called by:
  4850 ;;		_I2C_Master_Init
  4851 ;; This function uses a non-reentrant model
  4852 ;;
  4853                           
  4854                           
  4855                           ;psect for function ___lldiv
  4856  0F98                     ___lldiv:
  4857  0F98                     l3728:	
  4858                           ;incstack = 0
  4859 ;; hardware stack exceeded
  4860                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  4861                           
  4862  0F98  3000               	movlw	0
  4863  0F99  1283               	bcf	3,5	;RP0=0, select bank0
  4864  0F9A  1303               	bcf	3,6	;RP1=0, select bank0
  4865  0F9B  00D6               	movwf	___lldiv@quotient+3
  4866  0F9C  3000               	movlw	0
  4867  0F9D  00D5               	movwf	___lldiv@quotient+2
  4868  0F9E  3000               	movlw	0
  4869  0F9F  00D4               	movwf	___lldiv@quotient+1
  4870  0FA0  3000               	movlw	0
  4871  0FA1  00D3               	movwf	___lldiv@quotient
  4872  0FA2  084D               	movf	___lldiv@divisor+3,w
  4873  0FA3  044C               	iorwf	___lldiv@divisor+2,w
  4874  0FA4  044B               	iorwf	___lldiv@divisor+1,w
  4875  0FA5  044A               	iorwf	___lldiv@divisor,w
  4876  0FA6  1903               	skipnz
  4877  0FA7  2FA9               	goto	u1201
  4878  0FA8  2FAA               	goto	u1200
  4879  0FA9                     u1201:
  4880  0FA9  2FF7               	goto	l3750
  4881  0FAA                     u1200:
  4882  0FAA                     l3730:
  4883  0FAA  01D7               	clrf	___lldiv@counter
  4884  0FAB  0AD7               	incf	___lldiv@counter,f
  4885  0FAC  2FBA               	goto	l3736
  4886  0FAD                     l3732:
  4887  0FAD  3001               	movlw	1
  4888  0FAE  00D2               	movwf	??___lldiv
  4889  0FAF                     u1215:
  4890  0FAF  1003               	clrc
  4891  0FB0  0DCA               	rlf	___lldiv@divisor,f
  4892  0FB1  0DCB               	rlf	___lldiv@divisor+1,f
  4893  0FB2  0DCC               	rlf	___lldiv@divisor+2,f
  4894  0FB3  0DCD               	rlf	___lldiv@divisor+3,f
  4895  0FB4  0BD2               	decfsz	??___lldiv,f
  4896  0FB5  2FAF               	goto	u1215
  4897  0FB6                     l3734:
  4898  0FB6  3001               	movlw	1
  4899  0FB7  00FF               	movwf	btemp+1
  4900  0FB8  087F               	movf	btemp+1,w
  4901  0FB9  07D7               	addwf	___lldiv@counter,f
  4902  0FBA                     l3736:
  4903  0FBA  1FCD               	btfss	___lldiv@divisor+3,7
  4904  0FBB  2FBD               	goto	u1221
  4905  0FBC  2FBE               	goto	u1220
  4906  0FBD                     u1221:
  4907  0FBD  2FAD               	goto	l3732
  4908  0FBE                     u1220:
  4909  0FBE                     l3738:
  4910  0FBE  3001               	movlw	1
  4911  0FBF  00D2               	movwf	??___lldiv
  4912  0FC0                     u1235:
  4913  0FC0  1003               	clrc
  4914  0FC1  0DD3               	rlf	___lldiv@quotient,f
  4915  0FC2  0DD4               	rlf	___lldiv@quotient+1,f
  4916  0FC3  0DD5               	rlf	___lldiv@quotient+2,f
  4917  0FC4  0DD6               	rlf	___lldiv@quotient+3,f
  4918  0FC5  0BD2               	decfsz	??___lldiv,f
  4919  0FC6  2FC0               	goto	u1235
  4920  0FC7                     l3740:
  4921  0FC7  084D               	movf	___lldiv@divisor+3,w
  4922  0FC8  0251               	subwf	___lldiv@dividend+3,w
  4923  0FC9  1D03               	skipz
  4924  0FCA  2FD5               	goto	u1245
  4925  0FCB  084C               	movf	___lldiv@divisor+2,w
  4926  0FCC  0250               	subwf	___lldiv@dividend+2,w
  4927  0FCD  1D03               	skipz
  4928  0FCE  2FD5               	goto	u1245
  4929  0FCF  084B               	movf	___lldiv@divisor+1,w
  4930  0FD0  024F               	subwf	___lldiv@dividend+1,w
  4931  0FD1  1D03               	skipz
  4932  0FD2  2FD5               	goto	u1245
  4933  0FD3  084A               	movf	___lldiv@divisor,w
  4934  0FD4  024E               	subwf	___lldiv@dividend,w
  4935  0FD5                     u1245:
  4936  0FD5  1C03               	skipc
  4937  0FD6  2FD8               	goto	u1241
  4938  0FD7  2FD9               	goto	u1240
  4939  0FD8                     u1241:
  4940  0FD8  2FE8               	goto	l3746
  4941  0FD9                     u1240:
  4942  0FD9                     l3742:
  4943  0FD9  084A               	movf	___lldiv@divisor,w
  4944  0FDA  02CE               	subwf	___lldiv@dividend,f
  4945  0FDB  084B               	movf	___lldiv@divisor+1,w
  4946  0FDC  1C03               	skipc
  4947  0FDD  0F4B               	incfsz	___lldiv@divisor+1,w
  4948  0FDE  02CF               	subwf	___lldiv@dividend+1,f
  4949  0FDF  084C               	movf	___lldiv@divisor+2,w
  4950  0FE0  1C03               	skipc
  4951  0FE1  0F4C               	incfsz	___lldiv@divisor+2,w
  4952  0FE2  02D0               	subwf	___lldiv@dividend+2,f
  4953  0FE3  084D               	movf	___lldiv@divisor+3,w
  4954  0FE4  1C03               	skipc
  4955  0FE5  0F4D               	incfsz	___lldiv@divisor+3,w
  4956  0FE6  02D1               	subwf	___lldiv@dividend+3,f
  4957  0FE7                     l3744:
  4958  0FE7  1453               	bsf	___lldiv@quotient,0
  4959  0FE8                     l3746:
  4960  0FE8  3001               	movlw	1
  4961  0FE9                     u1255:
  4962  0FE9  1003               	clrc
  4963  0FEA  0CCD               	rrf	___lldiv@divisor+3,f
  4964  0FEB  0CCC               	rrf	___lldiv@divisor+2,f
  4965  0FEC  0CCB               	rrf	___lldiv@divisor+1,f
  4966  0FED  0CCA               	rrf	___lldiv@divisor,f
  4967  0FEE  3EFF               	addlw	-1
  4968  0FEF  1D03               	skipz
  4969  0FF0  2FE9               	goto	u1255
  4970  0FF1                     l3748:
  4971  0FF1  3001               	movlw	1
  4972  0FF2  02D7               	subwf	___lldiv@counter,f
  4973  0FF3  1D03               	btfss	3,2
  4974  0FF4  2FF6               	goto	u1261
  4975  0FF5  2FF7               	goto	u1260
  4976  0FF6                     u1261:
  4977  0FF6  2FBE               	goto	l3738
  4978  0FF7                     u1260:
  4979  0FF7                     l3750:
  4980  0FF7  0856               	movf	___lldiv@quotient+3,w
  4981  0FF8  00CD               	movwf	?___lldiv+3
  4982  0FF9  0855               	movf	___lldiv@quotient+2,w
  4983  0FFA  00CC               	movwf	?___lldiv+2
  4984  0FFB  0854               	movf	___lldiv@quotient+1,w
  4985  0FFC  00CB               	movwf	?___lldiv+1
  4986  0FFD  0853               	movf	___lldiv@quotient,w
  4987  0FFE  00CA               	movwf	?___lldiv
  4988  0FFF                     l828:
  4989  0FFF  0008               	return
  4990  1000                     __end_of___lldiv:
  4991                           
  4992                           	psect	text20
  4993  0B00                     __ptext20:	
  4994 ;; *************** function _EEPROM_Write *****************
  4995 ;; Defined at:
  4996 ;;		line 72 in file "i2c_EEPROM.c"
  4997 ;; Parameters:    Size  Location     Type
  4998 ;;  add             2    5[BANK0 ] unsigned int 
  4999 ;;  data            1    7[BANK0 ] unsigned char 
  5000 ;; Auto vars:     Size  Location     Type
  5001 ;;		None
  5002 ;; Return value:  Size  Location     Type
  5003 ;;                  1    wreg      void 
  5004 ;; Registers used:
  5005 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5006 ;; Tracked objects:
  5007 ;;		On entry : 0/0
  5008 ;;		On exit  : 0/0
  5009 ;;		Unchanged: 0/0
  5010 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5011 ;;      Params:         0       3       0       0       0
  5012 ;;      Locals:         0       0       0       0       0
  5013 ;;      Temps:          0       0       0       0       0
  5014 ;;      Totals:         0       3       0       0       0
  5015 ;;Total ram usage:        3 bytes
  5016 ;; Hardware stack levels used:    1
  5017 ;; Hardware stack levels required when called:    7
  5018 ;; This function calls:
  5019 ;;		_I2C_Master_RepeatedStart
  5020 ;;		_I2C_Master_Start
  5021 ;;		_I2C_Master_Stop
  5022 ;;		_I2C_Master_Write
  5023 ;; This function is called by:
  5024 ;;		_Task2
  5025 ;; This function uses a non-reentrant model
  5026 ;;
  5027                           
  5028                           
  5029                           ;psect for function _EEPROM_Write
  5030  0B00                     _EEPROM_Write:
  5031  0B00                     l4096:	
  5032                           ;incstack = 0
  5033 ;; hardware stack exceeded
  5034                           ; Regs used in _EEPROM_Write: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5035                           
  5036                           
  5037                           ;i2c_EEPROM.c: 72: void EEPROM_Write(unsigned int add, unsigned char data);i2c_EEPROM.c:
      +                           73: {;i2c_EEPROM.c: 74:   I2C_Master_Start();
  5038  0B00  120A  158A  218D  120A  158A  	fcall	_I2C_Master_Start
  5039                           
  5040                           ;i2c_EEPROM.c: 76:   while(I2C_Master_Write(0xA0))
  5041  0B05  2B0B               	goto	l4100
  5042  0B06                     l4098:
  5043                           
  5044                           ;i2c_EEPROM.c: 77:     I2C_Master_RepeatedStart();
  5045  0B06  120A  158A  217F  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5046  0B0B                     l4100:
  5047                           
  5048                           ;i2c_EEPROM.c: 76:   while(I2C_Master_Write(0xA0))
  5049  0B0B  30A0               	movlw	160
  5050  0B0C  120A  158A  21FC  120A  158A  	fcall	_I2C_Master_Write
  5051  0B11  3A00               	xorlw	0
  5052  0B12  1D03               	skipz
  5053  0B13  2B15               	goto	u1621
  5054  0B14  2B16               	goto	u1620
  5055  0B15                     u1621:
  5056  0B15  2B06               	goto	l4098
  5057  0B16                     u1620:
  5058  0B16                     l4102:
  5059                           
  5060                           ;i2c_EEPROM.c: 78:   I2C_Master_Write(add>>8);
  5061  0B16  1283               	bcf	3,5	;RP0=0, select bank0
  5062  0B17  1303               	bcf	3,6	;RP1=0, select bank0
  5063  0B18  084C               	movf	EEPROM_Write@add+1,w
  5064  0B19  120A  158A  21FC  120A  158A  	fcall	_I2C_Master_Write
  5065                           
  5066                           ;i2c_EEPROM.c: 79:   I2C_Master_Write((unsigned char)add);
  5067  0B1E  1283               	bcf	3,5	;RP0=0, select bank0
  5068  0B1F  1303               	bcf	3,6	;RP1=0, select bank0
  5069  0B20  084B               	movf	EEPROM_Write@add,w
  5070  0B21  120A  158A  21FC  120A  158A  	fcall	_I2C_Master_Write
  5071                           
  5072                           ;i2c_EEPROM.c: 80:   I2C_Master_Write(data);
  5073  0B26  1283               	bcf	3,5	;RP0=0, select bank0
  5074  0B27  1303               	bcf	3,6	;RP1=0, select bank0
  5075  0B28  084D               	movf	EEPROM_Write@data,w
  5076  0B29  120A  158A  21FC  120A  158A  	fcall	_I2C_Master_Write
  5077  0B2E                     l4104:
  5078                           
  5079                           ;i2c_EEPROM.c: 81:   I2C_Master_Stop();
  5080  0B2E  120A  158A  219B  120A  158A  	fcall	_I2C_Master_Stop
  5081  0B33                     l282:
  5082  0B33  0008               	return
  5083  0B34                     __end_of_EEPROM_Write:
  5084                           
  5085                           	psect	text21
  5086  07B7                     __ptext21:	
  5087 ;; *************** function _EEPROM_Read *****************
  5088 ;; Defined at:
  5089 ;;		line 99 in file "i2c_EEPROM.c"
  5090 ;; Parameters:    Size  Location     Type
  5091 ;;  add             2    5[BANK0 ] unsigned int 
  5092 ;; Auto vars:     Size  Location     Type
  5093 ;;  Data            1    7[BANK0 ] unsigned char 
  5094 ;; Return value:  Size  Location     Type
  5095 ;;                  1    wreg      unsigned char 
  5096 ;; Registers used:
  5097 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5098 ;; Tracked objects:
  5099 ;;		On entry : 0/0
  5100 ;;		On exit  : 0/0
  5101 ;;		Unchanged: 0/0
  5102 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5103 ;;      Params:         0       2       0       0       0
  5104 ;;      Locals:         0       1       0       0       0
  5105 ;;      Temps:          0       0       0       0       0
  5106 ;;      Totals:         0       3       0       0       0
  5107 ;;Total ram usage:        3 bytes
  5108 ;; Hardware stack levels used:    1
  5109 ;; Hardware stack levels required when called:    7
  5110 ;; This function calls:
  5111 ;;		_I2C_Master_RepeatedStart
  5112 ;;		_I2C_Master_Start
  5113 ;;		_I2C_Master_Stop
  5114 ;;		_I2C_Master_Write
  5115 ;;		_I2C_NACK
  5116 ;;		_I2C_Read_Byte
  5117 ;; This function is called by:
  5118 ;;		_Task2
  5119 ;; This function uses a non-reentrant model
  5120 ;;
  5121                           
  5122                           
  5123                           ;psect for function _EEPROM_Read
  5124  07B7                     _EEPROM_Read:
  5125  07B7                     l4106:	
  5126                           ;incstack = 0
  5127 ;; hardware stack exceeded
  5128                           ; Regs used in _EEPROM_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5129                           
  5130                           
  5131                           ;i2c_EEPROM.c: 99: unsigned char EEPROM_Read(unsigned int add);i2c_EEPROM.c: 100: {;i2c_
      +                          EEPROM.c: 101:   unsigned char Data;;i2c_EEPROM.c: 102:   I2C_Master_Start();
  5132  07B7  120A  158A  218D  120A  118A  	fcall	_I2C_Master_Start
  5133                           
  5134                           ;i2c_EEPROM.c: 104:   while(I2C_Master_Write(0xA0))
  5135  07BC  2FC2               	goto	l4110
  5136  07BD                     l4108:
  5137                           
  5138                           ;i2c_EEPROM.c: 105:     I2C_Master_RepeatedStart();
  5139  07BD  120A  158A  217F  120A  118A  	fcall	_I2C_Master_RepeatedStart
  5140  07C2                     l4110:
  5141                           
  5142                           ;i2c_EEPROM.c: 104:   while(I2C_Master_Write(0xA0))
  5143  07C2  30A0               	movlw	160
  5144  07C3  120A  158A  21FC  120A  118A  	fcall	_I2C_Master_Write
  5145  07C8  3A00               	xorlw	0
  5146  07C9  1D03               	skipz
  5147  07CA  2FCC               	goto	u1631
  5148  07CB  2FCD               	goto	u1630
  5149  07CC                     u1631:
  5150  07CC  2FBD               	goto	l4108
  5151  07CD                     u1630:
  5152  07CD                     l4112:
  5153                           
  5154                           ;i2c_EEPROM.c: 106:   I2C_Master_Write(add>>8);
  5155  07CD  1283               	bcf	3,5	;RP0=0, select bank0
  5156  07CE  1303               	bcf	3,6	;RP1=0, select bank0
  5157  07CF  084C               	movf	EEPROM_Read@add+1,w
  5158  07D0  120A  158A  21FC  120A  118A  	fcall	_I2C_Master_Write
  5159                           
  5160                           ;i2c_EEPROM.c: 107:   I2C_Master_Write((unsigned char)add);
  5161  07D5  1283               	bcf	3,5	;RP0=0, select bank0
  5162  07D6  1303               	bcf	3,6	;RP1=0, select bank0
  5163  07D7  084B               	movf	EEPROM_Read@add,w
  5164  07D8  120A  158A  21FC  120A  118A  	fcall	_I2C_Master_Write
  5165  07DD                     l4114:
  5166                           
  5167                           ;i2c_EEPROM.c: 108:   I2C_Master_RepeatedStart();
  5168  07DD  120A  158A  217F  120A  118A  	fcall	_I2C_Master_RepeatedStart
  5169  07E2                     l4116:
  5170                           
  5171                           ;i2c_EEPROM.c: 109:   I2C_Master_Write(0xA1);
  5172  07E2  30A1               	movlw	161
  5173  07E3  120A  158A  21FC  120A  118A  	fcall	_I2C_Master_Write
  5174                           
  5175                           ;i2c_EEPROM.c: 110:   Data = I2C_Read_Byte();
  5176  07E8  120A  158A  2213  120A  118A  	fcall	_I2C_Read_Byte
  5177  07ED  00FF               	movwf	btemp+1
  5178  07EE  087F               	movf	btemp+1,w
  5179  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  5180  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  5181  07F1  00CD               	movwf	EEPROM_Read@Data
  5182  07F2                     l4118:
  5183                           
  5184                           ;i2c_EEPROM.c: 111:   I2C_NACK();
  5185  07F2  120A  158A  2166  120A  118A  	fcall	_I2C_NACK
  5186  07F7                     l4120:
  5187                           
  5188                           ;i2c_EEPROM.c: 112:   I2C_Master_Stop();
  5189  07F7  120A  158A  219B  120A  118A  	fcall	_I2C_Master_Stop
  5190  07FC                     l4122:
  5191                           
  5192                           ;i2c_EEPROM.c: 113:   return Data;
  5193  07FC  1283               	bcf	3,5	;RP0=0, select bank0
  5194  07FD  1303               	bcf	3,6	;RP1=0, select bank0
  5195  07FE  084D               	movf	EEPROM_Read@Data,w
  5196  07FF                     l297:
  5197  07FF  0008               	return
  5198  0800                     __end_of_EEPROM_Read:
  5199                           
  5200                           	psect	text22
  5201  0A13                     __ptext22:	
  5202 ;; *************** function _I2C_Read_Byte *****************
  5203 ;; Defined at:
  5204 ;;		line 45 in file "i2c_EEPROM.c"
  5205 ;; Parameters:    Size  Location     Type
  5206 ;;		None
  5207 ;; Auto vars:     Size  Location     Type
  5208 ;;		None
  5209 ;; Return value:  Size  Location     Type
  5210 ;;                  1    wreg      unsigned char 
  5211 ;; Registers used:
  5212 ;;		wreg, status,2, status,0, pclath, cstack
  5213 ;; Tracked objects:
  5214 ;;		On entry : 0/0
  5215 ;;		On exit  : 0/0
  5216 ;;		Unchanged: 0/0
  5217 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5218 ;;      Params:         0       0       0       0       0
  5219 ;;      Locals:         0       0       0       0       0
  5220 ;;      Temps:          0       0       0       0       0
  5221 ;;      Totals:         0       0       0       0       0
  5222 ;;Total ram usage:        0 bytes
  5223 ;; Hardware stack levels used:    1
  5224 ;; Hardware stack levels required when called:    6
  5225 ;; This function calls:
  5226 ;;		_I2C_Master_Wait
  5227 ;; This function is called by:
  5228 ;;		_EEPROM_Read
  5229 ;;		_EEPROM_Read_Page
  5230 ;; This function uses a non-reentrant model
  5231 ;;
  5232                           
  5233                           
  5234                           ;psect for function _I2C_Read_Byte
  5235  0A13                     _I2C_Read_Byte:
  5236  0A13                     l3712:	
  5237                           ;incstack = 0
  5238 ;; hardware stack exceeded
  5239                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
  5240                           
  5241                           
  5242                           ;i2c_EEPROM.c: 48:   I2C_Master_Wait();
  5243  0A13  120A  158A  2172  120A  158A  	fcall	_I2C_Master_Wait
  5244  0A18                     l3714:
  5245                           
  5246                           ;i2c_EEPROM.c: 49:   RCEN = 1;
  5247  0A18  1683               	bsf	3,5	;RP0=1, select bank1
  5248  0A19  1303               	bcf	3,6	;RP1=0, select bank1
  5249  0A1A  1591               	bsf	17,3	;volatile
  5250  0A1B                     l267:	
  5251                           ;i2c_EEPROM.c: 50:   while(!SSPIF);
  5252                           
  5253  0A1B  1283               	bcf	3,5	;RP0=0, select bank0
  5254  0A1C  1D8C               	btfss	12,3	;volatile
  5255  0A1D  2A1F               	goto	u1191
  5256  0A1E  2A20               	goto	u1190
  5257  0A1F                     u1191:
  5258  0A1F  2A1B               	goto	l267
  5259  0A20                     u1190:
  5260  0A20                     l269:
  5261                           
  5262                           ;i2c_EEPROM.c: 51:   SSPIF = 0;
  5263  0A20  118C               	bcf	12,3	;volatile
  5264  0A21                     l3716:
  5265                           
  5266                           ;i2c_EEPROM.c: 52:   I2C_Master_Wait();
  5267  0A21  120A  158A  2172  120A  158A  	fcall	_I2C_Master_Wait
  5268  0A26                     l3718:
  5269                           
  5270                           ;i2c_EEPROM.c: 53:   return SSPBUF;
  5271  0A26  1283               	bcf	3,5	;RP0=0, select bank0
  5272  0A27  1303               	bcf	3,6	;RP1=0, select bank0
  5273  0A28  0813               	movf	19,w	;volatile
  5274  0A29                     l270:
  5275  0A29  0008               	return
  5276  0A2A                     __end_of_I2C_Read_Byte:
  5277                           
  5278                           	psect	text23
  5279  0966                     __ptext23:	
  5280 ;; *************** function _I2C_NACK *****************
  5281 ;; Defined at:
  5282 ;;		line 61 in file "i2c_EEPROM.c"
  5283 ;; Parameters:    Size  Location     Type
  5284 ;;		None
  5285 ;; Auto vars:     Size  Location     Type
  5286 ;;		None
  5287 ;; Return value:  Size  Location     Type
  5288 ;;                  1    wreg      void 
  5289 ;; Registers used:
  5290 ;;		wreg, status,2, status,0, pclath, cstack
  5291 ;; Tracked objects:
  5292 ;;		On entry : 0/0
  5293 ;;		On exit  : 0/0
  5294 ;;		Unchanged: 0/0
  5295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5296 ;;      Params:         0       0       0       0       0
  5297 ;;      Locals:         0       0       0       0       0
  5298 ;;      Temps:          0       0       0       0       0
  5299 ;;      Totals:         0       0       0       0       0
  5300 ;;Total ram usage:        0 bytes
  5301 ;; Hardware stack levels used:    1
  5302 ;; Hardware stack levels required when called:    6
  5303 ;; This function calls:
  5304 ;;		_I2C_Master_Wait
  5305 ;; This function is called by:
  5306 ;;		_EEPROM_Read
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309                           
  5310                           
  5311                           ;psect for function _I2C_NACK
  5312  0966                     _I2C_NACK:
  5313  0966                     l3722:	
  5314                           ;incstack = 0
  5315 ;; hardware stack exceeded
  5316                           ; Regs used in _I2C_NACK: [wreg+status,2+status,0+pclath+cstack]
  5317                           
  5318                           
  5319                           ;i2c_EEPROM.c: 63:   ACKDT = 1;
  5320  0966  1683               	bsf	3,5	;RP0=1, select bank1
  5321  0967  1303               	bcf	3,6	;RP1=0, select bank1
  5322  0968  1691               	bsf	17,5	;volatile
  5323  0969                     l3724:
  5324                           
  5325                           ;i2c_EEPROM.c: 64:   I2C_Master_Wait();
  5326  0969  120A  158A  2172  120A  158A  	fcall	_I2C_Master_Wait
  5327  096E                     l3726:
  5328                           
  5329                           ;i2c_EEPROM.c: 65:   ACKEN = 1;
  5330  096E  1683               	bsf	3,5	;RP0=1, select bank1
  5331  096F  1303               	bcf	3,6	;RP1=0, select bank1
  5332  0970  1611               	bsf	17,4	;volatile
  5333  0971                     l276:
  5334  0971  0008               	return
  5335  0972                     __end_of_I2C_NACK:
  5336                           
  5337                           	psect	text24
  5338  09FC                     __ptext24:	
  5339 ;; *************** function _I2C_Master_Write *****************
  5340 ;; Defined at:
  5341 ;;		line 37 in file "i2c_EEPROM.c"
  5342 ;; Parameters:    Size  Location     Type
  5343 ;;  data            1    wreg     unsigned char 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  data            1    4[BANK0 ] unsigned char 
  5346 ;; Return value:  Size  Location     Type
  5347 ;;                  1    wreg      unsigned char 
  5348 ;; Registers used:
  5349 ;;		wreg, status,2, status,0, pclath, cstack
  5350 ;; Tracked objects:
  5351 ;;		On entry : 0/0
  5352 ;;		On exit  : 0/0
  5353 ;;		Unchanged: 0/0
  5354 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5355 ;;      Params:         0       0       0       0       0
  5356 ;;      Locals:         0       1       0       0       0
  5357 ;;      Temps:          0       0       0       0       0
  5358 ;;      Totals:         0       1       0       0       0
  5359 ;;Total ram usage:        1 bytes
  5360 ;; Hardware stack levels used:    1
  5361 ;; Hardware stack levels required when called:    6
  5362 ;; This function calls:
  5363 ;;		_I2C_Master_Wait
  5364 ;; This function is called by:
  5365 ;;		_EEPROM_Write
  5366 ;;		_EEPROM_Read
  5367 ;;		_EEPROM_Write_Page
  5368 ;;		_EEPROM_Read_Page
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           
  5373                           ;psect for function _I2C_Master_Write
  5374  09FC                     _I2C_Master_Write:
  5375                           
  5376                           ;incstack = 0
  5377 ;; hardware stack exceeded
  5378                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  5379                           ;I2C_Master_Write@data stored from wreg
  5380  09FC  1283               	bcf	3,5	;RP0=0, select bank0
  5381  09FD  1303               	bcf	3,6	;RP1=0, select bank0
  5382  09FE  00CA               	movwf	I2C_Master_Write@data
  5383  09FF                     l3704:
  5384                           
  5385                           ;i2c_EEPROM.c: 37: unsigned char I2C_Master_Write(unsigned char data);i2c_EEPROM.c: 38: 
      +                          {;i2c_EEPROM.c: 39:   I2C_Master_Wait();
  5386  09FF  120A  158A  2172  120A  158A  	fcall	_I2C_Master_Wait
  5387  0A04                     l3706:
  5388                           
  5389                           ;i2c_EEPROM.c: 40:   SSPBUF = data;
  5390  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  5391  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  5392  0A06  084A               	movf	I2C_Master_Write@data,w
  5393  0A07  0093               	movwf	19	;volatile
  5394  0A08                     l261:	
  5395                           ;i2c_EEPROM.c: 41:   while(!SSPIF);
  5396                           
  5397  0A08  1D8C               	btfss	12,3	;volatile
  5398  0A09  2A0B               	goto	u1181
  5399  0A0A  2A0C               	goto	u1180
  5400  0A0B                     u1181:
  5401  0A0B  2A08               	goto	l261
  5402  0A0C                     u1180:
  5403  0A0C                     l263:
  5404                           
  5405                           ;i2c_EEPROM.c: 42:   SSPIF = 0;
  5406  0A0C  118C               	bcf	12,3	;volatile
  5407  0A0D                     l3708:
  5408                           
  5409                           ;i2c_EEPROM.c: 43:   return ACKSTAT;
  5410  0A0D  3000               	movlw	0
  5411  0A0E  1683               	bsf	3,5	;RP0=1, select bank1
  5412  0A0F  1303               	bcf	3,6	;RP1=0, select bank1
  5413  0A10  1B11               	btfsc	17,6	;volatile
  5414  0A11  3001               	movlw	1
  5415  0A12                     l264:
  5416  0A12  0008               	return
  5417  0A13                     __end_of_I2C_Master_Write:
  5418                           
  5419                           	psect	text25
  5420  099B                     __ptext25:	
  5421 ;; *************** function _I2C_Master_Stop *****************
  5422 ;; Defined at:
  5423 ;;		line 31 in file "i2c_EEPROM.c"
  5424 ;; Parameters:    Size  Location     Type
  5425 ;;		None
  5426 ;; Auto vars:     Size  Location     Type
  5427 ;;		None
  5428 ;; Return value:  Size  Location     Type
  5429 ;;                  1    wreg      void 
  5430 ;; Registers used:
  5431 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5432 ;; Tracked objects:
  5433 ;;		On entry : 0/0
  5434 ;;		On exit  : 0/0
  5435 ;;		Unchanged: 0/0
  5436 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5437 ;;      Params:         0       0       0       0       0
  5438 ;;      Locals:         0       0       0       0       0
  5439 ;;      Temps:          0       0       0       0       0
  5440 ;;      Totals:         0       0       0       0       0
  5441 ;;Total ram usage:        0 bytes
  5442 ;; Hardware stack levels used:    1
  5443 ;; Hardware stack levels required when called:    6
  5444 ;; This function calls:
  5445 ;;		_I2C_Master_Wait
  5446 ;; This function is called by:
  5447 ;;		_EEPROM_Write
  5448 ;;		_EEPROM_Read
  5449 ;;		_EEPROM_Write_Page
  5450 ;;		_EEPROM_Read_Page
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453                           
  5454                           
  5455                           ;psect for function _I2C_Master_Stop
  5456  099B                     _I2C_Master_Stop:
  5457  099B                     l3700:	
  5458                           ;incstack = 0
  5459 ;; hardware stack exceeded
  5460                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5461                           
  5462                           
  5463                           ;i2c_EEPROM.c: 33:   I2C_Master_Wait();
  5464  099B  120A  158A  2172  120A  158A  	fcall	_I2C_Master_Wait
  5465  09A0                     l3702:
  5466                           
  5467                           ;i2c_EEPROM.c: 34:   SSPCON2|=PEN ;
  5468  09A0  3000               	movlw	0
  5469  09A1  1683               	bsf	3,5	;RP0=1, select bank1
  5470  09A2  1303               	bcf	3,6	;RP1=0, select bank1
  5471  09A3  1911               	btfsc	17,2	;volatile
  5472  09A4  3001               	movlw	1
  5473  09A5  00FF               	movwf	btemp+1
  5474  09A6  087F               	movf	btemp+1,w
  5475  09A7  0491               	iorwf	17,f	;volatile
  5476  09A8                     l258:
  5477  09A8  0008               	return
  5478  09A9                     __end_of_I2C_Master_Stop:
  5479                           
  5480                           	psect	text26
  5481  098D                     __ptext26:	
  5482 ;; *************** function _I2C_Master_Start *****************
  5483 ;; Defined at:
  5484 ;;		line 21 in file "i2c_EEPROM.c"
  5485 ;; Parameters:    Size  Location     Type
  5486 ;;		None
  5487 ;; Auto vars:     Size  Location     Type
  5488 ;;		None
  5489 ;; Return value:  Size  Location     Type
  5490 ;;                  1    wreg      void 
  5491 ;; Registers used:
  5492 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5493 ;; Tracked objects:
  5494 ;;		On entry : 0/0
  5495 ;;		On exit  : 0/0
  5496 ;;		Unchanged: 0/0
  5497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5498 ;;      Params:         0       0       0       0       0
  5499 ;;      Locals:         0       0       0       0       0
  5500 ;;      Temps:          0       0       0       0       0
  5501 ;;      Totals:         0       0       0       0       0
  5502 ;;Total ram usage:        0 bytes
  5503 ;; Hardware stack levels used:    1
  5504 ;; Hardware stack levels required when called:    6
  5505 ;; This function calls:
  5506 ;;		_I2C_Master_Wait
  5507 ;; This function is called by:
  5508 ;;		_EEPROM_Write
  5509 ;;		_EEPROM_Read
  5510 ;;		_EEPROM_Write_Page
  5511 ;;		_EEPROM_Read_Page
  5512 ;; This function uses a non-reentrant model
  5513 ;;
  5514                           
  5515                           
  5516                           ;psect for function _I2C_Master_Start
  5517  098D                     _I2C_Master_Start:
  5518  098D                     l3692:	
  5519                           ;incstack = 0
  5520 ;; hardware stack exceeded
  5521                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5522                           
  5523                           
  5524                           ;i2c_EEPROM.c: 23:   I2C_Master_Wait();
  5525  098D  120A  158A  2172  120A  158A  	fcall	_I2C_Master_Wait
  5526  0992                     l3694:
  5527                           
  5528                           ;i2c_EEPROM.c: 24:   SSPCON2|=SEN ;
  5529  0992  3000               	movlw	0
  5530  0993  1683               	bsf	3,5	;RP0=1, select bank1
  5531  0994  1303               	bcf	3,6	;RP1=0, select bank1
  5532  0995  1811               	btfsc	17,0	;volatile
  5533  0996  3001               	movlw	1
  5534  0997  00FF               	movwf	btemp+1
  5535  0998  087F               	movf	btemp+1,w
  5536  0999  0491               	iorwf	17,f	;volatile
  5537  099A                     l252:
  5538  099A  0008               	return
  5539  099B                     __end_of_I2C_Master_Start:
  5540                           
  5541                           	psect	text27
  5542  097F                     __ptext27:	
  5543 ;; *************** function _I2C_Master_RepeatedStart *****************
  5544 ;; Defined at:
  5545 ;;		line 26 in file "i2c_EEPROM.c"
  5546 ;; Parameters:    Size  Location     Type
  5547 ;;		None
  5548 ;; Auto vars:     Size  Location     Type
  5549 ;;		None
  5550 ;; Return value:  Size  Location     Type
  5551 ;;                  1    wreg      void 
  5552 ;; Registers used:
  5553 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5554 ;; Tracked objects:
  5555 ;;		On entry : 0/0
  5556 ;;		On exit  : 0/0
  5557 ;;		Unchanged: 0/0
  5558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5559 ;;      Params:         0       0       0       0       0
  5560 ;;      Locals:         0       0       0       0       0
  5561 ;;      Temps:          0       0       0       0       0
  5562 ;;      Totals:         0       0       0       0       0
  5563 ;;Total ram usage:        0 bytes
  5564 ;; Hardware stack levels used:    1
  5565 ;; Hardware stack levels required when called:    6
  5566 ;; This function calls:
  5567 ;;		_I2C_Master_Wait
  5568 ;; This function is called by:
  5569 ;;		_EEPROM_Write
  5570 ;;		_EEPROM_Read
  5571 ;;		_EEPROM_Write_Page
  5572 ;;		_EEPROM_Read_Page
  5573 ;; This function uses a non-reentrant model
  5574 ;;
  5575                           
  5576                           
  5577                           ;psect for function _I2C_Master_RepeatedStart
  5578  097F                     _I2C_Master_RepeatedStart:
  5579  097F                     l3696:	
  5580                           ;incstack = 0
  5581 ;; hardware stack exceeded
  5582                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5583                           
  5584                           
  5585                           ;i2c_EEPROM.c: 28:   I2C_Master_Wait();
  5586  097F  120A  158A  2172  120A  158A  	fcall	_I2C_Master_Wait
  5587  0984                     l3698:
  5588                           
  5589                           ;i2c_EEPROM.c: 29:   SSPCON2 |=RSEN ;
  5590  0984  3000               	movlw	0
  5591  0985  1683               	bsf	3,5	;RP0=1, select bank1
  5592  0986  1303               	bcf	3,6	;RP1=0, select bank1
  5593  0987  1891               	btfsc	17,1	;volatile
  5594  0988  3001               	movlw	1
  5595  0989  00FF               	movwf	btemp+1
  5596  098A  087F               	movf	btemp+1,w
  5597  098B  0491               	iorwf	17,f	;volatile
  5598  098C                     l255:
  5599  098C  0008               	return
  5600  098D                     __end_of_I2C_Master_RepeatedStart:
  5601                           
  5602                           	psect	text28
  5603  0972                     __ptext28:	
  5604 ;; *************** function _I2C_Master_Wait *****************
  5605 ;; Defined at:
  5606 ;;		line 17 in file "i2c_EEPROM.c"
  5607 ;; Parameters:    Size  Location     Type
  5608 ;;		None
  5609 ;; Auto vars:     Size  Location     Type
  5610 ;;		None
  5611 ;; Return value:  Size  Location     Type
  5612 ;;                  1    wreg      void 
  5613 ;; Registers used:
  5614 ;;		wreg, status,2
  5615 ;; Tracked objects:
  5616 ;;		On entry : 0/0
  5617 ;;		On exit  : 0/0
  5618 ;;		Unchanged: 0/0
  5619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5620 ;;      Params:         0       0       0       0       0
  5621 ;;      Locals:         0       0       0       0       0
  5622 ;;      Temps:          0       0       0       0       0
  5623 ;;      Totals:         0       0       0       0       0
  5624 ;;Total ram usage:        0 bytes
  5625 ;; Hardware stack levels used:    1
  5626 ;; Hardware stack levels required when called:    5
  5627 ;; This function calls:
  5628 ;;		Nothing
  5629 ;; This function is called by:
  5630 ;;		_I2C_Master_Start
  5631 ;;		_I2C_Master_RepeatedStart
  5632 ;;		_I2C_Master_Stop
  5633 ;;		_I2C_Master_Write
  5634 ;;		_I2C_Read_Byte
  5635 ;;		_I2C_NACK
  5636 ;;		_I2C_ACK
  5637 ;; This function uses a non-reentrant model
  5638 ;;
  5639                           
  5640                           
  5641                           ;psect for function _I2C_Master_Wait
  5642  0972                     _I2C_Master_Wait:
  5643  0972                     l3392:	
  5644                           ;incstack = 0
  5645 ;; hardware stack exceeded
  5646                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  5647                           
  5648  0972                     l246:	
  5649                           ;i2c_EEPROM.c: 19:   while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  5650                           
  5651  0972  1683               	bsf	3,5	;RP0=1, select bank1
  5652  0973  1303               	bcf	3,6	;RP1=0, select bank1
  5653  0974  1914               	btfsc	20,2	;volatile
  5654  0975  2977               	goto	u1061
  5655  0976  2978               	goto	u1060
  5656  0977                     u1061:
  5657  0977  2972               	goto	l246
  5658  0978                     u1060:
  5659  0978                     l3394:
  5660  0978  0811               	movf	17,w	;volatile
  5661  0979  391F               	andlw	31
  5662  097A  1D03               	btfss	3,2
  5663  097B  297D               	goto	u1071
  5664  097C  297E               	goto	u1070
  5665  097D                     u1071:
  5666  097D  2972               	goto	l246
  5667  097E                     u1070:
  5668  097E                     l249:
  5669  097E  0008               	return
  5670  097F                     __end_of_I2C_Master_Wait:
  5671                           
  5672                           	psect	text29
  5673  0C0E                     __ptext29:	
  5674 ;; *************** function _ADC_READ *****************
  5675 ;; Defined at:
  5676 ;;		line 39 in file "ADC.c"
  5677 ;; Parameters:    Size  Location     Type
  5678 ;;		None
  5679 ;; Auto vars:     Size  Location     Type
  5680 ;;		None
  5681 ;; Return value:  Size  Location     Type
  5682 ;;                  2   14[BANK0 ] unsigned int 
  5683 ;; Registers used:
  5684 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5685 ;; Tracked objects:
  5686 ;;		On entry : 0/0
  5687 ;;		On exit  : 0/0
  5688 ;;		Unchanged: 0/0
  5689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5690 ;;      Params:         0       2       0       0       0
  5691 ;;      Locals:         0       0       0       0       0
  5692 ;;      Temps:          0       1       0       0       0
  5693 ;;      Totals:         0       3       0       0       0
  5694 ;;Total ram usage:        3 bytes
  5695 ;; Hardware stack levels used:    1
  5696 ;; Hardware stack levels required when called:    6
  5697 ;; This function calls:
  5698 ;;		_SwDelay_ms
  5699 ;;		_SwDelay_us
  5700 ;; This function is called by:
  5701 ;;		_Task2
  5702 ;; This function uses a non-reentrant model
  5703 ;;
  5704                           
  5705                           
  5706                           ;psect for function _ADC_READ
  5707  0C0E                     _ADC_READ:
  5708  0C0E                     l3968:	
  5709                           ;incstack = 0
  5710 ;; hardware stack exceeded
  5711                           ; Regs used in _ADC_READ: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5712                           
  5713                           
  5714                           ;ADC.c: 41: SwDelay_ms(2);
  5715  0C0E  3000               	movlw	0
  5716  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  5717  0C10  1303               	bcf	3,6	;RP1=0, select bank0
  5718  0C11  00CD               	movwf	SwDelay_ms@n+3
  5719  0C12  3000               	movlw	0
  5720  0C13  00CC               	movwf	SwDelay_ms@n+2
  5721  0C14  3000               	movlw	0
  5722  0C15  00CB               	movwf	SwDelay_ms@n+1
  5723  0C16  3002               	movlw	2
  5724  0C17  00CA               	movwf	SwDelay_ms@n
  5725  0C18  120A  158A  253D  120A  158A  	fcall	_SwDelay_ms
  5726  0C1D                     l3970:
  5727                           
  5728                           ;ADC.c: 43:     *((reg_type8_t)(0x001F)) &= 0b11000101;
  5729  0C1D  30C5               	movlw	197
  5730  0C1E  00FF               	movwf	btemp+1
  5731  0C1F  087F               	movf	btemp+1,w
  5732  0C20  1283               	bcf	3,5	;RP0=0, select bank0
  5733  0C21  1303               	bcf	3,6	;RP1=0, select bank0
  5734  0C22  059F               	andwf	31,f	;volatile
  5735  0C23                     l3972:
  5736                           
  5737                           ;ADC.c: 44:     *((reg_type8_t)(0x001F)) |= 0x00;
  5738  0C23  081F               	movf	31,w	;volatile
  5739  0C24                     l3974:
  5740                           
  5741                           ;ADC.c: 46: SwDelay_us(30);
  5742  0C24  3000               	movlw	0
  5743  0C25  00CD               	movwf	SwDelay_us@n+3
  5744  0C26  3000               	movlw	0
  5745  0C27  00CC               	movwf	SwDelay_us@n+2
  5746  0C28  3000               	movlw	0
  5747  0C29  00CB               	movwf	SwDelay_us@n+1
  5748  0C2A  301E               	movlw	30
  5749  0C2B  00CA               	movwf	SwDelay_us@n
  5750  0C2C  120A  158A  2241  120A  158A  	fcall	_SwDelay_us
  5751  0C31                     l3976:
  5752                           
  5753                           ;ADC.c: 47: *((reg_type8_t)(0x001F)) |=0x04 ;
  5754  0C31  1283               	bcf	3,5	;RP0=0, select bank0
  5755  0C32  1303               	bcf	3,6	;RP1=0, select bank0
  5756  0C33  151F               	bsf	31,2	;volatile
  5757  0C34                     l3978:	
  5758                           ;ADC.c: 48:     while(( (*((reg_type8_t)(0x001F)) >> 0x04) & 1 ));
  5759                           
  5760  0C34  081F               	movf	31,w	;volatile
  5761  0C35  00D6               	movwf	??_ADC_READ
  5762  0C36  3004               	movlw	4
  5763  0C37                     u1505:
  5764  0C37  1003               	clrc
  5765  0C38  0CD6               	rrf	??_ADC_READ,f
  5766  0C39  3EFF               	addlw	-1
  5767  0C3A  1D03               	skipz
  5768  0C3B  2C37               	goto	u1505
  5769  0C3C  1856               	btfsc	??_ADC_READ,0
  5770  0C3D  2C3F               	goto	u1511
  5771  0C3E  2C40               	goto	u1510
  5772  0C3F                     u1511:
  5773  0C3F  2C34               	goto	l3978
  5774  0C40                     u1510:
  5775  0C40                     l3980:
  5776                           
  5777                           ;ADC.c: 50: return ((*((reg_type8_t)(0x001E)) << 8) + *((reg_type8_t)(0x009E)));
  5778  0C40  081E               	movf	30,w	;volatile
  5779  0C41  00D5               	movwf	?_ADC_READ+1
  5780  0C42  1683               	bsf	3,5	;RP0=1, select bank1
  5781  0C43  1303               	bcf	3,6	;RP1=0, select bank1
  5782  0C44  081E               	movf	30,w	;volatile
  5783  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  5784  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  5785  0C47  00D4               	movwf	?_ADC_READ
  5786  0C48                     l33:
  5787  0C48  0008               	return
  5788  0C49                     __end_of_ADC_READ:
  5789                           
  5790                           	psect	text30
  5791  0A41                     __ptext30:	
  5792 ;; *************** function _SwDelay_us *****************
  5793 ;; Defined at:
  5794 ;;		line 37 in file "software_delay.c"
  5795 ;; Parameters:    Size  Location     Type
  5796 ;;  n               4    4[BANK0 ] unsigned long 
  5797 ;; Auto vars:     Size  Location     Type
  5798 ;;		None
  5799 ;; Return value:  Size  Location     Type
  5800 ;;                  1    wreg      void 
  5801 ;; Registers used:
  5802 ;;		wreg
  5803 ;; Tracked objects:
  5804 ;;		On entry : 0/0
  5805 ;;		On exit  : 0/0
  5806 ;;		Unchanged: 0/0
  5807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5808 ;;      Params:         0       4       0       0       0
  5809 ;;      Locals:         0       0       0       0       0
  5810 ;;      Temps:          0       4       0       0       0
  5811 ;;      Totals:         0       8       0       0       0
  5812 ;;Total ram usage:        8 bytes
  5813 ;; Hardware stack levels used:    1
  5814 ;; Hardware stack levels required when called:    5
  5815 ;; This function calls:
  5816 ;;		Nothing
  5817 ;; This function is called by:
  5818 ;;		_ADC_READ
  5819 ;; This function uses a non-reentrant model
  5820 ;;
  5821                           
  5822                           
  5823                           ;psect for function _SwDelay_us
  5824  0A41                     _SwDelay_us:
  5825  0A41                     l3408:	
  5826                           ;incstack = 0
  5827 ;; hardware stack exceeded
  5828                           ; Regs used in _SwDelay_us: [wreg]
  5829                           
  5830                           
  5831                           ;software_delay.c: 37: void SwDelay_us(uint32_t n);software_delay.c: 38: {;software_dela
      +                          y.c: 39:  while (n)
  5832  0A41  2A5E               	goto	l416
  5833  0A42                     l3410:
  5834                           
  5835                           ;software_delay.c: 40:  {;software_delay.c: 41:   n--;
  5836  0A42  3001               	movlw	1
  5837  0A43  00CE               	movwf	??_SwDelay_us
  5838  0A44  3000               	movlw	0
  5839  0A45  00CF               	movwf	??_SwDelay_us+1
  5840  0A46  3000               	movlw	0
  5841  0A47  00D0               	movwf	??_SwDelay_us+2
  5842  0A48  3000               	movlw	0
  5843  0A49  00D1               	movwf	??_SwDelay_us+3
  5844  0A4A  084E               	movf	??_SwDelay_us,w
  5845  0A4B  02CA               	subwf	SwDelay_us@n,f
  5846  0A4C  084F               	movf	??_SwDelay_us+1,w
  5847  0A4D  1C03               	skipc
  5848  0A4E  0F4F               	incfsz	??_SwDelay_us+1,w
  5849  0A4F  2A51               	goto	u1125
  5850  0A50  2A52               	goto	u1126
  5851  0A51                     u1125:
  5852  0A51  02CB               	subwf	SwDelay_us@n+1,f
  5853  0A52                     u1126:
  5854  0A52  0850               	movf	??_SwDelay_us+2,w
  5855  0A53  1C03               	skipc
  5856  0A54  0F50               	incfsz	??_SwDelay_us+2,w
  5857  0A55  2A57               	goto	u1127
  5858  0A56  2A58               	goto	u1128
  5859  0A57                     u1127:
  5860  0A57  02CC               	subwf	SwDelay_us@n+2,f
  5861  0A58                     u1128:
  5862  0A58  0851               	movf	??_SwDelay_us+3,w
  5863  0A59  1C03               	skipc
  5864  0A5A  0F51               	incfsz	??_SwDelay_us+3,w
  5865  0A5B  2A5D               	goto	u1129
  5866  0A5C  2A5E               	goto	u1120
  5867  0A5D                     u1129:
  5868  0A5D  02CD               	subwf	SwDelay_us@n+3,f
  5869  0A5E                     u1120:
  5870  0A5E                     l416:	
  5871                           ;software_delay.c: 42:  }
  5872                           
  5873                           
  5874                           ;software_delay.c: 39:  while (n)
  5875  0A5E  1283               	bcf	3,5	;RP0=0, select bank0
  5876  0A5F  1303               	bcf	3,6	;RP1=0, select bank0
  5877  0A60  084D               	movf	SwDelay_us@n+3,w
  5878  0A61  044C               	iorwf	SwDelay_us@n+2,w
  5879  0A62  044B               	iorwf	SwDelay_us@n+1,w
  5880  0A63  044A               	iorwf	SwDelay_us@n,w
  5881  0A64  1D03               	skipz
  5882  0A65  2A67               	goto	u1131
  5883  0A66  2A68               	goto	u1130
  5884  0A67                     u1131:
  5885  0A67  2A42               	goto	l3410
  5886  0A68                     u1130:
  5887  0A68                     l419:
  5888  0A68  0008               	return
  5889  0A69                     __end_of_SwDelay_us:
  5890                           
  5891                           	psect	text31
  5892  0D3D                     __ptext31:	
  5893 ;; *************** function _SwDelay_ms *****************
  5894 ;; Defined at:
  5895 ;;		line 10 in file "software_delay.c"
  5896 ;; Parameters:    Size  Location     Type
  5897 ;;  n               4    4[BANK0 ] unsigned long 
  5898 ;; Auto vars:     Size  Location     Type
  5899 ;;  counter_21      1   13[BANK0 ] unsigned char 
  5900 ;;  counter_256     1   12[BANK0 ] unsigned char 
  5901 ;; Return value:  Size  Location     Type
  5902 ;;                  1    wreg      void 
  5903 ;; Registers used:
  5904 ;;		wreg, status,2, status,0, btemp+1
  5905 ;; Tracked objects:
  5906 ;;		On entry : 0/0
  5907 ;;		On exit  : 0/0
  5908 ;;		Unchanged: 0/0
  5909 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5910 ;;      Params:         0       4       0       0       0
  5911 ;;      Locals:         0       2       0       0       0
  5912 ;;      Temps:          0       4       0       0       0
  5913 ;;      Totals:         0      10       0       0       0
  5914 ;;Total ram usage:       10 bytes
  5915 ;; Hardware stack levels used:    1
  5916 ;; Hardware stack levels required when called:    5
  5917 ;; This function calls:
  5918 ;;		Nothing
  5919 ;; This function is called by:
  5920 ;;		_ADC_READ
  5921 ;; This function uses a non-reentrant model
  5922 ;;
  5923                           
  5924                           
  5925                           ;psect for function _SwDelay_ms
  5926  0D3D                     _SwDelay_ms:
  5927  0D3D                     l3396:	
  5928                           ;incstack = 0
  5929 ;; hardware stack exceeded
  5930                           ; Regs used in _SwDelay_ms: [wreg+status,2+status,0+btemp+1]
  5931                           
  5932                           
  5933                           ;software_delay.c: 10: void SwDelay_ms(uint32_t n);software_delay.c: 11: {;software_dela
      +                          y.c: 12:  uint8_t counter_256;;software_delay.c: 13:  uint8_t counter_21;;software_delay
      +                          .c: 14:  while (n)
  5934  0D3D  2D72               	goto	l404
  5935  0D3E                     l3398:
  5936                           
  5937                           ;software_delay.c: 15:  {;software_delay.c: 17:   counter_21 = 21;
  5938  0D3E  3015               	movlw	21
  5939  0D3F  00FF               	movwf	btemp+1
  5940  0D40  087F               	movf	btemp+1,w
  5941  0D41  00D3               	movwf	SwDelay_ms@counter_21
  5942                           
  5943                           ;software_delay.c: 18:   while (counter_21)
  5944  0D42  2D51               	goto	l406
  5945  0D43                     l3400:
  5946                           
  5947                           ;software_delay.c: 19:   {;software_delay.c: 21:    counter_256 = 255;
  5948  0D43  30FF               	movlw	255
  5949  0D44  00FF               	movwf	btemp+1
  5950  0D45  087F               	movf	btemp+1,w
  5951  0D46  00D2               	movwf	SwDelay_ms@counter_256
  5952                           
  5953                           ;software_delay.c: 22:    while (counter_256)
  5954  0D47  2D4A               	goto	l408
  5955  0D48                     l3402:
  5956                           
  5957                           ;software_delay.c: 23:    {;software_delay.c: 24:     counter_256--;
  5958  0D48  3001               	movlw	1
  5959  0D49  02D2               	subwf	SwDelay_ms@counter_256,f
  5960  0D4A                     l408:	
  5961                           ;software_delay.c: 25:    }
  5962                           
  5963                           
  5964                           ;software_delay.c: 22:    while (counter_256)
  5965  0D4A  0852               	movf	SwDelay_ms@counter_256,w
  5966  0D4B  1D03               	btfss	3,2
  5967  0D4C  2D4E               	goto	u1081
  5968  0D4D  2D4F               	goto	u1080
  5969  0D4E                     u1081:
  5970  0D4E  2D48               	goto	l3402
  5971  0D4F                     u1080:
  5972  0D4F                     l3404:
  5973                           
  5974                           ;software_delay.c: 26:    counter_21--;
  5975  0D4F  3001               	movlw	1
  5976  0D50  02D3               	subwf	SwDelay_ms@counter_21,f
  5977  0D51                     l406:	
  5978                           ;software_delay.c: 27:   }
  5979                           
  5980                           
  5981                           ;software_delay.c: 18:   while (counter_21)
  5982  0D51  0853               	movf	SwDelay_ms@counter_21,w
  5983  0D52  1D03               	btfss	3,2
  5984  0D53  2D55               	goto	u1091
  5985  0D54  2D56               	goto	u1090
  5986  0D55                     u1091:
  5987  0D55  2D43               	goto	l3400
  5988  0D56                     u1090:
  5989  0D56                     l3406:
  5990                           
  5991                           ;software_delay.c: 28:   n--;
  5992  0D56  3001               	movlw	1
  5993  0D57  00CE               	movwf	??_SwDelay_ms
  5994  0D58  3000               	movlw	0
  5995  0D59  00CF               	movwf	??_SwDelay_ms+1
  5996  0D5A  3000               	movlw	0
  5997  0D5B  00D0               	movwf	??_SwDelay_ms+2
  5998  0D5C  3000               	movlw	0
  5999  0D5D  00D1               	movwf	??_SwDelay_ms+3
  6000  0D5E  084E               	movf	??_SwDelay_ms,w
  6001  0D5F  02CA               	subwf	SwDelay_ms@n,f
  6002  0D60  084F               	movf	??_SwDelay_ms+1,w
  6003  0D61  1C03               	skipc
  6004  0D62  0F4F               	incfsz	??_SwDelay_ms+1,w
  6005  0D63  2D65               	goto	u1105
  6006  0D64  2D66               	goto	u1106
  6007  0D65                     u1105:
  6008  0D65  02CB               	subwf	SwDelay_ms@n+1,f
  6009  0D66                     u1106:
  6010  0D66  0850               	movf	??_SwDelay_ms+2,w
  6011  0D67  1C03               	skipc
  6012  0D68  0F50               	incfsz	??_SwDelay_ms+2,w
  6013  0D69  2D6B               	goto	u1107
  6014  0D6A  2D6C               	goto	u1108
  6015  0D6B                     u1107:
  6016  0D6B  02CC               	subwf	SwDelay_ms@n+2,f
  6017  0D6C                     u1108:
  6018  0D6C  0851               	movf	??_SwDelay_ms+3,w
  6019  0D6D  1C03               	skipc
  6020  0D6E  0F51               	incfsz	??_SwDelay_ms+3,w
  6021  0D6F  2D71               	goto	u1109
  6022  0D70  2D72               	goto	u1100
  6023  0D71                     u1109:
  6024  0D71  02CD               	subwf	SwDelay_ms@n+3,f
  6025  0D72                     u1100:
  6026  0D72                     l404:	
  6027                           ;software_delay.c: 29:  }
  6028                           
  6029                           
  6030                           ;software_delay.c: 14:  while (n)
  6031  0D72  1283               	bcf	3,5	;RP0=0, select bank0
  6032  0D73  1303               	bcf	3,6	;RP1=0, select bank0
  6033  0D74  084D               	movf	SwDelay_ms@n+3,w
  6034  0D75  044C               	iorwf	SwDelay_ms@n+2,w
  6035  0D76  044B               	iorwf	SwDelay_ms@n+1,w
  6036  0D77  044A               	iorwf	SwDelay_ms@n,w
  6037  0D78  1D03               	skipz
  6038  0D79  2D7B               	goto	u1111
  6039  0D7A  2D7C               	goto	u1110
  6040  0D7B                     u1111:
  6041  0D7B  2D3E               	goto	l3398
  6042  0D7C                     u1110:
  6043  0D7C                     l413:
  6044  0D7C  0008               	return
  6045  0D7D                     __end_of_SwDelay_ms:
  6046                           
  6047                           	psect	text32
  6048  0564                     __ptext32:	
  6049 ;; *************** function _ADC_INIT *****************
  6050 ;; Defined at:
  6051 ;;		line 4 in file "ADC.c"
  6052 ;; Parameters:    Size  Location     Type
  6053 ;;  ADC_info        1    wreg     PTR struct ADC_Cfg_s
  6054 ;;		 -> ADC_Cnfiguration(5), 
  6055 ;; Auto vars:     Size  Location     Type
  6056 ;;  ADC_info        1   11[BANK0 ] PTR struct ADC_Cfg_s
  6057 ;;		 -> ADC_Cnfiguration(5), 
  6058 ;;  ret_error       1   10[BANK0 ] unsigned char 
  6059 ;; Return value:  Size  Location     Type
  6060 ;;                  1    wreg      unsigned char 
  6061 ;; Registers used:
  6062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6063 ;; Tracked objects:
  6064 ;;		On entry : 0/0
  6065 ;;		On exit  : 0/0
  6066 ;;		Unchanged: 0/0
  6067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6068 ;;      Params:         0       0       0       0       0
  6069 ;;      Locals:         0       2       0       0       0
  6070 ;;      Temps:          0       2       0       0       0
  6071 ;;      Totals:         0       4       0       0       0
  6072 ;;Total ram usage:        4 bytes
  6073 ;; Hardware stack levels used:    1
  6074 ;; Hardware stack levels required when called:    7
  6075 ;; This function calls:
  6076 ;;		_special_int_disable
  6077 ;;		_special_int_enable
  6078 ;; This function is called by:
  6079 ;;		_Task2
  6080 ;; This function uses a non-reentrant model
  6081 ;;
  6082                           
  6083                           
  6084                           ;psect for function _ADC_INIT
  6085  0564                     _ADC_INIT:
  6086                           
  6087                           ;incstack = 0
  6088 ;; hardware stack exceeded
  6089                           ; Regs used in _ADC_INIT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6090                           ;ADC_INIT@ADC_info stored from wreg
  6091  0564  1283               	bcf	3,5	;RP0=0, select bank0
  6092  0565  1303               	bcf	3,6	;RP1=0, select bank0
  6093  0566  00D1               	movwf	ADC_INIT@ADC_info
  6094  0567                     l3932:
  6095                           
  6096                           ;ADC.c: 4: ERROR_STATUS ADC_INIT(ADC_Cfg_s *ADC_info);ADC.c: 5: {;ADC.c: 6:     uint8_t 
      +                          ret_error=0;
  6097  0567  01D0               	clrf	ADC_INIT@ret_error
  6098  0568                     l3934:
  6099                           
  6100                           ;ADC.c: 8:     if((ADC_info -> u8_Prescaler ) <= 3)
  6101  0568  0A51               	incf	ADC_INIT@ADC_info,w
  6102  0569  0084               	movwf	4
  6103  056A  3004               	movlw	4
  6104  056B  1383               	bcf	3,7	;select IRP bank0
  6105  056C  0200               	subwf	0,w
  6106  056D  1803               	skipnc
  6107  056E  2D70               	goto	u1471
  6108  056F  2D71               	goto	u1470
  6109  0570                     u1471:
  6110  0570  2D90               	goto	l3942
  6111  0571                     u1470:
  6112  0571                     l3936:
  6113                           
  6114                           ;ADC.c: 9:     {;ADC.c: 10:         *((reg_type8_t)(0x001F)) |= (ADC_info -> u8_Channel_
      +                          Number)|(ADC_info -> clock_configuration )|0x01;
  6115  0571  0851               	movf	ADC_INIT@ADC_info,w
  6116  0572  3E02               	addlw	2
  6117  0573  0084               	movwf	4
  6118  0574  0800               	movf	0,w
  6119  0575  00CE               	movwf	??_ADC_INIT
  6120  0576  0851               	movf	ADC_INIT@ADC_info,w
  6121  0577  0084               	movwf	4
  6122  0578  0800               	movf	0,w
  6123  0579  044E               	iorwf	??_ADC_INIT,w
  6124  057A  3801               	iorlw	1
  6125  057B  00FF               	movwf	btemp+1
  6126  057C  087F               	movf	btemp+1,w
  6127  057D  049F               	iorwf	31,f	;volatile
  6128  057E                     l3938:
  6129                           
  6130                           ;ADC.c: 11:         *((reg_type8_t)(0x009F)) &= (~0x40);
  6131  057E  30BF               	movlw	191
  6132  057F  00FF               	movwf	btemp+1
  6133  0580  087F               	movf	btemp+1,w
  6134  0581  1683               	bsf	3,5	;RP0=1, select bank1
  6135  0582  1303               	bcf	3,6	;RP1=0, select bank1
  6136  0583  059F               	andwf	31,f	;volatile
  6137  0584                     l3940:
  6138                           
  6139                           ;ADC.c: 12:         *((reg_type8_t)(0x009F)) |=(ADC_info -> u8_ten_bit_arrangment);
  6140  0584  1283               	bcf	3,5	;RP0=0, select bank0
  6141  0585  1303               	bcf	3,6	;RP1=0, select bank0
  6142  0586  0851               	movf	ADC_INIT@ADC_info,w
  6143  0587  3E03               	addlw	3
  6144  0588  0084               	movwf	4
  6145  0589  0800               	movf	0,w
  6146  058A  00FF               	movwf	btemp+1
  6147  058B  087F               	movf	btemp+1,w
  6148  058C  1683               	bsf	3,5	;RP0=1, select bank1
  6149  058D  1303               	bcf	3,6	;RP1=0, select bank1
  6150  058E  049F               	iorwf	31,f	;volatile
  6151                           
  6152                           ;ADC.c: 13:     }else if(((ADC_info -> u8_Prescaler ) > 3 )
  6153  058F  2DD4               	goto	l3958
  6154  0590                     l3942:
  6155  0590  0A51               	incf	ADC_INIT@ADC_info,w
  6156  0591  0084               	movwf	4
  6157  0592  3004               	movlw	4
  6158  0593  0200               	subwf	0,w
  6159  0594  1C03               	skipc
  6160  0595  2D97               	goto	u1481
  6161  0596  2D98               	goto	u1480
  6162  0597                     u1481:
  6163  0597  2DB8               	goto	l3948
  6164  0598                     u1480:
  6165  0598                     l3944:
  6166  0598  0A51               	incf	ADC_INIT@ADC_info,w
  6167  0599  0084               	movwf	4
  6168  059A  3008               	movlw	8
  6169  059B  0200               	subwf	0,w
  6170  059C  1803               	skipnc
  6171  059D  2D9F               	goto	u1491
  6172  059E  2DA0               	goto	u1490
  6173  059F                     u1491:
  6174  059F  2DB8               	goto	l3948
  6175  05A0                     u1490:
  6176  05A0                     l3946:
  6177                           
  6178                           ;ADC.c: 15:   {;ADC.c: 16:          *((reg_type8_t)(0x001F)) |= (ADC_info -> u8_Channel_
      +                          Number)|(ADC_info -> clock_configuration )|0x01;
  6179  05A0  0851               	movf	ADC_INIT@ADC_info,w
  6180  05A1  3E02               	addlw	2
  6181  05A2  0084               	movwf	4
  6182  05A3  0800               	movf	0,w
  6183  05A4  00CE               	movwf	??_ADC_INIT
  6184  05A5  0851               	movf	ADC_INIT@ADC_info,w
  6185  05A6  0084               	movwf	4
  6186  05A7  0800               	movf	0,w
  6187  05A8  044E               	iorwf	??_ADC_INIT,w
  6188  05A9  3801               	iorlw	1
  6189  05AA  00FF               	movwf	btemp+1
  6190  05AB  087F               	movf	btemp+1,w
  6191  05AC  049F               	iorwf	31,f	;volatile
  6192                           
  6193                           ;ADC.c: 17:       *((reg_type8_t)(0x009F)) |= 0x40 | (ADC_info -> u8_ten_bit_arrangment)
      +                          ;
  6194  05AD  0851               	movf	ADC_INIT@ADC_info,w
  6195  05AE  3E03               	addlw	3
  6196  05AF  0084               	movwf	4
  6197  05B0  0800               	movf	0,w
  6198  05B1  3840               	iorlw	64
  6199  05B2  00FF               	movwf	btemp+1
  6200  05B3  087F               	movf	btemp+1,w
  6201  05B4  1683               	bsf	3,5	;RP0=1, select bank1
  6202  05B5  1303               	bcf	3,6	;RP1=0, select bank1
  6203  05B6  049F               	iorwf	31,f	;volatile
  6204                           
  6205                           ;ADC.c: 19:          }else{ret_error += 1 + 30;}
  6206  05B7  2DD4               	goto	l3958
  6207  05B8                     l3948:
  6208  05B8  301F               	movlw	31
  6209  05B9  00FF               	movwf	btemp+1
  6210  05BA  087F               	movf	btemp+1,w
  6211  05BB  07D0               	addwf	ADC_INIT@ret_error,f
  6212  05BC  2DD4               	goto	l3958
  6213  05BD                     l3950:
  6214                           
  6215                           ;ADC.c: 24:         ret_error=special_int_enable(0x40);
  6216  05BD  3040               	movlw	64
  6217  05BE  120A  118A  266B  120A  118A  	fcall	_special_int_enable
  6218  05C3  00FF               	movwf	btemp+1
  6219  05C4  087F               	movf	btemp+1,w
  6220  05C5  1283               	bcf	3,5	;RP0=0, select bank0
  6221  05C6  1303               	bcf	3,6	;RP1=0, select bank0
  6222  05C7  00D0               	movwf	ADC_INIT@ret_error
  6223  05C8                     l3952:
  6224                           
  6225                           ;ADC.c: 25:       ADC_INT = adc_interrupt_routine;
  6226  05C8  3001               	movlw	(low (fp__adc_interrupt_routine-i1fpbase))& (0+255)
  6227  05C9  00FF               	movwf	btemp+1
  6228  05CA  087F               	movf	btemp+1,w
  6229  05CB  00C2               	movwf	_ADC_INT
  6230                           
  6231                           ;ADC.c: 26:         break;
  6232  05CC  2DE8               	goto	l3960
  6233  05CD                     l3954:
  6234                           
  6235                           ;ADC.c: 28:         special_int_disable(0x40);
  6236  05CD  3040               	movlw	64
  6237  05CE  120A  158A  24FD  120A  118A  	fcall	_special_int_disable
  6238                           
  6239                           ;ADC.c: 30:     break;
  6240  05D3  2DE8               	goto	l3960
  6241  05D4                     l3958:
  6242  05D4  1283               	bcf	3,5	;RP0=0, select bank0
  6243  05D5  0851               	movf	ADC_INIT@ADC_info,w
  6244  05D6  3E04               	addlw	4
  6245  05D7  0084               	movwf	4
  6246  05D8  0800               	movf	0,w
  6247  05D9  00CE               	movwf	??_ADC_INIT
  6248  05DA  01CF               	clrf	??_ADC_INIT+1
  6249                           
  6250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6251                           ; Switch size 1, requested type "simple"
  6252                           ; Number of cases is 1, Range of values is 0 to 0
  6253                           ; switch strategies available:
  6254                           ; Name         Instructions Cycles
  6255                           ; simple_byte            4     3 (average)
  6256                           ; direct_byte           11     8 (fixed)
  6257                           ; jumptable            260     6 (fixed)
  6258                           ;	Chosen strategy is simple_byte
  6259  05DB  084F               	movf	??_ADC_INIT+1,w
  6260  05DC  3A00               	xorlw	0	; case 0
  6261  05DD  1903               	skipnz
  6262  05DE  2DE0               	goto	l6478
  6263  05DF  2DE8               	goto	l3960
  6264  05E0                     l6478:
  6265                           
  6266                           ; Switch size 1, requested type "simple"
  6267                           ; Number of cases is 2, Range of values is 64 to 191
  6268                           ; switch strategies available:
  6269                           ; Name         Instructions Cycles
  6270                           ; simple_byte            7     4 (average)
  6271                           ; jumptable            263     9 (fixed)
  6272                           ;	Chosen strategy is simple_byte
  6273  05E0  084E               	movf	??_ADC_INIT,w
  6274  05E1  3A40               	xorlw	64	; case 64
  6275  05E2  1903               	skipnz
  6276  05E3  2DBD               	goto	l3950
  6277  05E4  3AFF               	xorlw	255	; case 191
  6278  05E5  1903               	skipnz
  6279  05E6  2DCD               	goto	l3954
  6280  05E7  2DE8               	goto	l3960
  6281  05E8                     l3960:
  6282                           
  6283                           ;ADC.c: 35:     return ret_error;
  6284  05E8  1283               	bcf	3,5	;RP0=0, select bank0
  6285  05E9  1303               	bcf	3,6	;RP1=0, select bank0
  6286  05EA  0850               	movf	ADC_INIT@ret_error,w
  6287  05EB                     l27:
  6288  05EB  0008               	return
  6289  05EC                     __end_of_ADC_INIT:
  6290                           
  6291                           	psect	text33
  6292  066B                     __ptext33:	
  6293 ;; *************** function _special_int_enable *****************
  6294 ;; Defined at:
  6295 ;;		line 35 in file "interrupts.c"
  6296 ;; Parameters:    Size  Location     Type
  6297 ;;  u8_interrupt    1    wreg     unsigned char 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  u8_interrupt    1    6[BANK0 ] unsigned char 
  6300 ;;  ret_error       1    7[BANK0 ] unsigned char 
  6301 ;; Return value:  Size  Location     Type
  6302 ;;                  1    wreg      unsigned char 
  6303 ;; Registers used:
  6304 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6305 ;; Tracked objects:
  6306 ;;		On entry : 0/0
  6307 ;;		On exit  : 0/0
  6308 ;;		Unchanged: 0/0
  6309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6310 ;;      Params:         0       0       0       0       0
  6311 ;;      Locals:         0       2       0       0       0
  6312 ;;      Temps:          0       2       0       0       0
  6313 ;;      Totals:         0       4       0       0       0
  6314 ;;Total ram usage:        4 bytes
  6315 ;; Hardware stack levels used:    1
  6316 ;; Hardware stack levels required when called:    6
  6317 ;; This function calls:
  6318 ;;		_global_int_enable
  6319 ;; This function is called by:
  6320 ;;		_ADC_INIT
  6321 ;;		_Timer_Init
  6322 ;; This function uses a non-reentrant model
  6323 ;;
  6324                           
  6325                           
  6326                           ;psect for function _special_int_enable
  6327  066B                     _special_int_enable:
  6328                           
  6329                           ;incstack = 0
  6330 ;; hardware stack exceeded
  6331                           ; Regs used in _special_int_enable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6332                           ;special_int_enable@u8_interrupt_prepherals stored from wreg
  6333  066B  1283               	bcf	3,5	;RP0=0, select bank0
  6334  066C  1303               	bcf	3,6	;RP1=0, select bank0
  6335  066D  00CC               	movwf	special_int_enable@u8_interrupt_prepherals
  6336  066E                     l3244:
  6337                           
  6338                           ;interrupts.c: 35: ERROR_STATUS special_int_enable(uint8_t u8_interrupt_prepherals);inte
      +                          rrupts.c: 36: {;interrupts.c: 37:     uint8_t ret_error = 0;
  6339  066E  01CD               	clrf	special_int_enable@ret_error
  6340                           
  6341                           ;interrupts.c: 38: switch (u8_interrupt_prepherals) {
  6342  066F  2EC8               	goto	l3280
  6343  0670                     l3246:
  6344                           
  6345                           ;interrupts.c: 40:  *((reg_type8_t)(0x000B)) |=0xA0;
  6346  0670  30A0               	movlw	160
  6347  0671  00FF               	movwf	btemp+1
  6348  0672  087F               	movf	btemp+1,w
  6349  0673  048B               	iorwf	11,f	;volatile
  6350  0674                     l3248:
  6351                           
  6352                           ;interrupts.c: 41:         if(u8global_int_enabled == 0)
  6353  0674  083F               	movf	_u8global_int_enabled,w
  6354  0675  1D03               	btfss	3,2
  6355  0676  2E78               	goto	u1001
  6356  0677  2E79               	goto	u1000
  6357  0678                     u1001:
  6358  0678  2E7A               	goto	l135
  6359  0679                     u1000:
  6360  0679                     l3250:
  6361                           
  6362                           ;interrupts.c: 42:         *((reg_type8_t)(0x000B)) |=0x80;
  6363  0679  178B               	bsf	11,7	;volatile
  6364  067A                     l135:
  6365                           
  6366                           ;interrupts.c: 43:         u8global_int_enabled=1;
  6367  067A  01BF               	clrf	_u8global_int_enabled
  6368  067B  0ABF               	incf	_u8global_int_enabled,f
  6369                           
  6370                           ;interrupts.c: 44:  break;
  6371  067C  2EE1               	goto	l3282
  6372  067D                     l3252:
  6373                           
  6374                           ;interrupts.c: 46:    global_int_enable();
  6375  067D  120A  158A  215B  120A  118A  	fcall	_global_int_enable
  6376  0682                     l3254:
  6377                           
  6378                           ;interrupts.c: 47:               *((reg_type8_t)(0x008C)) |= 0x01;
  6379  0682  1683               	bsf	3,5	;RP0=1, select bank1
  6380  0683  1303               	bcf	3,6	;RP1=0, select bank1
  6381  0684  140C               	bsf	12,0	;volatile
  6382  0685                     l3256:
  6383                           
  6384                           ;interrupts.c: 48:         if(u8prepheral_int_enabled == 0)
  6385  0685  1283               	bcf	3,5	;RP0=0, select bank0
  6386  0686  1303               	bcf	3,6	;RP1=0, select bank0
  6387  0687  083E               	movf	_u8prepheral_int_enabled,w
  6388  0688  1D03               	btfss	3,2
  6389  0689  2E8B               	goto	u1011
  6390  068A  2E8C               	goto	u1010
  6391  068B                     u1011:
  6392  068B  2E8D               	goto	l138
  6393  068C                     u1010:
  6394  068C                     l3258:
  6395                           
  6396                           ;interrupts.c: 49:         *((reg_type8_t)(0x000B)) |= 0x40;
  6397  068C  170B               	bsf	11,6	;volatile
  6398  068D                     l138:
  6399                           
  6400                           ;interrupts.c: 50:             u8prepheral_int_enabled=1;
  6401  068D  01BE               	clrf	_u8prepheral_int_enabled
  6402  068E  0ABE               	incf	_u8prepheral_int_enabled,f
  6403                           
  6404                           ;interrupts.c: 54:  break;
  6405  068F  2EE1               	goto	l3282
  6406  0690                     l3260:
  6407                           
  6408                           ;interrupts.c: 56:   global_int_enable();
  6409  0690  120A  158A  215B  120A  118A  	fcall	_global_int_enable
  6410  0695                     l3262:
  6411                           
  6412                           ;interrupts.c: 58:          if(u8prepheral_int_enabled == 0)
  6413  0695  1283               	bcf	3,5	;RP0=0, select bank0
  6414  0696  1303               	bcf	3,6	;RP1=0, select bank0
  6415  0697  083E               	movf	_u8prepheral_int_enabled,w
  6416  0698  1D03               	btfss	3,2
  6417  0699  2E9B               	goto	u1021
  6418  069A  2E9C               	goto	u1020
  6419  069B                     u1021:
  6420  069B  2E9D               	goto	l140
  6421  069C                     u1020:
  6422  069C                     l3264:
  6423                           
  6424                           ;interrupts.c: 59:         *((reg_type8_t)(0x000B)) |= 0x40;
  6425  069C  170B               	bsf	11,6	;volatile
  6426  069D                     l140:
  6427                           
  6428                           ;interrupts.c: 60:          u8prepheral_int_enabled=1;
  6429  069D  01BE               	clrf	_u8prepheral_int_enabled
  6430  069E  0ABE               	incf	_u8prepheral_int_enabled,f
  6431                           
  6432                           ;interrupts.c: 62:       *((reg_type8_t)(0x008C)) |= 0x02;
  6433  069F  1683               	bsf	3,5	;RP0=1, select bank1
  6434  06A0  1303               	bcf	3,6	;RP1=0, select bank1
  6435  06A1  148C               	bsf	12,1	;volatile
  6436                           
  6437                           ;interrupts.c: 64:  break;
  6438  06A2  2EE1               	goto	l3282
  6439  06A3                     l3266:
  6440                           
  6441                           ;interrupts.c: 66:      global_int_enable();
  6442  06A3  120A  158A  215B  120A  118A  	fcall	_global_int_enable
  6443  06A8                     l3268:
  6444                           
  6445                           ;interrupts.c: 68:                  if(u8prepheral_int_enabled == 0)
  6446  06A8  1283               	bcf	3,5	;RP0=0, select bank0
  6447  06A9  1303               	bcf	3,6	;RP1=0, select bank0
  6448  06AA  083E               	movf	_u8prepheral_int_enabled,w
  6449  06AB  1D03               	btfss	3,2
  6450  06AC  2EAE               	goto	u1031
  6451  06AD  2EAF               	goto	u1030
  6452  06AE                     u1031:
  6453  06AE  2E8D               	goto	l138
  6454  06AF                     u1030:
  6455  06AF  2E8C               	goto	l3258
  6456  06B0                     l3272:
  6457                           
  6458                           ;interrupts.c: 74:   global_int_enable();
  6459  06B0  120A  158A  215B  120A  118A  	fcall	_global_int_enable
  6460  06B5                     l3274:
  6461                           
  6462                           ;interrupts.c: 77:       if(u8prepheral_int_enabled == 0)
  6463  06B5  1283               	bcf	3,5	;RP0=0, select bank0
  6464  06B6  1303               	bcf	3,6	;RP1=0, select bank0
  6465  06B7  083E               	movf	_u8prepheral_int_enabled,w
  6466  06B8  1D03               	btfss	3,2
  6467  06B9  2EBB               	goto	u1041
  6468  06BA  2EBC               	goto	u1040
  6469  06BB                     u1041:
  6470  06BB  2EBD               	goto	l144
  6471  06BC                     u1040:
  6472  06BC                     l3276:
  6473                           
  6474                           ;interrupts.c: 78:      *((reg_type8_t)(0x000B)) |= 0x40;
  6475  06BC  170B               	bsf	11,6	;volatile
  6476  06BD                     l144:
  6477                           
  6478                           ;interrupts.c: 79:       u8prepheral_int_enabled=1;
  6479  06BD  01BE               	clrf	_u8prepheral_int_enabled
  6480  06BE  0ABE               	incf	_u8prepheral_int_enabled,f
  6481                           
  6482                           ;interrupts.c: 81:       *((reg_type8_t)(0x008C)) |= 0x40;
  6483  06BF  1683               	bsf	3,5	;RP0=1, select bank1
  6484  06C0  1303               	bcf	3,6	;RP1=0, select bank1
  6485  06C1  170C               	bsf	12,6	;volatile
  6486                           
  6487                           ;interrupts.c: 82:   break;
  6488  06C2  2EE1               	goto	l3282
  6489  06C3                     l3278:
  6490                           
  6491                           ;interrupts.c: 84:     ret_error += 1 + 28;
  6492  06C3  301D               	movlw	29
  6493  06C4  00FF               	movwf	btemp+1
  6494  06C5  087F               	movf	btemp+1,w
  6495  06C6  07CD               	addwf	special_int_enable@ret_error,f
  6496                           
  6497                           ;interrupts.c: 86: }
  6498  06C7  2EE1               	goto	l3282
  6499  06C8                     l3280:
  6500  06C8  084C               	movf	special_int_enable@u8_interrupt_prepherals,w
  6501  06C9  00CA               	movwf	??_special_int_enable
  6502  06CA  01CB               	clrf	??_special_int_enable+1
  6503                           
  6504                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6505                           ; Switch size 1, requested type "simple"
  6506                           ; Number of cases is 1, Range of values is 0 to 0
  6507                           ; switch strategies available:
  6508                           ; Name         Instructions Cycles
  6509                           ; simple_byte            4     3 (average)
  6510                           ; direct_byte           11     8 (fixed)
  6511                           ; jumptable            260     6 (fixed)
  6512                           ;	Chosen strategy is simple_byte
  6513  06CB  084B               	movf	??_special_int_enable+1,w
  6514  06CC  3A00               	xorlw	0	; case 0
  6515  06CD  1903               	skipnz
  6516  06CE  2ED0               	goto	l6480
  6517  06CF  2EC3               	goto	l3278
  6518  06D0                     l6480:
  6519                           
  6520                           ; Switch size 1, requested type "simple"
  6521                           ; Number of cases is 5, Range of values is 0 to 64
  6522                           ; switch strategies available:
  6523                           ; Name         Instructions Cycles
  6524                           ; simple_byte           16     9 (average)
  6525                           ; direct_byte          203     8 (fixed)
  6526                           ; jumptable            260     6 (fixed)
  6527                           ;	Chosen strategy is simple_byte
  6528  06D0  084A               	movf	??_special_int_enable,w
  6529  06D1  3A00               	xorlw	0	; case 0
  6530  06D2  1903               	skipnz
  6531  06D3  2E70               	goto	l3246
  6532  06D4  3A01               	xorlw	1	; case 1
  6533  06D5  1903               	skipnz
  6534  06D6  2E7D               	goto	l3252
  6535  06D7  3A03               	xorlw	3	; case 2
  6536  06D8  1903               	skipnz
  6537  06D9  2E90               	goto	l3260
  6538  06DA  3A01               	xorlw	1	; case 3
  6539  06DB  1903               	skipnz
  6540  06DC  2EA3               	goto	l3266
  6541  06DD  3A43               	xorlw	67	; case 64
  6542  06DE  1903               	skipnz
  6543  06DF  2EB0               	goto	l3272
  6544  06E0  2EC3               	goto	l3278
  6545  06E1                     l3282:
  6546                           
  6547                           ;interrupts.c: 87: return ret_error;
  6548  06E1  1283               	bcf	3,5	;RP0=0, select bank0
  6549  06E2  084D               	movf	special_int_enable@ret_error,w
  6550  06E3                     l146:
  6551  06E3  0008               	return
  6552  06E4                     __end_of_special_int_enable:
  6553                           
  6554                           	psect	text34
  6555  095B                     __ptext34:	
  6556 ;; *************** function _global_int_enable *****************
  6557 ;; Defined at:
  6558 ;;		line 169 in file "interrupts.c"
  6559 ;; Parameters:    Size  Location     Type
  6560 ;;		None
  6561 ;; Auto vars:     Size  Location     Type
  6562 ;;		None
  6563 ;; Return value:  Size  Location     Type
  6564 ;;                  1    wreg      void 
  6565 ;; Registers used:
  6566 ;;		wreg, status,2, status,0
  6567 ;; Tracked objects:
  6568 ;;		On entry : 0/0
  6569 ;;		On exit  : 0/0
  6570 ;;		Unchanged: 0/0
  6571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6572 ;;      Params:         0       0       0       0       0
  6573 ;;      Locals:         0       0       0       0       0
  6574 ;;      Temps:          0       0       0       0       0
  6575 ;;      Totals:         0       0       0       0       0
  6576 ;;Total ram usage:        0 bytes
  6577 ;; Hardware stack levels used:    1
  6578 ;; Hardware stack levels required when called:    5
  6579 ;; This function calls:
  6580 ;;		Nothing
  6581 ;; This function is called by:
  6582 ;;		_special_int_enable
  6583 ;; This function uses a non-reentrant model
  6584 ;;
  6585                           
  6586                           
  6587                           ;psect for function _global_int_enable
  6588  095B                     _global_int_enable:
  6589  095B                     l3240:	
  6590                           ;incstack = 0
  6591 ;; hardware stack exceeded
  6592                           ; Regs used in _global_int_enable: [wreg+status,2+status,0]
  6593                           
  6594                           
  6595                           ;interrupts.c: 171: if(u8global_int_enabled == 0)
  6596  095B  1283               	bcf	3,5	;RP0=0, select bank0
  6597  095C  1303               	bcf	3,6	;RP1=0, select bank0
  6598  095D  083F               	movf	_u8global_int_enabled,w
  6599  095E  1D03               	btfss	3,2
  6600  095F  2961               	goto	u991
  6601  0960  2962               	goto	u990
  6602  0961                     u991:
  6603  0961  2963               	goto	l182
  6604  0962                     u990:
  6605  0962                     l3242:
  6606                           
  6607                           ;interrupts.c: 172:      *((reg_type8_t)(0x000B)) |=0x80;
  6608  0962  178B               	bsf	11,7	;volatile
  6609  0963                     l182:
  6610                           
  6611                           ;interrupts.c: 173:      u8global_int_enabled=1;
  6612  0963  01BF               	clrf	_u8global_int_enabled
  6613  0964  0ABF               	incf	_u8global_int_enabled,f
  6614  0965                     l183:
  6615  0965  0008               	return
  6616  0966                     __end_of_global_int_enable:
  6617                           
  6618                           	psect	text35
  6619  0CFD                     __ptext35:	
  6620 ;; *************** function _special_int_disable *****************
  6621 ;; Defined at:
  6622 ;;		line 89 in file "interrupts.c"
  6623 ;; Parameters:    Size  Location     Type
  6624 ;;  u8_interrupt    1    wreg     unsigned char 
  6625 ;; Auto vars:     Size  Location     Type
  6626 ;;  u8_interrupt    1    6[BANK0 ] unsigned char 
  6627 ;;  ret_error       1    7[BANK0 ] unsigned char 
  6628 ;; Return value:  Size  Location     Type
  6629 ;;                  1    wreg      unsigned char 
  6630 ;; Registers used:
  6631 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  6632 ;; Tracked objects:
  6633 ;;		On entry : 0/0
  6634 ;;		On exit  : 0/0
  6635 ;;		Unchanged: 0/0
  6636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6637 ;;      Params:         0       0       0       0       0
  6638 ;;      Locals:         0       2       0       0       0
  6639 ;;      Temps:          0       2       0       0       0
  6640 ;;      Totals:         0       4       0       0       0
  6641 ;;Total ram usage:        4 bytes
  6642 ;; Hardware stack levels used:    1
  6643 ;; Hardware stack levels required when called:    5
  6644 ;; This function calls:
  6645 ;;		Nothing
  6646 ;; This function is called by:
  6647 ;;		_ADC_INIT
  6648 ;;		_Timer_Init
  6649 ;; This function uses a non-reentrant model
  6650 ;;
  6651                           
  6652                           
  6653                           ;psect for function _special_int_disable
  6654  0CFD                     _special_int_disable:
  6655                           
  6656                           ;incstack = 0
  6657 ;; hardware stack exceeded
  6658                           ; Regs used in _special_int_disable: [wreg-fsr0h+status,2+status,0+btemp+1]
  6659                           ;special_int_disable@u8_interrupt_prepherals stored from wreg
  6660  0CFD  1283               	bcf	3,5	;RP0=0, select bank0
  6661  0CFE  1303               	bcf	3,6	;RP1=0, select bank0
  6662  0CFF  00CC               	movwf	special_int_disable@u8_interrupt_prepherals
  6663  0D00                     l3290:
  6664                           
  6665                           ;interrupts.c: 89: ERROR_STATUS special_int_disable(uint8_t u8_interrupt_prepherals);int
      +                          errupts.c: 90: { uint8_t ret_error = 0;
  6666  0D00  01CD               	clrf	special_int_disable@ret_error
  6667                           
  6668                           ;interrupts.c: 92:     switch (u8_interrupt_prepherals) {
  6669  0D01  2D21               	goto	l3302
  6670  0D02                     l3292:
  6671                           
  6672                           ;interrupts.c: 94:  *((reg_type8_t)(0x000B)) &= 0xDF;
  6673  0D02  30DF               	movlw	223
  6674  0D03  00FF               	movwf	btemp+1
  6675  0D04  087F               	movf	btemp+1,w
  6676  0D05  058B               	andwf	11,f	;volatile
  6677                           
  6678                           ;interrupts.c: 95:  break;
  6679  0D06  2D3A               	goto	l3304
  6680  0D07                     l3294:
  6681                           
  6682                           ;interrupts.c: 97:         *((reg_type8_t)(0x008C)) &= 0xFE;
  6683  0D07  30FE               	movlw	254
  6684  0D08  00FF               	movwf	btemp+1
  6685  0D09  087F               	movf	btemp+1,w
  6686  0D0A  1683               	bsf	3,5	;RP0=1, select bank1
  6687  0D0B  1303               	bcf	3,6	;RP1=0, select bank1
  6688  0D0C  058C               	andwf	12,f	;volatile
  6689                           
  6690                           ;interrupts.c: 98:  break;
  6691  0D0D  2D3A               	goto	l3304
  6692  0D0E                     l3296:
  6693                           
  6694                           ;interrupts.c: 100:         *((reg_type8_t)(0x008C)) &= 0xFD;
  6695  0D0E  30FD               	movlw	253
  6696  0D0F  00FF               	movwf	btemp+1
  6697  0D10  087F               	movf	btemp+1,w
  6698  0D11  1683               	bsf	3,5	;RP0=1, select bank1
  6699  0D12  1303               	bcf	3,6	;RP1=0, select bank1
  6700  0D13  058C               	andwf	12,f	;volatile
  6701                           
  6702                           ;interrupts.c: 101:  break;
  6703  0D14  2D3A               	goto	l3304
  6704  0D15                     l3298:
  6705                           
  6706                           ;interrupts.c: 105:         *((reg_type8_t)(0x008C)) &= (~0x40);
  6707  0D15  30BF               	movlw	191
  6708  0D16  00FF               	movwf	btemp+1
  6709  0D17  087F               	movf	btemp+1,w
  6710  0D18  1683               	bsf	3,5	;RP0=1, select bank1
  6711  0D19  1303               	bcf	3,6	;RP1=0, select bank1
  6712  0D1A  058C               	andwf	12,f	;volatile
  6713  0D1B                     l156:	
  6714                           ;interrupts.c: 106:         default:
  6715                           
  6716                           
  6717                           ;interrupts.c: 107:     ret_error += 1 + 28;
  6718  0D1B  301D               	movlw	29
  6719  0D1C  00FF               	movwf	btemp+1
  6720  0D1D  087F               	movf	btemp+1,w
  6721  0D1E  1283               	bcf	3,5	;RP0=0, select bank0
  6722  0D1F  07CD               	addwf	special_int_disable@ret_error,f
  6723                           
  6724                           ;interrupts.c: 108:     break;
  6725  0D20  2D3A               	goto	l3304
  6726  0D21                     l3302:
  6727  0D21  084C               	movf	special_int_disable@u8_interrupt_prepherals,w
  6728  0D22  00CA               	movwf	??_special_int_disable
  6729  0D23  01CB               	clrf	??_special_int_disable+1
  6730                           
  6731                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6732                           ; Switch size 1, requested type "simple"
  6733                           ; Number of cases is 1, Range of values is 0 to 0
  6734                           ; switch strategies available:
  6735                           ; Name         Instructions Cycles
  6736                           ; simple_byte            4     3 (average)
  6737                           ; direct_byte           11     8 (fixed)
  6738                           ; jumptable            260     6 (fixed)
  6739                           ;	Chosen strategy is simple_byte
  6740  0D24  084B               	movf	??_special_int_disable+1,w
  6741  0D25  3A00               	xorlw	0	; case 0
  6742  0D26  1903               	skipnz
  6743  0D27  2D29               	goto	l6482
  6744  0D28  2D1B               	goto	l156
  6745  0D29                     l6482:
  6746                           
  6747                           ; Switch size 1, requested type "simple"
  6748                           ; Number of cases is 5, Range of values is 0 to 64
  6749                           ; switch strategies available:
  6750                           ; Name         Instructions Cycles
  6751                           ; simple_byte           16     9 (average)
  6752                           ; direct_byte          203     8 (fixed)
  6753                           ; jumptable            260     6 (fixed)
  6754                           ;	Chosen strategy is simple_byte
  6755  0D29  084A               	movf	??_special_int_disable,w
  6756  0D2A  3A00               	xorlw	0	; case 0
  6757  0D2B  1903               	skipnz
  6758  0D2C  2D02               	goto	l3292
  6759  0D2D  3A01               	xorlw	1	; case 1
  6760  0D2E  1903               	skipnz
  6761  0D2F  2D07               	goto	l3294
  6762  0D30  3A03               	xorlw	3	; case 2
  6763  0D31  1903               	skipnz
  6764  0D32  2D0E               	goto	l3296
  6765  0D33  3A01               	xorlw	1	; case 3
  6766  0D34  1903               	skipnz
  6767  0D35  2D3A               	goto	l3304
  6768  0D36  3A43               	xorlw	67	; case 64
  6769  0D37  1903               	skipnz
  6770  0D38  2D15               	goto	l3298
  6771  0D39  2D1B               	goto	l156
  6772  0D3A                     l3304:
  6773                           
  6774                           ;interrupts.c: 111: return ret_error;
  6775  0D3A  1283               	bcf	3,5	;RP0=0, select bank0
  6776  0D3B  084D               	movf	special_int_disable@ret_error,w
  6777  0D3C                     l157:
  6778  0D3C  0008               	return
  6779  0D3D                     __end_of_special_int_disable:
  6780                           
  6781                           	psect	text36
  6782  05EC                     __ptext36:	
  6783 ;; *************** function _pushButtonGetStatus *****************
  6784 ;; Defined at:
  6785 ;;		line 23 in file "pushButton.c"
  6786 ;; Parameters:    Size  Location     Type
  6787 ;;  en_butotn_id    1    wreg     enum E62
  6788 ;; Auto vars:     Size  Location     Type
  6789 ;;  en_butotn_id    1   12[BANK0 ] enum E62
  6790 ;;  pushreturn      1   13[BANK0 ] unsigned char 
  6791 ;; Return value:  Size  Location     Type
  6792 ;;                  1    wreg      enum E67
  6793 ;; Registers used:
  6794 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6795 ;; Tracked objects:
  6796 ;;		On entry : 0/0
  6797 ;;		On exit  : 0/0
  6798 ;;		Unchanged: 0/0
  6799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6800 ;;      Params:         0       0       0       0       0
  6801 ;;      Locals:         0       2       0       0       0
  6802 ;;      Temps:          0       2       0       0       0
  6803 ;;      Totals:         0       4       0       0       0
  6804 ;;Total ram usage:        4 bytes
  6805 ;; Hardware stack levels used:    1
  6806 ;; Hardware stack levels required when called:    6
  6807 ;; This function calls:
  6808 ;;		_DIO_Read
  6809 ;; This function is called by:
  6810 ;;		_Task1
  6811 ;; This function uses a non-reentrant model
  6812 ;;
  6813                           
  6814                           
  6815                           ;psect for function _pushButtonGetStatus
  6816  05EC                     _pushButtonGetStatus:
  6817                           
  6818                           ;incstack = 0
  6819 ;; hardware stack exceeded
  6820                           ; Regs used in _pushButtonGetStatus: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  6821                           ;pushButtonGetStatus@en_butotn_id stored from wreg
  6822  05EC  1283               	bcf	3,5	;RP0=0, select bank0
  6823  05ED  1303               	bcf	3,6	;RP1=0, select bank0
  6824  05EE  00D2               	movwf	pushButtonGetStatus@en_butotn_id
  6825  05EF                     l4024:
  6826                           
  6827                           ;pushButton.c: 23: En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id);pus
      +                          hButton.c: 24: {uint8_t pushreturn = 0;
  6828  05EF  01D3               	clrf	pushButtonGetStatus@pushreturn
  6829                           
  6830                           ;pushButton.c: 25:  static uint8_t u8_Button_press[3];;pushButton.c: 26: static uint8_t 
      +                          u8_S_button_status[3];;pushButton.c: 27: switch(en_butotn_id)
  6831  05F0  2E56               	goto	l4074
  6832  05F1                     l4026:
  6833                           
  6834                           ;pushButton.c: 30: {;pushButton.c: 31:     DIO_Read(2,0x10,&(u8_Button_press[0]));
  6835  05F1  3010               	movlw	16
  6836  05F2  00FF               	movwf	btemp+1
  6837  05F3  087F               	movf	btemp+1,w
  6838  05F4  00CA               	movwf	DIO_Read@pins
  6839  05F5  3043               	movlw	(low (pushButtonGetStatus@u8_Button_press| 0))& (0+255)
  6840  05F6  00FF               	movwf	btemp+1
  6841  05F7  087F               	movf	btemp+1,w
  6842  05F8  00CB               	movwf	DIO_Read@data
  6843  05F9  3002               	movlw	2
  6844  05FA  120A  158A  2679  120A  118A  	fcall	_DIO_Read
  6845  05FF                     l4028:
  6846                           
  6847                           ;pushButton.c: 32: if( u8_Button_press[0]== Pressed)
  6848  05FF  1283               	bcf	3,5	;RP0=0, select bank0
  6849  0600  1303               	bcf	3,6	;RP1=0, select bank0
  6850  0601  0343               	decf	pushButtonGetStatus@u8_Button_press,w
  6851  0602  1D03               	btfss	3,2
  6852  0603  2E05               	goto	u1551
  6853  0604  2E06               	goto	u1550
  6854  0605                     u1551:
  6855  0605  2E13               	goto	l4036
  6856  0606                     u1550:
  6857  0606                     l4030:
  6858                           
  6859                           ;pushButton.c: 33: {;pushButton.c: 34:  (u8_S_button_status[0])++;
  6860  0606  3001               	movlw	1
  6861  0607  00FF               	movwf	btemp+1
  6862  0608  087F               	movf	btemp+1,w
  6863  0609  07A3               	addwf	pushButtonGetStatus@u8_S_button_status,f
  6864  060A                     l4032:
  6865                           
  6866                           ;pushButton.c: 38:  if( (u8_S_button_status[0]) > 50)
  6867  060A  3033               	movlw	51
  6868  060B  0223               	subwf	pushButtonGetStatus@u8_S_button_status,w
  6869  060C  1C03               	skipc
  6870  060D  2E0F               	goto	u1561
  6871  060E  2E10               	goto	u1560
  6872  060F                     u1561:
  6873  060F  2E13               	goto	l4036
  6874  0610                     u1560:
  6875  0610                     l4034:
  6876                           
  6877                           ;pushButton.c: 39:  pushreturn = Pressed;
  6878  0610  01D3               	clrf	pushButtonGetStatus@pushreturn
  6879  0611  0AD3               	incf	pushButtonGetStatus@pushreturn,f
  6880  0612  2E69               	goto	l4076
  6881  0613                     l4036:
  6882  0613  01D3               	clrf	pushButtonGetStatus@pushreturn
  6883  0614  2E69               	goto	l4076
  6884  0615                     l4040:
  6885                           
  6886                           ;pushButton.c: 45: {;pushButton.c: 46:     DIO_Read(1,0x04,&(u8_Button_press[1]));
  6887  0615  3004               	movlw	4
  6888  0616  00FF               	movwf	btemp+1
  6889  0617  087F               	movf	btemp+1,w
  6890  0618  00CA               	movwf	DIO_Read@pins
  6891  0619  3044               	movlw	(low ((pushButtonGetStatus@u8_Button_press| 0+1)))& (0+255)
  6892  061A  00FF               	movwf	btemp+1
  6893  061B  087F               	movf	btemp+1,w
  6894  061C  00CB               	movwf	DIO_Read@data
  6895  061D  3001               	movlw	1
  6896  061E  120A  158A  2679  120A  118A  	fcall	_DIO_Read
  6897  0623                     l4042:
  6898                           
  6899                           ;pushButton.c: 47: if( u8_Button_press[1] == Pressed)
  6900  0623  1283               	bcf	3,5	;RP0=0, select bank0
  6901  0624  1303               	bcf	3,6	;RP1=0, select bank0
  6902  0625  0344               	decf	pushButtonGetStatus@u8_Button_press+1,w
  6903  0626  1D03               	btfss	3,2
  6904  0627  2E29               	goto	u1571
  6905  0628  2E2A               	goto	u1570
  6906  0629                     u1571:
  6907  0629  2E13               	goto	l4036
  6908  062A                     u1570:
  6909  062A                     l4044:
  6910                           
  6911                           ;pushButton.c: 48: {;pushButton.c: 49:  (u8_S_button_status[0])++;
  6912  062A  3001               	movlw	1
  6913  062B  00FF               	movwf	btemp+1
  6914  062C  087F               	movf	btemp+1,w
  6915  062D  07A3               	addwf	pushButtonGetStatus@u8_S_button_status,f
  6916  062E                     l4046:
  6917                           
  6918                           ;pushButton.c: 53:  if( (u8_S_button_status[0]) > 50)
  6919  062E  3033               	movlw	51
  6920  062F  0223               	subwf	pushButtonGetStatus@u8_S_button_status,w
  6921  0630  1C03               	skipc
  6922  0631  2E33               	goto	u1581
  6923  0632  2E34               	goto	u1580
  6924  0633                     u1581:
  6925  0633  2E13               	goto	l4036
  6926  0634                     u1580:
  6927  0634                     l4048:
  6928                           
  6929                           ;pushButton.c: 54: return Pressed;
  6930  0634  3001               	movlw	1
  6931  0635  2E6A               	goto	l205
  6932  0636                     l4058:
  6933                           
  6934                           ;pushButton.c: 60: {;pushButton.c: 61:     DIO_Read(0,0x04,&(u8_Button_press[2]));
  6935  0636  3004               	movlw	4
  6936  0637  00FF               	movwf	btemp+1
  6937  0638  087F               	movf	btemp+1,w
  6938  0639  00CA               	movwf	DIO_Read@pins
  6939  063A  3045               	movlw	(low ((pushButtonGetStatus@u8_Button_press| 0+2)))& (0+255)
  6940  063B  00FF               	movwf	btemp+1
  6941  063C  087F               	movf	btemp+1,w
  6942  063D  00CB               	movwf	DIO_Read@data
  6943  063E  3000               	movlw	0
  6944  063F  120A  158A  2679  120A  118A  	fcall	_DIO_Read
  6945  0644                     l4060:
  6946                           
  6947                           ;pushButton.c: 62: if((u8_Button_press[2])== Pressed)
  6948  0644  1283               	bcf	3,5	;RP0=0, select bank0
  6949  0645  1303               	bcf	3,6	;RP1=0, select bank0
  6950  0646  0345               	decf	pushButtonGetStatus@u8_Button_press+2,w
  6951  0647  1D03               	btfss	3,2
  6952  0648  2E4A               	goto	u1591
  6953  0649  2E4B               	goto	u1590
  6954  064A                     u1591:
  6955  064A  2E13               	goto	l4036
  6956  064B                     u1590:
  6957  064B                     l4062:
  6958                           
  6959                           ;pushButton.c: 63: { (u8_S_button_status[1])++;
  6960  064B  3001               	movlw	1
  6961  064C  00FF               	movwf	btemp+1
  6962  064D  087F               	movf	btemp+1,w
  6963  064E  07A4               	addwf	pushButtonGetStatus@u8_S_button_status+1,f
  6964  064F                     l4064:
  6965                           
  6966                           ;pushButton.c: 67:  if( (u8_S_button_status[1]) > 20)
  6967  064F  3015               	movlw	21
  6968  0650  0224               	subwf	pushButtonGetStatus@u8_S_button_status+1,w
  6969  0651  1C03               	skipc
  6970  0652  2E54               	goto	u1601
  6971  0653  2E55               	goto	u1600
  6972  0654                     u1601:
  6973  0654  2E13               	goto	l4036
  6974  0655                     u1600:
  6975  0655  2E10               	goto	l4034
  6976  0656                     l4074:
  6977  0656  0852               	movf	pushButtonGetStatus@en_butotn_id,w
  6978  0657  00D0               	movwf	??_pushButtonGetStatus
  6979  0658  01D1               	clrf	??_pushButtonGetStatus+1
  6980                           
  6981                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  6982                           ; Switch size 1, requested type "simple"
  6983                           ; Number of cases is 1, Range of values is 0 to 0
  6984                           ; switch strategies available:
  6985                           ; Name         Instructions Cycles
  6986                           ; simple_byte            4     3 (average)
  6987                           ; direct_byte           11     8 (fixed)
  6988                           ; jumptable            260     6 (fixed)
  6989                           ;	Chosen strategy is simple_byte
  6990  0659  0851               	movf	??_pushButtonGetStatus+1,w
  6991  065A  3A00               	xorlw	0	; case 0
  6992  065B  1903               	skipnz
  6993  065C  2E5E               	goto	l6484
  6994  065D  2E69               	goto	l4076
  6995  065E                     l6484:
  6996                           
  6997                           ; Switch size 1, requested type "simple"
  6998                           ; Number of cases is 3, Range of values is 0 to 2
  6999                           ; switch strategies available:
  7000                           ; Name         Instructions Cycles
  7001                           ; simple_byte           10     6 (average)
  7002                           ; direct_byte           17     8 (fixed)
  7003                           ; jumptable            260     6 (fixed)
  7004                           ;	Chosen strategy is simple_byte
  7005  065E  0850               	movf	??_pushButtonGetStatus,w
  7006  065F  3A00               	xorlw	0	; case 0
  7007  0660  1903               	skipnz
  7008  0661  2DF1               	goto	l4026
  7009  0662  3A01               	xorlw	1	; case 1
  7010  0663  1903               	skipnz
  7011  0664  2E15               	goto	l4040
  7012  0665  3A03               	xorlw	3	; case 2
  7013  0666  1903               	skipnz
  7014  0667  2E36               	goto	l4058
  7015  0668  2E69               	goto	l4076
  7016  0669                     l4076:
  7017                           
  7018                           ;pushButton.c: 78: return pushreturn ;
  7019  0669  0853               	movf	pushButtonGetStatus@pushreturn,w
  7020  066A                     l205:
  7021  066A  0008               	return
  7022  066B                     __end_of_pushButtonGetStatus:
  7023                           
  7024                           	psect	text37
  7025  0E79                     __ptext37:	
  7026 ;; *************** function _DIO_Read *****************
  7027 ;; Defined at:
  7028 ;;		line 236 in file "DIO.c"
  7029 ;; Parameters:    Size  Location     Type
  7030 ;;  GPIO            1    wreg     unsigned char 
  7031 ;;  pins            1    4[BANK0 ] unsigned char 
  7032 ;;  data            1    5[BANK0 ] PTR unsigned char 
  7033 ;;		 -> pushButtonGetStatus@u8_Button_press(3), 
  7034 ;; Auto vars:     Size  Location     Type
  7035 ;;  GPIO            1    9[BANK0 ] unsigned char 
  7036 ;;  ret_error       1    8[BANK0 ] unsigned char 
  7037 ;; Return value:  Size  Location     Type
  7038 ;;                  1    wreg      unsigned char 
  7039 ;; Registers used:
  7040 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  7041 ;; Tracked objects:
  7042 ;;		On entry : 0/0
  7043 ;;		On exit  : 0/0
  7044 ;;		Unchanged: 0/0
  7045 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7046 ;;      Params:         0       2       0       0       0
  7047 ;;      Locals:         0       2       0       0       0
  7048 ;;      Temps:          0       2       0       0       0
  7049 ;;      Totals:         0       6       0       0       0
  7050 ;;Total ram usage:        6 bytes
  7051 ;; Hardware stack levels used:    1
  7052 ;; Hardware stack levels required when called:    5
  7053 ;; This function calls:
  7054 ;;		Nothing
  7055 ;; This function is called by:
  7056 ;;		_pushButtonGetStatus
  7057 ;; This function uses a non-reentrant model
  7058 ;;
  7059                           
  7060                           
  7061                           ;psect for function _DIO_Read
  7062  0E79                     _DIO_Read:
  7063                           
  7064                           ;incstack = 0
  7065 ;; hardware stack exceeded
  7066                           ; Regs used in _DIO_Read: [wreg-fsr0h+status,2+status,0+btemp+1]
  7067                           ;DIO_Read@GPIO stored from wreg
  7068  0E79  1283               	bcf	3,5	;RP0=0, select bank0
  7069  0E7A  1303               	bcf	3,6	;RP1=0, select bank0
  7070  0E7B  00CF               	movwf	DIO_Read@GPIO
  7071  0E7C                     l3664:
  7072                           
  7073                           ;DIO.c: 236: ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data);DIO.c: 237
      +                          : {;DIO.c: 238:   uint8_t ret_error=0;
  7074  0E7C  01CE               	clrf	DIO_Read@ret_error
  7075                           
  7076                           ;DIO.c: 239:   switch (GPIO)
  7077  0E7D  2EB0               	goto	l3680
  7078  0E7E                     l3666:
  7079                           
  7080                           ;DIO.c: 241:     *data=(*((reg_type8_t)(0x0005)) & pins);
  7081  0E7E  0805               	movf	5,w	;volatile
  7082  0E7F  054A               	andwf	DIO_Read@pins,w
  7083  0E80  00FF               	movwf	btemp+1
  7084  0E81  084B               	movf	DIO_Read@data,w
  7085  0E82  0084               	movwf	4
  7086  0E83  087F               	movf	btemp+1,w
  7087  0E84  1383               	bcf	3,7	;select IRP bank0
  7088  0E85  0080               	movwf	0
  7089                           
  7090                           ;DIO.c: 242:     break;
  7091  0E86  2EC9               	goto	l3682
  7092  0E87                     l3668:
  7093                           
  7094                           ;DIO.c: 244:     *data=(*((reg_type8_t)(0x0006)) & pins);
  7095  0E87  0806               	movf	6,w	;volatile
  7096  0E88  054A               	andwf	DIO_Read@pins,w
  7097  0E89  00FF               	movwf	btemp+1
  7098  0E8A  084B               	movf	DIO_Read@data,w
  7099  0E8B  0084               	movwf	4
  7100  0E8C  087F               	movf	btemp+1,w
  7101  0E8D  1383               	bcf	3,7	;select IRP bank0
  7102  0E8E  0080               	movwf	0
  7103                           
  7104                           ;DIO.c: 245:     break;
  7105  0E8F  2EC9               	goto	l3682
  7106  0E90                     l3670:
  7107                           
  7108                           ;DIO.c: 247:     *data=(*((reg_type8_t)(0x0007)) & pins);
  7109  0E90  0807               	movf	7,w	;volatile
  7110  0E91  054A               	andwf	DIO_Read@pins,w
  7111  0E92  00FF               	movwf	btemp+1
  7112  0E93  084B               	movf	DIO_Read@data,w
  7113  0E94  0084               	movwf	4
  7114  0E95  087F               	movf	btemp+1,w
  7115  0E96  1383               	bcf	3,7	;select IRP bank0
  7116  0E97  0080               	movwf	0
  7117                           
  7118                           ;DIO.c: 248:     break;
  7119  0E98  2EC9               	goto	l3682
  7120  0E99                     l3672:
  7121                           
  7122                           ;DIO.c: 250:     *data=(*((reg_type8_t)(0x0008)) & pins);
  7123  0E99  0808               	movf	8,w	;volatile
  7124  0E9A  054A               	andwf	DIO_Read@pins,w
  7125  0E9B  00FF               	movwf	btemp+1
  7126  0E9C  084B               	movf	DIO_Read@data,w
  7127  0E9D  0084               	movwf	4
  7128  0E9E  087F               	movf	btemp+1,w
  7129  0E9F  1383               	bcf	3,7	;select IRP bank0
  7130  0EA0  0080               	movwf	0
  7131                           
  7132                           ;DIO.c: 251:                 break;
  7133  0EA1  2EC9               	goto	l3682
  7134  0EA2                     l3674:
  7135                           
  7136                           ;DIO.c: 253:     *data=(*((reg_type8_t)(0x0009)) & pins);
  7137  0EA2  0809               	movf	9,w	;volatile
  7138  0EA3  054A               	andwf	DIO_Read@pins,w
  7139  0EA4  00FF               	movwf	btemp+1
  7140  0EA5  084B               	movf	DIO_Read@data,w
  7141  0EA6  0084               	movwf	4
  7142  0EA7  087F               	movf	btemp+1,w
  7143  0EA8  1383               	bcf	3,7	;select IRP bank0
  7144  0EA9  0080               	movwf	0
  7145                           
  7146                           ;DIO.c: 254:     break;
  7147  0EAA  2EC9               	goto	l3682
  7148  0EAB                     l3676:
  7149                           
  7150                           ;DIO.c: 256:     ret_error += 14;
  7151  0EAB  300E               	movlw	14
  7152  0EAC  00FF               	movwf	btemp+1
  7153  0EAD  087F               	movf	btemp+1,w
  7154  0EAE  07CE               	addwf	DIO_Read@ret_error,f
  7155                           
  7156                           ;DIO.c: 257:     break;
  7157  0EAF  2EC9               	goto	l3682
  7158  0EB0                     l3680:
  7159  0EB0  084F               	movf	DIO_Read@GPIO,w
  7160  0EB1  00CC               	movwf	??_DIO_Read
  7161  0EB2  01CD               	clrf	??_DIO_Read+1
  7162                           
  7163                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7164                           ; Switch size 1, requested type "simple"
  7165                           ; Number of cases is 1, Range of values is 0 to 0
  7166                           ; switch strategies available:
  7167                           ; Name         Instructions Cycles
  7168                           ; simple_byte            4     3 (average)
  7169                           ; direct_byte           11     8 (fixed)
  7170                           ; jumptable            260     6 (fixed)
  7171                           ;	Chosen strategy is simple_byte
  7172  0EB3  084D               	movf	??_DIO_Read+1,w
  7173  0EB4  3A00               	xorlw	0	; case 0
  7174  0EB5  1903               	skipnz
  7175  0EB6  2EB8               	goto	l6486
  7176  0EB7  2EAB               	goto	l3676
  7177  0EB8                     l6486:
  7178                           
  7179                           ; Switch size 1, requested type "simple"
  7180                           ; Number of cases is 5, Range of values is 0 to 4
  7181                           ; switch strategies available:
  7182                           ; Name         Instructions Cycles
  7183                           ; simple_byte           16     9 (average)
  7184                           ; direct_byte           23     8 (fixed)
  7185                           ; jumptable            260     6 (fixed)
  7186                           ;	Chosen strategy is simple_byte
  7187  0EB8  084C               	movf	??_DIO_Read,w
  7188  0EB9  3A00               	xorlw	0	; case 0
  7189  0EBA  1903               	skipnz
  7190  0EBB  2E7E               	goto	l3666
  7191  0EBC  3A01               	xorlw	1	; case 1
  7192  0EBD  1903               	skipnz
  7193  0EBE  2E87               	goto	l3668
  7194  0EBF  3A03               	xorlw	3	; case 2
  7195  0EC0  1903               	skipnz
  7196  0EC1  2E90               	goto	l3670
  7197  0EC2  3A01               	xorlw	1	; case 3
  7198  0EC3  1903               	skipnz
  7199  0EC4  2E99               	goto	l3672
  7200  0EC5  3A07               	xorlw	7	; case 4
  7201  0EC6  1903               	skipnz
  7202  0EC7  2EA2               	goto	l3674
  7203  0EC8  2EAB               	goto	l3676
  7204  0EC9                     l3682:
  7205                           
  7206                           ;DIO.c: 259:    if(*data > 0)
  7207  0EC9  084B               	movf	DIO_Read@data,w
  7208  0ECA  0084               	movwf	4
  7209  0ECB  1383               	bcf	3,7	;select IRP bank0
  7210  0ECC  0800               	movf	0,w
  7211  0ECD  1903               	btfsc	3,2
  7212  0ECE  2ED0               	goto	u1171
  7213  0ECF  2ED1               	goto	u1170
  7214  0ED0                     u1171:
  7215  0ED0  2ED5               	goto	l391
  7216  0ED1                     u1170:
  7217  0ED1                     l3684:
  7218                           
  7219                           ;DIO.c: 260:    {;DIO.c: 261:     *data = 1;
  7220  0ED1  084B               	movf	DIO_Read@data,w
  7221  0ED2  0084               	movwf	4
  7222  0ED3  0180               	clrf	0
  7223  0ED4  0A80               	incf	0,f
  7224  0ED5                     l391:
  7225  0ED5  0008               	return
  7226  0ED6                     __end_of_DIO_Read:
  7227                           
  7228                           	psect	text38
  7229  0DC7                     __ptext38:	
  7230 ;; *************** function _checkmyisr *****************
  7231 ;; Defined at:
  7232 ;;		line 11 in file "interrupts.c"
  7233 ;; Parameters:    Size  Location     Type
  7234 ;;		None
  7235 ;; Auto vars:     Size  Location     Type
  7236 ;;		None
  7237 ;; Return value:  Size  Location     Type
  7238 ;;                  1    wreg      void 
  7239 ;; Registers used:
  7240 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7241 ;; Tracked objects:
  7242 ;;		On entry : 0/0
  7243 ;;		On exit  : 0/0
  7244 ;;		Unchanged: 0/0
  7245 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7246 ;;      Params:         0       0       0       0       0
  7247 ;;      Locals:         0       0       0       0       0
  7248 ;;      Temps:          0       4       0       0       0
  7249 ;;      Totals:         0       4       0       0       0
  7250 ;;Total ram usage:        4 bytes
  7251 ;; Hardware stack levels used:    1
  7252 ;; Hardware stack levels required when called:    4
  7253 ;; This function calls:
  7254 ;;		Absolute function
  7255 ;;		_adc_interrupt_routine
  7256 ;;		_seven_seg_POV
  7257 ;;		_timer0_interrupt_ovfRoutine
  7258 ;;		_timer1_interrupt_ovfRoutine
  7259 ;;		_timer_interrupt
  7260 ;; This function is called by:
  7261 ;;		Interrupt level 1
  7262 ;; This function uses a non-reentrant model
  7263 ;;
  7264                           
  7265                           
  7266                           ;psect for function _checkmyisr
  7267  0DC7                     _checkmyisr:
  7268  0DC7                     i1l4392:
  7269                           
  7270                           ;interrupts.c: 13: if((*((reg_type8_t)(0x000B)) & 0x04 )&&(*((reg_type8_t)(0x000B)) & 0x
      +                          20))
  7271  0DC7  1D0B               	btfss	11,2	;volatile
  7272  0DC8  2DCA               	goto	u180_21
  7273  0DC9  2DCB               	goto	u180_20
  7274  0DCA                     u180_21:
  7275  0DCA  2DD5               	goto	i1l4398
  7276  0DCB                     u180_20:
  7277  0DCB                     i1l4394:
  7278  0DCB  1E8B               	btfss	11,5	;volatile
  7279  0DCC  2DCE               	goto	u181_21
  7280  0DCD  2DCF               	goto	u181_20
  7281  0DCE                     u181_21:
  7282  0DCE  2DD5               	goto	i1l4398
  7283  0DCF                     u181_20:
  7284  0DCF                     i1l4396:
  7285                           
  7286                           ;interrupts.c: 14: {;interrupts.c: 16: TIMER0OVF_INT();
  7287  0DCF  083D               	movf	_TIMER0OVF_INT,w
  7288  0DD0  120A  118A  2063  120A  158A  	fcall	i1fptable
  7289  0DD5                     i1l4398:
  7290                           
  7291                           ;interrupts.c: 18: if((*((reg_type8_t)(0x000C)) & 0x01 )&&(*((reg_type8_t)(0x008C)) & 0x
      +                          01))
  7292  0DD5  1283               	bcf	3,5	;RP0=0, select bank0
  7293  0DD6  1303               	bcf	3,6	;RP1=0, select bank0
  7294  0DD7  1C0C               	btfss	12,0	;volatile
  7295  0DD8  2DDA               	goto	u182_21
  7296  0DD9  2DDB               	goto	u182_20
  7297  0DDA                     u182_21:
  7298  0DDA  2DE9               	goto	i1l4404
  7299  0DDB                     u182_20:
  7300  0DDB                     i1l4400:
  7301  0DDB  1683               	bsf	3,5	;RP0=1, select bank1
  7302  0DDC  1303               	bcf	3,6	;RP1=0, select bank1
  7303  0DDD  1C0C               	btfss	12,0	;volatile
  7304  0DDE  2DE0               	goto	u183_21
  7305  0DDF  2DE1               	goto	u183_20
  7306  0DE0                     u183_21:
  7307  0DE0  2DE9               	goto	i1l4404
  7308  0DE1                     u183_20:
  7309  0DE1                     i1l4402:
  7310                           
  7311                           ;interrupts.c: 19: {;interrupts.c: 21: TIMER1OVF_INT();
  7312  0DE1  1283               	bcf	3,5	;RP0=0, select bank0
  7313  0DE2  1303               	bcf	3,6	;RP1=0, select bank0
  7314  0DE3  083C               	movf	_TIMER1OVF_INT,w
  7315  0DE4  120A  118A  2063  120A  158A  	fcall	i1fptable
  7316  0DE9                     i1l4404:
  7317                           
  7318                           ;interrupts.c: 23: if((*((reg_type8_t)(0x000C)) & 0x02 )&&(*((reg_type8_t)(0x008C)) & 0x
      +                          02))
  7319  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  7320  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  7321  0DEB  1C8C               	btfss	12,1	;volatile
  7322  0DEC  2DEE               	goto	u184_21
  7323  0DED  2DEF               	goto	u184_20
  7324  0DEE                     u184_21:
  7325  0DEE  2DFD               	goto	i1l4410
  7326  0DEF                     u184_20:
  7327  0DEF                     i1l4406:
  7328  0DEF  1683               	bsf	3,5	;RP0=1, select bank1
  7329  0DF0  1303               	bcf	3,6	;RP1=0, select bank1
  7330  0DF1  1C8C               	btfss	12,1	;volatile
  7331  0DF2  2DF4               	goto	u185_21
  7332  0DF3  2DF5               	goto	u185_20
  7333  0DF4                     u185_21:
  7334  0DF4  2DFD               	goto	i1l4410
  7335  0DF5                     u185_20:
  7336  0DF5                     i1l4408:
  7337                           
  7338                           ;interrupts.c: 24: {;interrupts.c: 26: TIMER2OVF_INT();
  7339  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  7340  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  7341  0DF7  083B               	movf	_TIMER2OVF_INT,w
  7342  0DF8  120A  118A  2063  120A  158A  	fcall	i1fptable
  7343  0DFD                     i1l4410:
  7344                           
  7345                           ;interrupts.c: 28: if((*((reg_type8_t)(0x000C)) & 0x40 )&&(*((reg_type8_t)(0x008C)) & 0x
      +                          40))
  7346  0DFD  1283               	bcf	3,5	;RP0=0, select bank0
  7347  0DFE  1303               	bcf	3,6	;RP1=0, select bank0
  7348  0DFF  1F0C               	btfss	12,6	;volatile
  7349  0E00  2E02               	goto	u186_21
  7350  0E01  2E03               	goto	u186_20
  7351  0E02                     u186_21:
  7352  0E02  2E11               	goto	i1l130
  7353  0E03                     u186_20:
  7354  0E03                     i1l4412:
  7355  0E03  1683               	bsf	3,5	;RP0=1, select bank1
  7356  0E04  1303               	bcf	3,6	;RP1=0, select bank1
  7357  0E05  1F0C               	btfss	12,6	;volatile
  7358  0E06  2E08               	goto	u187_21
  7359  0E07  2E09               	goto	u187_20
  7360  0E08                     u187_21:
  7361  0E08  2E11               	goto	i1l130
  7362  0E09                     u187_20:
  7363  0E09                     i1l4414:
  7364                           
  7365                           ;interrupts.c: 29: {;interrupts.c: 31: ADC_INT();
  7366  0E09  1283               	bcf	3,5	;RP0=0, select bank0
  7367  0E0A  1303               	bcf	3,6	;RP1=0, select bank0
  7368  0E0B  0842               	movf	_ADC_INT,w
  7369  0E0C  120A  118A  2063  120A  158A  	fcall	i1fptable
  7370  0E11                     i1l130:
  7371  0E11  1283               	bcf	3,5	;RP0=0, select bank0
  7372  0E12  1303               	bcf	3,6	;RP1=0, select bank0
  7373  0E13  0849               	movf	??_checkmyisr+3,w
  7374  0E14  00FF               	movwf	btemp+1
  7375  0E15  0848               	movf	??_checkmyisr+2,w
  7376  0E16  008A               	movwf	10
  7377  0E17  0847               	movf	??_checkmyisr+1,w
  7378  0E18  0084               	movwf	4
  7379  0E19  0E46               	swapf	??_checkmyisr^0,w
  7380  0E1A  0083               	movwf	3
  7381  0E1B  0EFE               	swapf	btemp,f
  7382  0E1C  0E7E               	swapf	btemp,w
  7383  0E1D  0009               	retfie
  7384  0E1E                     __end_of_checkmyisr:
  7385                           
  7386                           	psect	intentry
  7387  0004                     __pintentry:	
  7388                           ;incstack = 0
  7389 ;; hardware stack exceeded
  7390                           ; Regs used in _checkmyisr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7391                           
  7392  0004                     interrupt_function:
  7393  007E                     saved_w	set	btemp
  7394  0004  00FE               	movwf	btemp
  7395  0005  0E03               	swapf	3,w
  7396  0006  1283               	bcf	3,5	;RP0=0, select bank0
  7397  0007  1303               	bcf	3,6	;RP1=0, select bank0
  7398  0008  00C6               	movwf	??_checkmyisr
  7399  0009  0804               	movf	4,w
  7400  000A  00C7               	movwf	??_checkmyisr+1
  7401  000B  080A               	movf	10,w
  7402  000C  00C8               	movwf	??_checkmyisr+2
  7403  000D  087F               	movf	btemp+1,w
  7404  000E  00C9               	movwf	??_checkmyisr+3
  7405  000F  120A  158A  2DC7   	ljmp	_checkmyisr
  7406                           
  7407                           	psect	text39
  7408  09D7                     __ptext39:	
  7409 ;; *************** function _timer1_interrupt_ovfRoutine *****************
  7410 ;; Defined at:
  7411 ;;		line 116 in file "Timer.c"
  7412 ;; Parameters:    Size  Location     Type
  7413 ;;		None
  7414 ;; Auto vars:     Size  Location     Type
  7415 ;;		None
  7416 ;; Return value:  Size  Location     Type
  7417 ;;                  1    wreg      void 
  7418 ;; Registers used:
  7419 ;;		wreg, status,2, status,0, btemp+1
  7420 ;; Tracked objects:
  7421 ;;		On entry : 0/0
  7422 ;;		On exit  : 0/0
  7423 ;;		Unchanged: 0/0
  7424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7425 ;;      Params:         0       0       0       0       0
  7426 ;;      Locals:         0       0       0       0       0
  7427 ;;      Temps:          0       0       0       0       0
  7428 ;;      Totals:         0       0       0       0       0
  7429 ;;Total ram usage:        0 bytes
  7430 ;; Hardware stack levels used:    1
  7431 ;; This function calls:
  7432 ;;		Nothing
  7433 ;; This function is called by:
  7434 ;;		_checkmyisr
  7435 ;; This function uses a non-reentrant model
  7436 ;;
  7437                           
  7438                           
  7439                           ;psect for function _timer1_interrupt_ovfRoutine
  7440  09D7                     _timer1_interrupt_ovfRoutine:
  7441  09D7                     i1l4374:	
  7442                           ;incstack = 0
  7443                           ; Regs used in _timer1_interrupt_ovfRoutine: [wreg+status,2+status,0+btemp+1]
  7444                           
  7445                           
  7446                           ;Timer.c: 119:  *((reg_type8_t)(0x0087))=0x00;
  7447  09D7  1683               	bsf	3,5	;RP0=1, select bank1
  7448  09D8  1303               	bcf	3,6	;RP1=0, select bank1
  7449  09D9  0187               	clrf	7	;volatile
  7450  09DA                     i1l4376:
  7451                           
  7452                           ;Timer.c: 120:  *((reg_type8_t)(0x0007)) ^= 0xff;
  7453  09DA  30FF               	movlw	255
  7454  09DB  00FF               	movwf	btemp+1
  7455  09DC  087F               	movf	btemp+1,w
  7456  09DD  1283               	bcf	3,5	;RP0=0, select bank0
  7457  09DE  1303               	bcf	3,6	;RP1=0, select bank0
  7458  09DF  0687               	xorwf	7,f	;volatile
  7459  09E0                     i1l4378:
  7460                           
  7461                           ;Timer.c: 122: *((reg_type8_t)(0x0007)) ^= 0xFF;
  7462  09E0  30FF               	movlw	255
  7463  09E1  00FF               	movwf	btemp+1
  7464  09E2  087F               	movf	btemp+1,w
  7465  09E3  0687               	xorwf	7,f	;volatile
  7466  09E4                     i1l4380:
  7467                           
  7468                           ;Timer.c: 124: *((reg_type8_t)(0x000C)) &= (~0x01);
  7469  09E4  30FE               	movlw	254
  7470  09E5  00FF               	movwf	btemp+1
  7471  09E6  087F               	movf	btemp+1,w
  7472  09E7  058C               	andwf	12,f	;volatile
  7473  09E8                     i1l570:
  7474  09E8  0008               	return
  7475  09E9                     __end_of_timer1_interrupt_ovfRoutine:
  7476                           
  7477                           	psect	text40
  7478  09B7                     __ptext40:	
  7479 ;; *************** function _timer0_interrupt_ovfRoutine *****************
  7480 ;; Defined at:
  7481 ;;		line 108 in file "Timer.c"
  7482 ;; Parameters:    Size  Location     Type
  7483 ;;		None
  7484 ;; Auto vars:     Size  Location     Type
  7485 ;;		None
  7486 ;; Return value:  Size  Location     Type
  7487 ;;                  1    wreg      void 
  7488 ;; Registers used:
  7489 ;;		wreg, status,2, status,0, btemp+1
  7490 ;; Tracked objects:
  7491 ;;		On entry : 0/0
  7492 ;;		On exit  : 0/0
  7493 ;;		Unchanged: 0/0
  7494 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7495 ;;      Params:         0       0       0       0       0
  7496 ;;      Locals:         0       0       0       0       0
  7497 ;;      Temps:          0       0       0       0       0
  7498 ;;      Totals:         0       0       0       0       0
  7499 ;;Total ram usage:        0 bytes
  7500 ;; Hardware stack levels used:    1
  7501 ;; This function calls:
  7502 ;;		Nothing
  7503 ;; This function is called by:
  7504 ;;		_checkmyisr
  7505 ;; This function uses a non-reentrant model
  7506 ;;
  7507                           
  7508                           
  7509                           ;psect for function _timer0_interrupt_ovfRoutine
  7510  09B7                     _timer0_interrupt_ovfRoutine:
  7511  09B7                     i1l4366:	
  7512                           ;incstack = 0
  7513                           ; Regs used in _timer0_interrupt_ovfRoutine: [wreg+status,2+status,0+btemp+1]
  7514                           
  7515  09B7  1683               	bsf	3,5	;RP0=1, select bank1
  7516  09B8  1303               	bcf	3,6	;RP1=0, select bank1
  7517  09B9  0187               	clrf	7	;volatile
  7518  09BA                     i1l4368:
  7519                           
  7520                           ;Timer.c: 110: *((reg_type8_t)(0x001F)) |=0x04;
  7521  09BA  1283               	bcf	3,5	;RP0=0, select bank0
  7522  09BB  1303               	bcf	3,6	;RP1=0, select bank0
  7523  09BC  151F               	bsf	31,2	;volatile
  7524  09BD                     i1l4370:
  7525                           
  7526                           ;Timer.c: 111: *((reg_type8_t)(0x0007)) ^= 0xFF;
  7527  09BD  30FF               	movlw	255
  7528  09BE  00FF               	movwf	btemp+1
  7529  09BF  087F               	movf	btemp+1,w
  7530  09C0  0687               	xorwf	7,f	;volatile
  7531  09C1                     i1l4372:
  7532                           
  7533                           ;Timer.c: 114: *((reg_type8_t)(0x000B)) &= (~0x04);
  7534  09C1  30FB               	movlw	251
  7535  09C2  00FF               	movwf	btemp+1
  7536  09C3  087F               	movf	btemp+1,w
  7537  09C4  058B               	andwf	11,f	;volatile
  7538  09C5                     i1l567:
  7539  09C5  0008               	return
  7540  09C6                     __end_of_timer0_interrupt_ovfRoutine:
  7541                           
  7542                           	psect	text41
  7543  0A69                     __ptext41:	
  7544 ;; *************** function _seven_seg_POV *****************
  7545 ;; Defined at:
  7546 ;;		line 26 in file "seven_segment.c"
  7547 ;; Parameters:    Size  Location     Type
  7548 ;;		None
  7549 ;; Auto vars:     Size  Location     Type
  7550 ;;		None
  7551 ;; Return value:  Size  Location     Type
  7552 ;;                  1    wreg      void 
  7553 ;; Registers used:
  7554 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7555 ;; Tracked objects:
  7556 ;;		On entry : 0/0
  7557 ;;		On exit  : 0/0
  7558 ;;		Unchanged: 0/0
  7559 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7560 ;;      Params:         0       0       0       0       0
  7561 ;;      Locals:         0       0       0       0       0
  7562 ;;      Temps:          0       0       0       0       0
  7563 ;;      Totals:         0       0       0       0       0
  7564 ;;Total ram usage:        0 bytes
  7565 ;; Hardware stack levels used:    1
  7566 ;; Hardware stack levels required when called:    3
  7567 ;; This function calls:
  7568 ;;		_sevenSegEnable
  7569 ;; This function is called by:
  7570 ;;		_checkmyisr
  7571 ;; This function uses a non-reentrant model
  7572 ;;
  7573                           
  7574                           
  7575                           ;psect for function _seven_seg_POV
  7576  0A69                     _seven_seg_POV:
  7577  0A69                     i1l4314:	
  7578                           ;incstack = 0
  7579 ;; hardware stack exceeded
  7580                           ; Regs used in _seven_seg_POV: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7581                           
  7582                           
  7583                           ;seven_segment.c: 28:     if(ovf_counter > 50){
  7584  0A69  3033               	movlw	51
  7585  0A6A  1283               	bcf	3,5	;RP0=0, select bank0
  7586  0A6B  1303               	bcf	3,6	;RP1=0, select bank0
  7587  0A6C  0241               	subwf	_ovf_counter,w
  7588  0A6D  1C03               	skipc
  7589  0A6E  2A70               	goto	u173_21
  7590  0A6F  2A71               	goto	u173_20
  7591  0A70                     u173_21:
  7592  0A70  2A91               	goto	i1l4330
  7593  0A71                     u173_20:
  7594  0A71                     i1l4316:
  7595                           
  7596                           ;seven_segment.c: 29:     *((reg_type8_t)(0x0008))=0x00;
  7597  0A71  0188               	clrf	8	;volatile
  7598  0A72                     i1l4318:
  7599                           
  7600                           ;seven_segment.c: 30:     sevenSegEnable(disp_counter);
  7601  0A72  0840               	movf	_disp_counter,w
  7602  0A73  120A  158A  257D  120A  158A  	fcall	_sevenSegEnable
  7603  0A78                     i1l4320:
  7604                           
  7605                           ;seven_segment.c: 31:     *((reg_type8_t)(0x0008)) = Segments_Code[arr_display[disp_coun
      +                          ter]];
  7606  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  7607  0A79  1303               	bcf	3,6	;RP1=0, select bank0
  7608  0A7A  0840               	movf	_disp_counter,w
  7609  0A7B  3E2A               	addlw	(low (_arr_display| 0))& (0+255)
  7610  0A7C  0084               	movwf	4
  7611  0A7D  1383               	bcf	3,7	;select IRP bank0
  7612  0A7E  0800               	movf	0,w
  7613  0A7F  3EA0               	addlw	(low (_Segments_Code| 0))& (0+255)
  7614  0A80  0084               	movwf	4
  7615  0A81  0800               	movf	0,w
  7616  0A82  00FF               	movwf	btemp+1
  7617  0A83  087F               	movf	btemp+1,w
  7618  0A84  0088               	movwf	8	;volatile
  7619  0A85                     i1l4322:
  7620                           
  7621                           ;seven_segment.c: 32: ovf_counter=0;
  7622  0A85  01C1               	clrf	_ovf_counter
  7623  0A86                     i1l4324:
  7624                           
  7625                           ;seven_segment.c: 33:  disp_counter++;
  7626  0A86  3001               	movlw	1
  7627  0A87  00FF               	movwf	btemp+1
  7628  0A88  087F               	movf	btemp+1,w
  7629  0A89  07C0               	addwf	_disp_counter,f
  7630  0A8A                     i1l4326:
  7631                           
  7632                           ;seven_segment.c: 34:     if(disp_counter == 2)
  7633  0A8A  3002               	movlw	2
  7634  0A8B  0640               	xorwf	_disp_counter,w
  7635  0A8C  1D03               	btfss	3,2
  7636  0A8D  2A8F               	goto	u174_21
  7637  0A8E  2A90               	goto	u174_20
  7638  0A8F                     u174_21:
  7639  0A8F  2A91               	goto	i1l4330
  7640  0A90                     u174_20:
  7641  0A90                     i1l4328:
  7642                           
  7643                           ;seven_segment.c: 35:         disp_counter = 0;
  7644  0A90  01C0               	clrf	_disp_counter
  7645  0A91                     i1l4330:
  7646                           
  7647                           ;seven_segment.c: 37:    ovf_counter++;
  7648  0A91  3001               	movlw	1
  7649  0A92  00FF               	movwf	btemp+1
  7650  0A93  087F               	movf	btemp+1,w
  7651  0A94  07C1               	addwf	_ovf_counter,f
  7652  0A95                     i1l4332:
  7653                           
  7654                           ;seven_segment.c: 39: *((reg_type8_t)(0x000B)) &= (~0x04);
  7655  0A95  30FB               	movlw	251
  7656  0A96  00FF               	movwf	btemp+1
  7657  0A97  087F               	movf	btemp+1,w
  7658  0A98  058B               	andwf	11,f	;volatile
  7659  0A99                     i1l74:
  7660  0A99  0008               	return
  7661  0A9A                     __end_of_seven_seg_POV:
  7662                           
  7663                           	psect	text42
  7664  0950                     __ptext42:	
  7665 ;; *************** function _timer_interrupt *****************
  7666 ;; Defined at:
  7667 ;;		line 220 in file "SOS.c"
  7668 ;; Parameters:    Size  Location     Type
  7669 ;;		None
  7670 ;; Auto vars:     Size  Location     Type
  7671 ;;		None
  7672 ;; Return value:  Size  Location     Type
  7673 ;;                  1    wreg      void 
  7674 ;; Registers used:
  7675 ;;		wreg, status,2, status,0, btemp+1
  7676 ;; Tracked objects:
  7677 ;;		On entry : 0/0
  7678 ;;		On exit  : 0/0
  7679 ;;		Unchanged: 0/0
  7680 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7681 ;;      Params:         0       0       0       0       0
  7682 ;;      Locals:         0       0       0       0       0
  7683 ;;      Temps:          0       0       0       0       0
  7684 ;;      Totals:         0       0       0       0       0
  7685 ;;Total ram usage:        0 bytes
  7686 ;; Hardware stack levels used:    1
  7687 ;; This function calls:
  7688 ;;		Nothing
  7689 ;; This function is called by:
  7690 ;;		_SOS_Init
  7691 ;;		_checkmyisr
  7692 ;; This function uses a non-reentrant model
  7693 ;;
  7694                           
  7695                           
  7696                           ;psect for function _timer_interrupt
  7697  0950                     _timer_interrupt:
  7698  0950                     i1l4364:	
  7699                           ;incstack = 0
  7700                           ; Regs used in _timer_interrupt: [wreg+status,2+status,0+btemp+1]
  7701                           
  7702                           
  7703                           ;SOS.c: 222: u8Excution_to_be_done++;
  7704  0950  3001               	movlw	1
  7705  0951  00FF               	movwf	btemp+1
  7706  0952  087F               	movf	btemp+1,w
  7707  0953  1283               	bcf	3,5	;RP0=0, select bank0
  7708  0954  1303               	bcf	3,6	;RP1=0, select bank0
  7709  0955  07B4               	addwf	_u8Excution_to_be_done,f	;volatile
  7710                           
  7711                           ;SOS.c: 223: *((reg_type8_t)(0x000C)) &= (~0x02);
  7712  0956  30FD               	movlw	253
  7713  0957  00FF               	movwf	btemp+1
  7714  0958  087F               	movf	btemp+1,w
  7715  0959  058C               	andwf	12,f	;volatile
  7716  095A                     i1l502:
  7717  095A  0008               	return
  7718  095B                     __end_of_timer_interrupt:
  7719                           
  7720                           	psect	text43
  7721  0D7D                     __ptext43:	
  7722 ;; *************** function _sevenSegEnable *****************
  7723 ;; Defined at:
  7724 ;;		line 45 in file "seven_segment.c"
  7725 ;; Parameters:    Size  Location     Type
  7726 ;;  segment_id      1    wreg     unsigned char 
  7727 ;; Auto vars:     Size  Location     Type
  7728 ;;  segment_id      1   12[COMMON] unsigned char 
  7729 ;;  ret             1   13[COMMON] unsigned char 
  7730 ;; Return value:  Size  Location     Type
  7731 ;;                  1    wreg      unsigned char 
  7732 ;; Registers used:
  7733 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7734 ;; Tracked objects:
  7735 ;;		On entry : 0/0
  7736 ;;		On exit  : 0/0
  7737 ;;		Unchanged: 0/0
  7738 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7739 ;;      Params:         0       0       0       0       0
  7740 ;;      Locals:         2       0       0       0       0
  7741 ;;      Temps:          2       0       0       0       0
  7742 ;;      Totals:         4       0       0       0       0
  7743 ;;Total ram usage:        4 bytes
  7744 ;; Hardware stack levels used:    1
  7745 ;; Hardware stack levels required when called:    2
  7746 ;; This function calls:
  7747 ;;		i1_DIO_Write
  7748 ;;		i1_sevenSegDisable
  7749 ;; This function is called by:
  7750 ;;		_seven_seg_POV
  7751 ;; This function uses a non-reentrant model
  7752 ;;
  7753                           
  7754                           
  7755                           ;psect for function _sevenSegEnable
  7756  0D7D                     _sevenSegEnable:
  7757                           
  7758                           ;incstack = 0
  7759 ;; hardware stack exceeded
  7760                           ; Regs used in _sevenSegEnable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7761                           ;sevenSegEnable@segment_id stored from wreg
  7762  0D7D  00FC               	movwf	sevenSegEnable@segment_id
  7763  0D7E                     i1l4180:
  7764                           
  7765                           ;seven_segment.c: 45: ERROR_STATUS sevenSegEnable(uint8_t segment_id);seven_segment.c: 4
      +                          6: {uint8_t ret=0;
  7766  0D7E  01FD               	clrf	sevenSegEnable@ret
  7767                           
  7768                           ;seven_segment.c: 47: switch(segment_id)
  7769  0D7F  2DB6               	goto	i1l4188
  7770  0D80                     i1l4182:
  7771                           
  7772                           ;seven_segment.c: 50: ret += sevenSegDisable(SEG_1);
  7773  0D80  3001               	movlw	1
  7774  0D81  120A  158A  229A  120A  158A  	fcall	i1_sevenSegDisable
  7775  0D86  00FF               	movwf	btemp+1
  7776  0D87  087F               	movf	btemp+1,w
  7777  0D88  07FD               	addwf	sevenSegEnable@ret,f
  7778                           
  7779                           ;seven_segment.c: 51: ret +=DIO_Write(0,0x04,0xFF);
  7780  0D89  3004               	movlw	4
  7781  0D8A  00FF               	movwf	btemp+1
  7782  0D8B  087F               	movf	btemp+1,w
  7783  0D8C  00F0               	movwf	i1DIO_Write@pins
  7784  0D8D  30FF               	movlw	255
  7785  0D8E  00FF               	movwf	btemp+1
  7786  0D8F  087F               	movf	btemp+1,w
  7787  0D90  00F1               	movwf	i1DIO_Write@value
  7788  0D91  3000               	movlw	0
  7789  0D92  120A  118A  2428  120A  158A  	fcall	i1_DIO_Write
  7790  0D97  00FF               	movwf	btemp+1
  7791  0D98  087F               	movf	btemp+1,w
  7792  0D99  07FD               	addwf	sevenSegEnable@ret,f
  7793                           
  7794                           ;seven_segment.c: 52: break;
  7795  0D9A  2DC6               	goto	i1l81
  7796  0D9B                     i1l4184:
  7797                           
  7798                           ;seven_segment.c: 54: ret += sevenSegDisable(SEG_0);
  7799  0D9B  3000               	movlw	0
  7800  0D9C  120A  158A  229A  120A  158A  	fcall	i1_sevenSegDisable
  7801  0DA1  00FF               	movwf	btemp+1
  7802  0DA2  087F               	movf	btemp+1,w
  7803  0DA3  07FD               	addwf	sevenSegEnable@ret,f
  7804                           
  7805                           ;seven_segment.c: 55: ret +=DIO_Write(0,0x08,0xFF);
  7806  0DA4  3008               	movlw	8
  7807  0DA5  00FF               	movwf	btemp+1
  7808  0DA6  087F               	movf	btemp+1,w
  7809  0DA7  00F0               	movwf	i1DIO_Write@pins
  7810  0DA8  30FF               	movlw	255
  7811  0DA9  00FF               	movwf	btemp+1
  7812  0DAA  087F               	movf	btemp+1,w
  7813  0DAB  00F1               	movwf	i1DIO_Write@value
  7814  0DAC  3000               	movlw	0
  7815  0DAD  120A  118A  2428  120A  158A  	fcall	i1_DIO_Write
  7816  0DB2  00FF               	movwf	btemp+1
  7817  0DB3  087F               	movf	btemp+1,w
  7818  0DB4  07FD               	addwf	sevenSegEnable@ret,f
  7819                           
  7820                           ;seven_segment.c: 56: break;
  7821  0DB5  2DC6               	goto	i1l81
  7822  0DB6                     i1l4188:
  7823  0DB6  087C               	movf	sevenSegEnable@segment_id,w
  7824  0DB7  00FA               	movwf	??_sevenSegEnable
  7825  0DB8  01FB               	clrf	??_sevenSegEnable+1
  7826                           
  7827                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7828                           ; Switch size 1, requested type "simple"
  7829                           ; Number of cases is 1, Range of values is 0 to 0
  7830                           ; switch strategies available:
  7831                           ; Name         Instructions Cycles
  7832                           ; simple_byte            4     3 (average)
  7833                           ; direct_byte           11     8 (fixed)
  7834                           ; jumptable            260     6 (fixed)
  7835                           ;	Chosen strategy is simple_byte
  7836  0DB9  087B               	movf	??_sevenSegEnable+1,w
  7837  0DBA  3A00               	xorlw	0	; case 0
  7838  0DBB  1903               	skipnz
  7839  0DBC  2DBE               	goto	i1l6488
  7840  0DBD  2DC6               	goto	i1l81
  7841  0DBE                     i1l6488:
  7842                           
  7843                           ; Switch size 1, requested type "simple"
  7844                           ; Number of cases is 2, Range of values is 0 to 1
  7845                           ; switch strategies available:
  7846                           ; Name         Instructions Cycles
  7847                           ; simple_byte            7     4 (average)
  7848                           ; direct_byte           14     8 (fixed)
  7849                           ; jumptable            260     6 (fixed)
  7850                           ;	Chosen strategy is simple_byte
  7851  0DBE  087A               	movf	??_sevenSegEnable,w
  7852  0DBF  3A00               	xorlw	0	; case 0
  7853  0DC0  1903               	skipnz
  7854  0DC1  2D80               	goto	i1l4182
  7855  0DC2  3A01               	xorlw	1	; case 1
  7856  0DC3  1903               	skipnz
  7857  0DC4  2D9B               	goto	i1l4184
  7858  0DC5  2DC6               	goto	i1l81
  7859  0DC6                     i1l81:
  7860  0DC6  0008               	return
  7861  0DC7                     __end_of_sevenSegEnable:
  7862                           
  7863                           	psect	text44
  7864  0A9A                     __ptext44:	
  7865 ;; *************** function i1_sevenSegDisable *****************
  7866 ;; Defined at:
  7867 ;;		line 67 in file "seven_segment.c"
  7868 ;; Parameters:    Size  Location     Type
  7869 ;;  en_segment_i    1    wreg     enum E96
  7870 ;; Auto vars:     Size  Location     Type
  7871 ;;  en_segment_i    1    8[COMMON] enum E96
  7872 ;;  ret             1    9[COMMON] unsigned char 
  7873 ;; Return value:  Size  Location     Type
  7874 ;;                  1    wreg      unsigned char 
  7875 ;; Registers used:
  7876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7877 ;; Tracked objects:
  7878 ;;		On entry : 0/0
  7879 ;;		On exit  : 0/0
  7880 ;;		Unchanged: 0/0
  7881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7882 ;;      Params:         0       0       0       0       0
  7883 ;;      Locals:         2       0       0       0       0
  7884 ;;      Temps:          2       0       0       0       0
  7885 ;;      Totals:         4       0       0       0       0
  7886 ;;Total ram usage:        4 bytes
  7887 ;; Hardware stack levels used:    1
  7888 ;; Hardware stack levels required when called:    1
  7889 ;; This function calls:
  7890 ;;		i1_DIO_Write
  7891 ;; This function is called by:
  7892 ;;		_sevenSegEnable
  7893 ;; This function uses a non-reentrant model
  7894 ;;
  7895                           
  7896                           
  7897                           ;psect for function i1_sevenSegDisable
  7898  0A9A                     i1_sevenSegDisable:
  7899                           
  7900                           ;incstack = 0
  7901 ;; hardware stack exceeded
  7902                           ; Regs used in i1_sevenSegDisable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7903                           ;i1sevenSegDisable@en_segment_id stored from wreg
  7904  0A9A  00F8               	movwf	i1sevenSegDisable@en_segment_id
  7905  0A9B                     i1l4142:
  7906                           
  7907                           ;seven_segment.c: 67: ERROR_STATUS sevenSegDisable(En_SevenSegId_t en_segment_id);seven_
      +                          segment.c: 68: {;seven_segment.c: 70: uint8_t ret=0;
  7908  0A9B  01F9               	clrf	i1sevenSegDisable@ret
  7909                           
  7910                           ;seven_segment.c: 71: switch(en_segment_id)
  7911  0A9C  2ABB               	goto	i1l4150
  7912  0A9D                     i1l4144:
  7913                           
  7914                           ;seven_segment.c: 74: ret +=DIO_Write(0,0x04,0);
  7915  0A9D  3004               	movlw	4
  7916  0A9E  00FF               	movwf	btemp+1
  7917  0A9F  087F               	movf	btemp+1,w
  7918  0AA0  00F0               	movwf	i1DIO_Write@pins
  7919  0AA1  01F1               	clrf	i1DIO_Write@value
  7920  0AA2  3000               	movlw	0
  7921  0AA3  120A  118A  2428  120A  158A  	fcall	i1_DIO_Write
  7922  0AA8  00FF               	movwf	btemp+1
  7923  0AA9  087F               	movf	btemp+1,w
  7924  0AAA  07F9               	addwf	i1sevenSegDisable@ret,f
  7925                           
  7926                           ;seven_segment.c: 75: break;
  7927  0AAB  2ACB               	goto	i1l4152
  7928  0AAC                     i1l4146:
  7929                           
  7930                           ;seven_segment.c: 77: ret +=DIO_Write(0,0x08,0);
  7931  0AAC  3008               	movlw	8
  7932  0AAD  00FF               	movwf	btemp+1
  7933  0AAE  087F               	movf	btemp+1,w
  7934  0AAF  00F0               	movwf	i1DIO_Write@pins
  7935  0AB0  01F1               	clrf	i1DIO_Write@value
  7936  0AB1  3000               	movlw	0
  7937  0AB2  120A  118A  2428  120A  158A  	fcall	i1_DIO_Write
  7938  0AB7  00FF               	movwf	btemp+1
  7939  0AB8  087F               	movf	btemp+1,w
  7940  0AB9  07F9               	addwf	i1sevenSegDisable@ret,f
  7941                           
  7942                           ;seven_segment.c: 78: break;
  7943  0ABA  2ACB               	goto	i1l4152
  7944  0ABB                     i1l4150:
  7945  0ABB  0878               	movf	i1sevenSegDisable@en_segment_id,w
  7946  0ABC  00F6               	movwf	??i1_sevenSegDisable
  7947  0ABD  01F7               	clrf	??i1_sevenSegDisable+1
  7948                           
  7949                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7950                           ; Switch size 1, requested type "simple"
  7951                           ; Number of cases is 1, Range of values is 0 to 0
  7952                           ; switch strategies available:
  7953                           ; Name         Instructions Cycles
  7954                           ; simple_byte            4     3 (average)
  7955                           ; direct_byte           11     8 (fixed)
  7956                           ; jumptable            260     6 (fixed)
  7957                           ;	Chosen strategy is simple_byte
  7958  0ABE  0877               	movf	??i1_sevenSegDisable+1,w
  7959  0ABF  3A00               	xorlw	0	; case 0
  7960  0AC0  1903               	skipnz
  7961  0AC1  2AC3               	goto	i1l6490
  7962  0AC2  2ACB               	goto	i1l4152
  7963  0AC3                     i1l6490:
  7964                           
  7965                           ; Switch size 1, requested type "simple"
  7966                           ; Number of cases is 2, Range of values is 0 to 1
  7967                           ; switch strategies available:
  7968                           ; Name         Instructions Cycles
  7969                           ; simple_byte            7     4 (average)
  7970                           ; direct_byte           14     8 (fixed)
  7971                           ; jumptable            260     6 (fixed)
  7972                           ;	Chosen strategy is simple_byte
  7973  0AC3  0876               	movf	??i1_sevenSegDisable,w
  7974  0AC4  3A00               	xorlw	0	; case 0
  7975  0AC5  1903               	skipnz
  7976  0AC6  2A9D               	goto	i1l4144
  7977  0AC7  3A01               	xorlw	1	; case 1
  7978  0AC8  1903               	skipnz
  7979  0AC9  2AAC               	goto	i1l4146
  7980  0ACA  2ACB               	goto	i1l4152
  7981  0ACB                     i1l4152:
  7982                           
  7983                           ;seven_segment.c: 80: return ret;
  7984  0ACB  0879               	movf	i1sevenSegDisable@ret,w
  7985  0ACC                     i1l88:
  7986  0ACC  0008               	return
  7987  0ACD                     __end_ofi1_sevenSegDisable:
  7988                           
  7989                           	psect	text45
  7990  0428                     __ptext45:	
  7991 ;; *************** function i1_DIO_Write *****************
  7992 ;; Defined at:
  7993 ;;		line 132 in file "DIO.c"
  7994 ;; Parameters:    Size  Location     Type
  7995 ;;  GPIO            1    wreg     unsigned char 
  7996 ;;  pins            1    0[COMMON] unsigned char 
  7997 ;;  value           1    1[COMMON] unsigned char 
  7998 ;; Auto vars:     Size  Location     Type
  7999 ;;  GPIO            1    5[COMMON] unsigned char 
  8000 ;;  ret_error       1    4[COMMON] unsigned char 
  8001 ;; Return value:  Size  Location     Type
  8002 ;;                  1    wreg      unsigned char 
  8003 ;; Registers used:
  8004 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8005 ;; Tracked objects:
  8006 ;;		On entry : 0/0
  8007 ;;		On exit  : 0/0
  8008 ;;		Unchanged: 0/0
  8009 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8010 ;;      Params:         2       0       0       0       0
  8011 ;;      Locals:         2       0       0       0       0
  8012 ;;      Temps:          2       0       0       0       0
  8013 ;;      Totals:         6       0       0       0       0
  8014 ;;Total ram usage:        6 bytes
  8015 ;; Hardware stack levels used:    1
  8016 ;; This function calls:
  8017 ;;		Nothing
  8018 ;; This function is called by:
  8019 ;;		_sevenSegEnable
  8020 ;;		i1_sevenSegDisable
  8021 ;; This function uses a non-reentrant model
  8022 ;;
  8023                           
  8024                           
  8025                           ;psect for function i1_DIO_Write
  8026  0428                     i1_DIO_Write:
  8027                           
  8028                           ;incstack = 0
  8029 ;; hardware stack exceeded
  8030                           ; Regs used in i1_DIO_Write: [wreg-fsr0h+status,2+status,0+btemp+1]
  8031                           ;i1DIO_Write@GPIO stored from wreg
  8032  0428  00F5               	movwf	i1DIO_Write@GPIO
  8033  0429                     i1l3836:
  8034                           
  8035                           ;DIO.c: 132: ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value);DIO.c: 1
      +                          33: { uint8_t ret_error=0;
  8036  0429  01F4               	clrf	i1DIO_Write@ret_error
  8037  042A                     i1l3838:
  8038                           
  8039                           ;DIO.c: 135:   static uint8_t first_powerup = 0;;DIO.c: 136: if (first_powerup == 0) {
  8040  042A  1283               	bcf	3,5	;RP0=0, select bank0
  8041  042B  1303               	bcf	3,6	;RP1=0, select bank0
  8042  042C  0838               	movf	DIO_Write@first_powerup,w
  8043  042D  1D03               	btfss	3,2
  8044  042E  2C30               	goto	u146_21
  8045  042F  2C31               	goto	u146_20
  8046  0430                     u146_21:
  8047  0430  2CC8               	goto	i1l3894
  8048  0431                     u146_20:
  8049  0431  2C3C               	goto	i1l3854
  8050  0432                     i1l3842:
  8051                           
  8052                           ;DIO.c: 139:   *((reg_type8_t)(0x0005))=0x00;
  8053  0432  0185               	clrf	5	;volatile
  8054                           
  8055                           ;DIO.c: 140:   break;
  8056  0433  2C55               	goto	i1l3856
  8057  0434                     i1l3844:
  8058                           
  8059                           ;DIO.c: 142:   *((reg_type8_t)(0x0006))=0x00;
  8060  0434  0186               	clrf	6	;volatile
  8061                           
  8062                           ;DIO.c: 143:   break;
  8063  0435  2C55               	goto	i1l3856
  8064  0436                     i1l3846:
  8065                           
  8066                           ;DIO.c: 145:   *((reg_type8_t)(0x0007))=0x00;
  8067  0436  0187               	clrf	7	;volatile
  8068                           
  8069                           ;DIO.c: 146:   break;
  8070  0437  2C55               	goto	i1l3856
  8071  0438                     i1l3848:
  8072                           
  8073                           ;DIO.c: 148:   *((reg_type8_t)(0x0008))=0x00;
  8074  0438  0188               	clrf	8	;volatile
  8075                           
  8076                           ;DIO.c: 149:   break;
  8077  0439  2C55               	goto	i1l3856
  8078  043A                     i1l3850:
  8079                           
  8080                           ;DIO.c: 151:   *((reg_type8_t)(0x0009))=0x00;
  8081  043A  0189               	clrf	9	;volatile
  8082                           
  8083                           ;DIO.c: 152:   break;
  8084  043B  2C55               	goto	i1l3856
  8085  043C                     i1l3854:
  8086  043C  0875               	movf	i1DIO_Write@GPIO,w
  8087  043D  00F2               	movwf	??i1_DIO_Write
  8088  043E  01F3               	clrf	??i1_DIO_Write+1
  8089                           
  8090                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8091                           ; Switch size 1, requested type "simple"
  8092                           ; Number of cases is 1, Range of values is 0 to 0
  8093                           ; switch strategies available:
  8094                           ; Name         Instructions Cycles
  8095                           ; simple_byte            4     3 (average)
  8096                           ; direct_byte           11     8 (fixed)
  8097                           ; jumptable            260     6 (fixed)
  8098                           ;	Chosen strategy is simple_byte
  8099  043F  0873               	movf	??i1_DIO_Write+1,w
  8100  0440  3A00               	xorlw	0	; case 0
  8101  0441  1903               	skipnz
  8102  0442  2C44               	goto	i1l6492
  8103  0443  2C55               	goto	i1l3856
  8104  0444                     i1l6492:
  8105                           
  8106                           ; Switch size 1, requested type "simple"
  8107                           ; Number of cases is 5, Range of values is 0 to 4
  8108                           ; switch strategies available:
  8109                           ; Name         Instructions Cycles
  8110                           ; simple_byte           16     9 (average)
  8111                           ; direct_byte           23     8 (fixed)
  8112                           ; jumptable            260     6 (fixed)
  8113                           ;	Chosen strategy is simple_byte
  8114  0444  0872               	movf	??i1_DIO_Write,w
  8115  0445  3A00               	xorlw	0	; case 0
  8116  0446  1903               	skipnz
  8117  0447  2C32               	goto	i1l3842
  8118  0448  3A01               	xorlw	1	; case 1
  8119  0449  1903               	skipnz
  8120  044A  2C34               	goto	i1l3844
  8121  044B  3A03               	xorlw	3	; case 2
  8122  044C  1903               	skipnz
  8123  044D  2C36               	goto	i1l3846
  8124  044E  3A01               	xorlw	1	; case 3
  8125  044F  1903               	skipnz
  8126  0450  2C38               	goto	i1l3848
  8127  0451  3A07               	xorlw	7	; case 4
  8128  0452  1903               	skipnz
  8129  0453  2C3A               	goto	i1l3850
  8130  0454  2C55               	goto	i1l3856
  8131  0455                     i1l3856:
  8132                           
  8133                           ;DIO.c: 154:   first_powerup++;
  8134  0455  3001               	movlw	1
  8135  0456  00FF               	movwf	btemp+1
  8136  0457  087F               	movf	btemp+1,w
  8137  0458  07B8               	addwf	DIO_Write@first_powerup,f
  8138  0459  2CC8               	goto	i1l3894
  8139  045A                     i1l3858:
  8140                           
  8141                           ;DIO.c: 160:       *((reg_type8_t)(0x0005)) |= pins;
  8142  045A  0870               	movf	i1DIO_Write@pins,w
  8143  045B  00FF               	movwf	btemp+1
  8144  045C  087F               	movf	btemp+1,w
  8145  045D  0485               	iorwf	5,f	;volatile
  8146                           
  8147                           ;DIO.c: 161:       break;
  8148  045E  2CD8               	goto	i1l3896
  8149  045F                     i1l3860:
  8150                           
  8151                           ;DIO.c: 163:       *((reg_type8_t)(0x0006)) |= pins;
  8152  045F  0870               	movf	i1DIO_Write@pins,w
  8153  0460  00FF               	movwf	btemp+1
  8154  0461  087F               	movf	btemp+1,w
  8155  0462  0486               	iorwf	6,f	;volatile
  8156                           
  8157                           ;DIO.c: 164:       break;
  8158  0463  2CD8               	goto	i1l3896
  8159  0464                     i1l3862:
  8160                           
  8161                           ;DIO.c: 166:       *((reg_type8_t)(0x0007)) |= pins;
  8162  0464  0870               	movf	i1DIO_Write@pins,w
  8163  0465  00FF               	movwf	btemp+1
  8164  0466  087F               	movf	btemp+1,w
  8165  0467  0487               	iorwf	7,f	;volatile
  8166                           
  8167                           ;DIO.c: 167:       break;
  8168  0468  2CD8               	goto	i1l3896
  8169  0469                     i1l3864:
  8170                           
  8171                           ;DIO.c: 169:       *((reg_type8_t)(0x0008)) |= pins;
  8172  0469  0870               	movf	i1DIO_Write@pins,w
  8173  046A  00FF               	movwf	btemp+1
  8174  046B  087F               	movf	btemp+1,w
  8175  046C  0488               	iorwf	8,f	;volatile
  8176                           
  8177                           ;DIO.c: 170:       break;
  8178  046D  2CD8               	goto	i1l3896
  8179  046E                     i1l3866:
  8180                           
  8181                           ;DIO.c: 172:       *((reg_type8_t)(0x0009)) |= pins;
  8182  046E  0870               	movf	i1DIO_Write@pins,w
  8183  046F  00FF               	movwf	btemp+1
  8184  0470  087F               	movf	btemp+1,w
  8185  0471  0489               	iorwf	9,f	;volatile
  8186                           
  8187                           ;DIO.c: 173:       break;
  8188  0472  2CD8               	goto	i1l3896
  8189  0473                     i1l3868:
  8190                           
  8191                           ;DIO.c: 175:       ret_error +=1 +14;
  8192  0473  300F               	movlw	15
  8193  0474  00FF               	movwf	btemp+1
  8194  0475  087F               	movf	btemp+1,w
  8195  0476  07F4               	addwf	i1DIO_Write@ret_error,f
  8196                           
  8197                           ;DIO.c: 176:       break;
  8198  0477  2CD8               	goto	i1l3896
  8199  0478                     i1l3872:
  8200  0478  0875               	movf	i1DIO_Write@GPIO,w
  8201  0479  00F2               	movwf	??i1_DIO_Write
  8202  047A  01F3               	clrf	??i1_DIO_Write+1
  8203                           
  8204                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8205                           ; Switch size 1, requested type "simple"
  8206                           ; Number of cases is 1, Range of values is 0 to 0
  8207                           ; switch strategies available:
  8208                           ; Name         Instructions Cycles
  8209                           ; simple_byte            4     3 (average)
  8210                           ; direct_byte           11     8 (fixed)
  8211                           ; jumptable            260     6 (fixed)
  8212                           ;	Chosen strategy is simple_byte
  8213  047B  0873               	movf	??i1_DIO_Write+1,w
  8214  047C  3A00               	xorlw	0	; case 0
  8215  047D  1903               	skipnz
  8216  047E  2C80               	goto	i1l6494
  8217  047F  2C73               	goto	i1l3868
  8218  0480                     i1l6494:
  8219                           
  8220                           ; Switch size 1, requested type "simple"
  8221                           ; Number of cases is 5, Range of values is 0 to 4
  8222                           ; switch strategies available:
  8223                           ; Name         Instructions Cycles
  8224                           ; simple_byte           16     9 (average)
  8225                           ; direct_byte           23     8 (fixed)
  8226                           ; jumptable            260     6 (fixed)
  8227                           ;	Chosen strategy is simple_byte
  8228  0480  0872               	movf	??i1_DIO_Write,w
  8229  0481  3A00               	xorlw	0	; case 0
  8230  0482  1903               	skipnz
  8231  0483  2C5A               	goto	i1l3858
  8232  0484  3A01               	xorlw	1	; case 1
  8233  0485  1903               	skipnz
  8234  0486  2C5F               	goto	i1l3860
  8235  0487  3A03               	xorlw	3	; case 2
  8236  0488  1903               	skipnz
  8237  0489  2C64               	goto	i1l3862
  8238  048A  3A01               	xorlw	1	; case 3
  8239  048B  1903               	skipnz
  8240  048C  2C69               	goto	i1l3864
  8241  048D  3A07               	xorlw	7	; case 4
  8242  048E  1903               	skipnz
  8243  048F  2C6E               	goto	i1l3866
  8244  0490  2C73               	goto	i1l3868
  8245  0491                     i1l3874:
  8246                           
  8247                           ;DIO.c: 183:       *((reg_type8_t)(0x0005)) &= (~pins);
  8248  0491  0970               	comf	i1DIO_Write@pins,w
  8249  0492  00FF               	movwf	btemp+1
  8250  0493  087F               	movf	btemp+1,w
  8251  0494  0585               	andwf	5,f	;volatile
  8252                           
  8253                           ;DIO.c: 184:       break;
  8254  0495  2CD8               	goto	i1l3896
  8255  0496                     i1l3876:
  8256                           
  8257                           ;DIO.c: 186:       *((reg_type8_t)(0x0006)) &= (~pins);
  8258  0496  0970               	comf	i1DIO_Write@pins,w
  8259  0497  00FF               	movwf	btemp+1
  8260  0498  087F               	movf	btemp+1,w
  8261  0499  0586               	andwf	6,f	;volatile
  8262                           
  8263                           ;DIO.c: 187:       break;
  8264  049A  2CD8               	goto	i1l3896
  8265  049B                     i1l3878:
  8266                           
  8267                           ;DIO.c: 189:       *((reg_type8_t)(0x0007)) &= (~pins);
  8268  049B  0970               	comf	i1DIO_Write@pins,w
  8269  049C  00FF               	movwf	btemp+1
  8270  049D  087F               	movf	btemp+1,w
  8271  049E  0587               	andwf	7,f	;volatile
  8272                           
  8273                           ;DIO.c: 190:       break;
  8274  049F  2CD8               	goto	i1l3896
  8275  04A0                     i1l3880:
  8276                           
  8277                           ;DIO.c: 192:       *((reg_type8_t)(0x0008)) &= (~pins);
  8278  04A0  0970               	comf	i1DIO_Write@pins,w
  8279  04A1  00FF               	movwf	btemp+1
  8280  04A2  087F               	movf	btemp+1,w
  8281  04A3  0588               	andwf	8,f	;volatile
  8282                           
  8283                           ;DIO.c: 193:       break;
  8284  04A4  2CD8               	goto	i1l3896
  8285  04A5                     i1l3882:
  8286                           
  8287                           ;DIO.c: 195:       *((reg_type8_t)(0x0009)) &= (~pins);
  8288  04A5  0970               	comf	i1DIO_Write@pins,w
  8289  04A6  00FF               	movwf	btemp+1
  8290  04A7  087F               	movf	btemp+1,w
  8291  04A8  0589               	andwf	9,f	;volatile
  8292                           
  8293                           ;DIO.c: 196:       break;
  8294  04A9  2CD8               	goto	i1l3896
  8295  04AA                     i1l3888:
  8296  04AA  0875               	movf	i1DIO_Write@GPIO,w
  8297  04AB  00F2               	movwf	??i1_DIO_Write
  8298  04AC  01F3               	clrf	??i1_DIO_Write+1
  8299                           
  8300                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8301                           ; Switch size 1, requested type "simple"
  8302                           ; Number of cases is 1, Range of values is 0 to 0
  8303                           ; switch strategies available:
  8304                           ; Name         Instructions Cycles
  8305                           ; simple_byte            4     3 (average)
  8306                           ; direct_byte           11     8 (fixed)
  8307                           ; jumptable            260     6 (fixed)
  8308                           ;	Chosen strategy is simple_byte
  8309  04AD  0873               	movf	??i1_DIO_Write+1,w
  8310  04AE  3A00               	xorlw	0	; case 0
  8311  04AF  1903               	skipnz
  8312  04B0  2CB2               	goto	i1l6496
  8313  04B1  2C73               	goto	i1l3868
  8314  04B2                     i1l6496:
  8315                           
  8316                           ; Switch size 1, requested type "simple"
  8317                           ; Number of cases is 5, Range of values is 0 to 4
  8318                           ; switch strategies available:
  8319                           ; Name         Instructions Cycles
  8320                           ; simple_byte           16     9 (average)
  8321                           ; direct_byte           23     8 (fixed)
  8322                           ; jumptable            260     6 (fixed)
  8323                           ;	Chosen strategy is simple_byte
  8324  04B2  0872               	movf	??i1_DIO_Write,w
  8325  04B3  3A00               	xorlw	0	; case 0
  8326  04B4  1903               	skipnz
  8327  04B5  2C91               	goto	i1l3874
  8328  04B6  3A01               	xorlw	1	; case 1
  8329  04B7  1903               	skipnz
  8330  04B8  2C96               	goto	i1l3876
  8331  04B9  3A03               	xorlw	3	; case 2
  8332  04BA  1903               	skipnz
  8333  04BB  2C9B               	goto	i1l3878
  8334  04BC  3A01               	xorlw	1	; case 3
  8335  04BD  1903               	skipnz
  8336  04BE  2CA0               	goto	i1l3880
  8337  04BF  3A07               	xorlw	7	; case 4
  8338  04C0  1903               	skipnz
  8339  04C1  2CA5               	goto	i1l3882
  8340  04C2  2C73               	goto	i1l3868
  8341  04C3                     i1l3890:
  8342                           
  8343                           ;DIO.c: 204: ret_error +=1 +18;
  8344  04C3  3013               	movlw	19
  8345  04C4  00FF               	movwf	btemp+1
  8346  04C5  087F               	movf	btemp+1,w
  8347  04C6  07F4               	addwf	i1DIO_Write@ret_error,f
  8348                           
  8349                           ;DIO.c: 205:   break;
  8350  04C7  2CD8               	goto	i1l3896
  8351  04C8                     i1l3894:
  8352  04C8  0871               	movf	i1DIO_Write@value,w
  8353  04C9  00F2               	movwf	??i1_DIO_Write
  8354  04CA  01F3               	clrf	??i1_DIO_Write+1
  8355                           
  8356                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8357                           ; Switch size 1, requested type "simple"
  8358                           ; Number of cases is 1, Range of values is 0 to 0
  8359                           ; switch strategies available:
  8360                           ; Name         Instructions Cycles
  8361                           ; simple_byte            4     3 (average)
  8362                           ; direct_byte           11     8 (fixed)
  8363                           ; jumptable            260     6 (fixed)
  8364                           ;	Chosen strategy is simple_byte
  8365  04CB  0873               	movf	??i1_DIO_Write+1,w
  8366  04CC  3A00               	xorlw	0	; case 0
  8367  04CD  1903               	skipnz
  8368  04CE  2CD0               	goto	i1l6498
  8369  04CF  2CC3               	goto	i1l3890
  8370  04D0                     i1l6498:
  8371                           
  8372                           ; Switch size 1, requested type "simple"
  8373                           ; Number of cases is 2, Range of values is 0 to 255
  8374                           ; switch strategies available:
  8375                           ; Name         Instructions Cycles
  8376                           ; simple_byte            7     4 (average)
  8377                           ; jumptable            260     6 (fixed)
  8378                           ;	Chosen strategy is simple_byte
  8379  04D0  0872               	movf	??i1_DIO_Write,w
  8380  04D1  3A00               	xorlw	0	; case 0
  8381  04D2  1903               	skipnz
  8382  04D3  2CAA               	goto	i1l3888
  8383  04D4  3AFF               	xorlw	255	; case 255
  8384  04D5  1903               	skipnz
  8385  04D6  2C78               	goto	i1l3872
  8386  04D7  2CC3               	goto	i1l3890
  8387  04D8                     i1l3896:
  8388                           
  8389                           ;DIO.c: 207: return ret_error;
  8390  04D8  0874               	movf	i1DIO_Write@ret_error,w
  8391  04D9                     i1l379:
  8392  04D9  0008               	return
  8393  04DA                     __end_ofi1_DIO_Write:
  8394                           
  8395                           	psect	text46
  8396  09C6                     __ptext46:	
  8397 ;; *************** function _adc_interrupt_routine *****************
  8398 ;; Defined at:
  8399 ;;		line 53 in file "ADC.c"
  8400 ;; Parameters:    Size  Location     Type
  8401 ;;		None
  8402 ;; Auto vars:     Size  Location     Type
  8403 ;;		None
  8404 ;; Return value:  Size  Location     Type
  8405 ;;                  1    wreg      void 
  8406 ;; Registers used:
  8407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  8408 ;; Tracked objects:
  8409 ;;		On entry : 0/0
  8410 ;;		On exit  : 0/0
  8411 ;;		Unchanged: 0/0
  8412 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8413 ;;      Params:         0       0       0       0       0
  8414 ;;      Locals:         0       0       0       0       0
  8415 ;;      Temps:          0       0       0       0       0
  8416 ;;      Totals:         0       0       0       0       0
  8417 ;;Total ram usage:        0 bytes
  8418 ;; Hardware stack levels used:    1
  8419 ;; Hardware stack levels required when called:    1
  8420 ;; This function calls:
  8421 ;;		_clear_int_flag
  8422 ;; This function is called by:
  8423 ;;		_ADC_INIT
  8424 ;;		_checkmyisr
  8425 ;; This function uses a non-reentrant model
  8426 ;;
  8427                           
  8428                           
  8429                           ;psect for function _adc_interrupt_routine
  8430  09C6                     _adc_interrupt_routine:
  8431  09C6                     i1l4310:	
  8432                           ;incstack = 0
  8433 ;; hardware stack exceeded
  8434                           ; Regs used in _adc_interrupt_routine: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+csta
      +                          ck]
  8435                           
  8436                           
  8437                           ;ADC.c: 55: u16_result_data=((*((reg_type8_t)(0x001E))<<8)+*((reg_type8_t)(0x009E)));
  8438  09C6  1283               	bcf	3,5	;RP0=0, select bank0
  8439  09C7  1303               	bcf	3,6	;RP1=0, select bank0
  8440  09C8  081E               	movf	30,w	;volatile
  8441  09C9  00AD               	movwf	_u16_result_data+1
  8442  09CA  1683               	bsf	3,5	;RP0=1, select bank1
  8443  09CB  1303               	bcf	3,6	;RP1=0, select bank1
  8444  09CC  081E               	movf	30,w	;volatile
  8445  09CD  1283               	bcf	3,5	;RP0=0, select bank0
  8446  09CE  1303               	bcf	3,6	;RP1=0, select bank0
  8447  09CF  00AC               	movwf	_u16_result_data
  8448  09D0                     i1l4312:
  8449                           
  8450                           ;ADC.c: 56: clear_int_flag(0x40);
  8451  09D0  3040               	movlw	64
  8452  09D1  120A  158A  2484  120A  158A  	fcall	_clear_int_flag
  8453  09D6                     i1l36:
  8454  09D6  0008               	return
  8455  09D7                     __end_of_adc_interrupt_routine:
  8456                           
  8457                           	psect	text47
  8458  0C84                     __ptext47:	
  8459 ;; *************** function _clear_int_flag *****************
  8460 ;; Defined at:
  8461 ;;		line 142 in file "interrupts.c"
  8462 ;; Parameters:    Size  Location     Type
  8463 ;;  u8_interrupt    1    wreg     unsigned char 
  8464 ;; Auto vars:     Size  Location     Type
  8465 ;;  u8_interrupt    1    3[COMMON] unsigned char 
  8466 ;;  ret_error       1    2[COMMON] unsigned char 
  8467 ;; Return value:  Size  Location     Type
  8468 ;;                  1    wreg      unsigned char 
  8469 ;; Registers used:
  8470 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8471 ;; Tracked objects:
  8472 ;;		On entry : 0/0
  8473 ;;		On exit  : 0/0
  8474 ;;		Unchanged: 0/0
  8475 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8476 ;;      Params:         0       0       0       0       0
  8477 ;;      Locals:         2       0       0       0       0
  8478 ;;      Temps:          2       0       0       0       0
  8479 ;;      Totals:         4       0       0       0       0
  8480 ;;Total ram usage:        4 bytes
  8481 ;; Hardware stack levels used:    1
  8482 ;; This function calls:
  8483 ;;		Nothing
  8484 ;; This function is called by:
  8485 ;;		_adc_interrupt_routine
  8486 ;; This function uses a non-reentrant model
  8487 ;;
  8488                           
  8489                           
  8490                           ;psect for function _clear_int_flag
  8491  0C84                     _clear_int_flag:
  8492                           
  8493                           ;incstack = 0
  8494 ;; hardware stack exceeded
  8495                           ; Regs used in _clear_int_flag: [wreg-fsr0h+status,2+status,0+btemp+1]
  8496                           ;clear_int_flag@u8_interrupt_prepherals stored from wreg
  8497  0C84  00F3               	movwf	clear_int_flag@u8_interrupt_prepherals
  8498  0C85                     i1l4160:
  8499                           
  8500                           ;interrupts.c: 142: ERROR_STATUS clear_int_flag(uint8_t u8_interrupt_prepherals);interru
      +                          pts.c: 143: {;interrupts.c: 144:     uint8_t ret_error = 0;
  8501  0C85  01F2               	clrf	clear_int_flag@ret_error
  8502                           
  8503                           ;interrupts.c: 145: switch (u8_interrupt_prepherals) {
  8504  0C86  2CA6               	goto	i1l4174
  8505  0C87                     i1l4162:
  8506                           
  8507                           ;interrupts.c: 147:        (*((reg_type8_t)(0x000B)) &=(~(1<<0x04)));
  8508  0C87  30EF               	movlw	239
  8509  0C88  00FF               	movwf	btemp+1
  8510  0C89  087F               	movf	btemp+1,w
  8511  0C8A  058B               	andwf	11,f	;volatile
  8512                           
  8513                           ;interrupts.c: 148:         break;
  8514  0C8B  2CBF               	goto	i1l179
  8515  0C8C                     i1l4164:
  8516                           
  8517                           ;interrupts.c: 150:       (*((reg_type8_t)(0x000C)) &=(~(1<<0x01)));
  8518  0C8C  30FD               	movlw	253
  8519  0C8D  00FF               	movwf	btemp+1
  8520  0C8E  087F               	movf	btemp+1,w
  8521  0C8F  1283               	bcf	3,5	;RP0=0, select bank0
  8522  0C90  1303               	bcf	3,6	;RP1=0, select bank0
  8523  0C91  058C               	andwf	12,f	;volatile
  8524                           
  8525                           ;interrupts.c: 151:  break;
  8526  0C92  2CBF               	goto	i1l179
  8527  0C93                     i1l4166:
  8528                           
  8529                           ;interrupts.c: 153:       (*((reg_type8_t)(0x000C)) &=(~(1<<0x02)));
  8530  0C93  30FB               	movlw	251
  8531  0C94  00FF               	movwf	btemp+1
  8532  0C95  087F               	movf	btemp+1,w
  8533  0C96  1283               	bcf	3,5	;RP0=0, select bank0
  8534  0C97  1303               	bcf	3,6	;RP1=0, select bank0
  8535  0C98  058C               	andwf	12,f	;volatile
  8536                           
  8537                           ;interrupts.c: 154:  break;
  8538  0C99  2CBF               	goto	i1l179
  8539  0C9A                     i1l4168:
  8540                           
  8541                           ;interrupts.c: 159: *((reg_type8_t)(0x000C)) &= (~0x40);
  8542  0C9A  30BF               	movlw	191
  8543  0C9B  00FF               	movwf	btemp+1
  8544  0C9C  087F               	movf	btemp+1,w
  8545  0C9D  1283               	bcf	3,5	;RP0=0, select bank0
  8546  0C9E  1303               	bcf	3,6	;RP1=0, select bank0
  8547  0C9F  058C               	andwf	12,f	;volatile
  8548                           
  8549                           ;interrupts.c: 160:         break;
  8550  0CA0  2CBF               	goto	i1l179
  8551  0CA1                     i1l4170:
  8552                           
  8553                           ;interrupts.c: 162:     ret_error += 1 + 28;
  8554  0CA1  301D               	movlw	29
  8555  0CA2  00FF               	movwf	btemp+1
  8556  0CA3  087F               	movf	btemp+1,w
  8557  0CA4  07F2               	addwf	clear_int_flag@ret_error,f
  8558                           
  8559                           ;interrupts.c: 163:     break;
  8560  0CA5  2CBF               	goto	i1l179
  8561  0CA6                     i1l4174:
  8562  0CA6  0873               	movf	clear_int_flag@u8_interrupt_prepherals,w
  8563  0CA7  00F0               	movwf	??_clear_int_flag
  8564  0CA8  01F1               	clrf	??_clear_int_flag+1
  8565                           
  8566                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8567                           ; Switch size 1, requested type "simple"
  8568                           ; Number of cases is 1, Range of values is 0 to 0
  8569                           ; switch strategies available:
  8570                           ; Name         Instructions Cycles
  8571                           ; simple_byte            4     3 (average)
  8572                           ; direct_byte           11     8 (fixed)
  8573                           ; jumptable            260     6 (fixed)
  8574                           ;	Chosen strategy is simple_byte
  8575  0CA9  0871               	movf	??_clear_int_flag+1,w
  8576  0CAA  3A00               	xorlw	0	; case 0
  8577  0CAB  1903               	skipnz
  8578  0CAC  2CAE               	goto	i1l6500
  8579  0CAD  2CA1               	goto	i1l4170
  8580  0CAE                     i1l6500:
  8581                           
  8582                           ; Switch size 1, requested type "simple"
  8583                           ; Number of cases is 5, Range of values is 0 to 64
  8584                           ; switch strategies available:
  8585                           ; Name         Instructions Cycles
  8586                           ; simple_byte           16     9 (average)
  8587                           ; direct_byte          203     8 (fixed)
  8588                           ; jumptable            260     6 (fixed)
  8589                           ;	Chosen strategy is simple_byte
  8590  0CAE  0870               	movf	??_clear_int_flag,w
  8591  0CAF  3A00               	xorlw	0	; case 0
  8592  0CB0  1903               	skipnz
  8593  0CB1  2C87               	goto	i1l4162
  8594  0CB2  3A01               	xorlw	1	; case 1
  8595  0CB3  1903               	skipnz
  8596  0CB4  2C8C               	goto	i1l4164
  8597  0CB5  3A03               	xorlw	3	; case 2
  8598  0CB6  1903               	skipnz
  8599  0CB7  2C93               	goto	i1l4166
  8600  0CB8  3A01               	xorlw	1	; case 3
  8601  0CB9  1903               	skipnz
  8602  0CBA  2CBF               	goto	i1l179
  8603  0CBB  3A43               	xorlw	67	; case 64
  8604  0CBC  1903               	skipnz
  8605  0CBD  2C9A               	goto	i1l4168
  8606  0CBE  2CA1               	goto	i1l4170
  8607  0CBF                     i1l179:
  8608  0CBF  0008               	return
  8609  0CC0                     __end_of_clear_int_flag:
  8610  000B                     
  8611                           	psect	functab
  8612  004E                     __pfunctab:
  8613  004E                     __fptable:
  8614  004E                     fptable:
  8615  004E  00FF               	movwf	(btemp+1)& (0+127)
  8616  004F  3000               	movlw	high fptable
  8617  0050  008A               	movwf	10
  8618  0051  087F               	movf	(btemp+1)& (0+127),w
  8619  0052  0782               	addwf	2,f
  8620  0053                     fpbase:
  8621  0053  2853               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  8622  0054                     fp_u0:
  8623  0054  2854               	ljmp	fp_u0	; unused
  8624  0055                     fp_u1:
  8625  0055  2855               	ljmp	fp_u1	; unused
  8626  0056                     fp_u2:
  8627  0056  2856               	ljmp	fp_u2	; unused
  8628  0057                     fp_u3:
  8629  0057  2857               	ljmp	fp_u3	; unused
  8630  0058                     fp_u4:
  8631  0058  2858               	ljmp	fp_u4	; unused
  8632  0059                     fp_u5:
  8633  0059  2859               	ljmp	fp_u5	; unused
  8634  005A                     fp__Task3:
  8635  005A  120A  118A  2803   	ljmp	_Task3
  8636  005D                     fp__Task1:
  8637  005D  120A  158A  2C49   	ljmp	_Task1
  8638  0060                     fp__Task2:
  8639  0060  120A  158A  2F34   	ljmp	_Task2
  8640  0063                     __end_of__fptable:
  8641  0063                     __i1fptable:
  8642  0063                     i1fptable:
  8643  0063  00FF               	movwf	(btemp+1)& (0+127)
  8644  0064  3000               	movlw	high i1fptable
  8645  0065  008A               	movwf	10
  8646  0066  087F               	movf	(btemp+1)& (0+127),w
  8647  0067  0782               	addwf	2,f
  8648  0068                     i1fpbase:
  8649  0068  2868               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  8650  0069                     fp__adc_interrupt_routine:
  8651  0069  120A  158A  29C6   	ljmp	_adc_interrupt_routine
  8652  006C                     fp__timer_interrupt:
  8653  006C  120A  158A  2950   	ljmp	_timer_interrupt
  8654  006F                     fp__seven_seg_POV:
  8655  006F  120A  158A  2A69   	ljmp	_seven_seg_POV
  8656  0072                     fp__timer0_interrupt_ovfRoutine:
  8657  0072  120A  158A  29B7   	ljmp	_timer0_interrupt_ovfRoutine
  8658  0075                     fp__timer1_interrupt_ovfRoutine:
  8659  0075  120A  158A  29D7   	ljmp	_timer1_interrupt_ovfRoutine
  8660  0078                     __end_of__i1fptable:
  8661  007E                     btemp	set	126	;btemp
  8662  007E                     wtemp0	set	126

Data Sizes:
    Strings     0
    Constant    2
    Data        56
    BSS         104
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     32      75
    BANK1            80      4      80
    BANK3            96      0      41
    BANK2            96      0       0

Pointer List with Targets:

    Timer_Deinit_Configuration2.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Deinit_Configuration1.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Configuration1.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Init@Timer_cfg.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Init@Timer_cfg	PTR struct Timer_cfg_s size(1) Largest target is 5
		 -> Timer_Deinit_Configuration0(BANK1[5]), Timer_Configuration2_SOS(BANK1[5]), Timer_Configuration0(BANK1[5]), Timer_Configuration1_7_seg(BANK1[5]), 

    S364Buffer_Request$Fuction_consumer	PTR FTN()void  size(1) Largest target is 1
		 -> Task3(), Task2(), Task1(), 

    Buffer_Array.Fuction_consumer	PTR FTN()void  size(1) Largest target is 1
		 -> Task3(), Task2(), Task1(), 

    SOS_Create_Task@Function_Consumer	PTR FTN()void  size(1) Largest target is 1
		 -> Task3(), Task2(), Task1(), 

    SOS_Init@ConfigPtr	PTR const struct TMU_ConfigType size(1) Largest target is 2
		 -> TMU_Configuration(CODE[2]), 

    Timer_Deinit_Configuration0.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Configuration2_SOS.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Configuration0.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    DIO_Read@data	PTR unsigned char  size(1) Largest target is 3
		 -> pushButtonGetStatus@u8_Button_press(BANK0[3]), 

    DIO_init@DIO_info	PTR struct DIO_Cfg_s size(1) Largest target is 4
		 -> Dio_configutation_A_ADC(BANK1[4]), Dio_configutation_D(BANK1[4]), Dio_configutation_A_7_seg(BANK0[4]), 

    TIMER2OVF_INT	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), 
		 -> seven_seg_POV(), 

    TIMER1OVF_INT	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), 
		 -> seven_seg_POV(), 

    TIMER0OVF_INT	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), 
		 -> seven_seg_POV(), 

    S87Timer_cfg_s$Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Configuration1_7_seg.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    ADC_INT	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), adc_interrupt_routine(), 

    ADC_INIT@ADC_info	PTR struct ADC_Cfg_s size(1) Largest target is 5
		 -> ADC_Cnfiguration(BANK1[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _checkmyisr in COMMON

    _seven_seg_POV->_sevenSegEnable
    _sevenSegEnable->i1_sevenSegDisable
    i1_sevenSegDisable->i1_DIO_Write
    _adc_interrupt_routine->_clear_int_flag

Critical Paths under _main in BANK0

    _main->_SOS_Run
    _system_init->_SOS_Init
    _SOS_Init->_Timer_Init
    _SOS_Create_Task->___bmul
    _SOS_Run->_Task2
    _Task2->_I2C_Master_Init
    _sevenSegWrite->___awdiv
    _sevenSegInit->_sevenSegDisable
    _sevenSegDisable->_DIO_Write
    _Timer_Init->_special_int_disable
    _Timer_Init->_special_int_enable
    _I2C_Master_Init->___lldiv
    _EEPROM_Write->_I2C_Master_Write
    _EEPROM_Read->_I2C_Master_Write
    _ADC_READ->_SwDelay_ms
    _ADC_INIT->_special_int_disable
    _ADC_INIT->_special_int_enable
    _Task1->_pushButtonGetStatus
    _pushButtonGetStatus->_DIO_Read

Critical Paths under _checkmyisr in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_SOS_Run

Critical Paths under _checkmyisr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _checkmyisr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _checkmyisr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   10501
                            _SOS_Run
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          1     1      0    2790
                                             17 BANK0      1     1      0
                    _SOS_Create_Task
                           _SOS_Init
 ---------------------------------------------------------------------------------
 (2) _SOS_Init                                             5     5      0    1482
                                             12 BANK0      5     5      0
                         _Timer_Init
                        _Timer_Start
 ---------------------------------------------------------------------------------
 (2) _SOS_Create_Task                                      6     2      4    1293
                                              7 BANK0      6     2      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (1) _SOS_Run                                              5     5      0    7711
                                             31 BANK0      1     1      0
                                              0 BANK1      4     4      0
                              _Task1 *
                              _Task2 *
                              _Task3 *
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     430
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _Task3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Task2                                                5     5      0    6465
                                             26 BANK0      5     5      0
                           _ADC_INIT
                           _ADC_READ
                           _DIO_init
                        _EEPROM_Read
                       _EEPROM_Write
                    _I2C_Master_Init
                       _sevenSegInit
                      _sevenSegWrite
 ---------------------------------------------------------------------------------
 (3) _sevenSegWrite                                        4     4      0    1376
                                             12 BANK0      4     4      0
                        _Timer_Start
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (3) _Timer_Start                                          6     4      2     296
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _sevenSegInit                                         1     1      0    2711
                                             14 BANK0      1     1      0
                           _DIO_init
                         _Timer_Init
                    _sevenSegDisable
 ---------------------------------------------------------------------------------
 (4) _sevenSegDisable                                      4     4      0     885
                                             10 BANK0      4     4      0
                          _DIO_Write
 ---------------------------------------------------------------------------------
 (5) _DIO_Write                                            6     4      2     838
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _Timer_Init                                           4     4      0     946
                                              8 BANK0      4     4      0
                _special_int_disable
                 _special_int_enable
 ---------------------------------------------------------------------------------
 (4) _DIO_init                                             4     4      0     831
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4     412
                                             18 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             14     6      8     314
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (3) _EEPROM_Write                                         3     0      3     240
                                              5 BANK0      3     0      3
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_Read                                          3     1      2     165
                                              5 BANK0      3     1      2
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           _I2C_NACK
                      _I2C_Read_Byte
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Byte                                        0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_NACK                                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     1     1      0      22
                                              4 BANK0      1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_READ                                             3     1      2     246
                                             14 BANK0      3     1      2
                         _SwDelay_ms
                         _SwDelay_us
 ---------------------------------------------------------------------------------
 (4) _SwDelay_us                                           8     4      4      99
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SwDelay_ms                                          10     6      4     147
                                              4 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (3) _ADC_INIT                                             4     4      0     370
                                              8 BANK0      4     4      0
                _special_int_disable
                 _special_int_enable
 ---------------------------------------------------------------------------------
 (4) _special_int_enable                                   4     4      0      46
                                              4 BANK0      4     4      0
                  _global_int_enable
 ---------------------------------------------------------------------------------
 (5) _global_int_enable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _special_int_disable                                  4     4      0      46
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _Task1                                                0     0      0     803
                _pushButtonGetStatus
 ---------------------------------------------------------------------------------
 (3) _pushButtonGetStatus                                  4     4      0     803
                                             10 BANK0      4     4      0
                           _DIO_Read
 ---------------------------------------------------------------------------------
 (4) _DIO_Read                                             6     4      2     750
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (7) _checkmyisr                                           4     4      0    1194
                                              0 BANK0      4     4      0
                   Absolute function *
              _adc_interrupt_routine *
                      _seven_seg_POV *
        _timer0_interrupt_ovfRoutine *
        _timer1_interrupt_ovfRoutine *
                    _timer_interrupt *
 ---------------------------------------------------------------------------------
 (8) _timer_interrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _timer1_interrupt_ovfRoutine                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _timer0_interrupt_ovfRoutine                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _seven_seg_POV                                        0     0      0    1164
                     _sevenSegEnable
 ---------------------------------------------------------------------------------
 (9) _sevenSegEnable                                       4     4      0    1164
                                             10 COMMON     4     4      0
                        i1_DIO_Write
                  i1_sevenSegDisable
 ---------------------------------------------------------------------------------
 (10) i1_sevenSegDisable                                   4     4      0     589
                                              6 COMMON     4     4      0
                        i1_DIO_Write
 ---------------------------------------------------------------------------------
 (11) i1_DIO_Write                                         6     4      2     542
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (8) _adc_interrupt_routine                                0     0      0      30
                     _clear_int_flag
 ---------------------------------------------------------------------------------
 (9) _clear_int_flag                                       4     4      0      30
                                              0 COMMON     4     4      0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SOS_Run
     _Task1 *
       _pushButtonGetStatus
         _DIO_Read
     _Task2 *
       _ADC_INIT
         _special_int_disable
         _special_int_enable
           _global_int_enable
       _ADC_READ
         _SwDelay_ms
         _SwDelay_us
       _DIO_init
       _EEPROM_Read
         _I2C_Master_RepeatedStart
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _I2C_NACK
           _I2C_Master_Wait
         _I2C_Read_Byte
           _I2C_Master_Wait
       _EEPROM_Write
         _I2C_Master_RepeatedStart
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _I2C_Master_Init
         ___lldiv
       _sevenSegInit
         _DIO_init
         _Timer_Init
           _special_int_disable
           _special_int_enable
             _global_int_enable
         _sevenSegDisable
           _DIO_Write
       _sevenSegWrite
         _Timer_Start
         ___awdiv
         ___awmod
     _Task3 *
     ___bmul *
   _system_init
     _SOS_Create_Task
       ___bmul
     _SOS_Init
       _Timer_Init
         _special_int_disable
         _special_int_enable
           _global_int_enable
       _Timer_Start

 _checkmyisr (ROOT)
   Absolute function(Fake) *
   _adc_interrupt_routine *
     _clear_int_flag
   _seven_seg_POV *
     _sevenSegEnable
       i1_DIO_Write
       i1_sevenSegDisable
         i1_DIO_Write
   _timer0_interrupt_ovfRoutine *
   _timer1_interrupt_ovfRoutine *
   _timer_interrupt *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0      29       9       42.7%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      4      50       7      100.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     20      4B       5       93.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      D2      12        0.0%
ABS                  0      0      D2       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Mon Jul 20 09:54:11 2020

                           ??_seven_seg_POV 007E                                           pc 0002  
                   clear_int_flag@ret_error 0072                              ___bmul@product 004B  
                                        l33 0C48                                          l27 05EB  
                                        l69 0B67                                          l95 0F33  
                                        l88 0C0D                           sevenSegEnable@ret 007D  
                              ___awdiv@sign 004F                                          fsr 0004  
                         _last_Ten_readings 01A5                         __end_of_system_init 0BD5  
                                       l140 069D                                         l205 066A  
                                       l135 067A                                         l144 06BD  
                                       l146 06E3                                         l138 068D  
                                       l243 0CFC                                         l156 0D1B  
                                       l404 0D72                                         l252 099A  
                                       l157 0D3C                                         l413 0D7C  
                                       l261 0A08                                         l182 0963  
                                       l406 0D51                                         l246 0972  
                                       l270 0A29                                         l183 0965  
                                       l255 098C                                         l263 0A0C  
                                       l408 0D4A                                         l416 0A5E  
                                       l264 0A12                                         l249 097E  
                                       l345 02B7                                         l258 09A8  
                                       l282 0B33                                         l419 0A68  
                                       l267 0A1B                                         l276 0971  
                                       l269 0A20                                         l391 0ED5  
                                       l703 0F97                                         l297 07FF  
                                       l706 0003                                         l650 09AE  
                                       l379 0427                                         l483 074D  
                                       l564 01A1                                         l492 0345  
                                       l581 0B7A                                         l469 0563  
                                       l645 0BD4                                         l494 0375  
                                       l583 0B9C                                         l818 0A40  
                                       l828 0FFF                                         l696 0C83  
                                       l945 07B6                                         l958 0E78  
                                       _PEN 048A                                         _SEN 0488  
                                       u990 0962                                         u991 0961  
                                       fsr0 0004                                         indf 0000  
                              ___awmod@sign 004F                          sevenSegDisable@ret 0053  
                  fp__adc_interrupt_routine 0069                    __size_of_SOS_Create_Task 006A  
                                      l4000 0ED9                                        l4010 0F17  
                                      l4002 0EDA                                        l4100 0B0B  
                                      l4020 0F32                                        l4012 0F1D  
                                      l4004 0EE0                                        l4030 0606  
                                      l3302 0D21                                        l4110 07C2  
                                      l4102 0B16                                        l4006 0EE6  
                                      l4040 0615                                        l4032 060A  
                                      l4024 05EF                                        l3304 0D3A  
                                      l3240 095B                                        l3400 0D43  
                                      l4120 07F7                                        l4112 07CD  
                                      l4104 0B2E                                        l3320 0382  
                                      l3312 0379                                        l4016 0F1F  
                                      l4008 0F12                                        l4042 0623  
                                      l4034 0610                                        l4026 05F1  
                                      l3242 0962                                        l3250 0679  
                                      l3402 0D48                                        l3410 0A42  
                                      l4122 07FC                                        l4114 07DD  
                                      l4106 07B7                                        l3322 0384  
                                      l3330 038A                                        l3314 037A  
                                      l4018 0F23                                        l4130 0A32  
                                      l4060 0644                                        l4044 062A  
                                      l4036 0613                                        l4028 05FF  
                                      l3260 0690                                        l3252 067D  
                                      l3244 066E                                        l3404 0D4F  
                                      l4116 07E2                                        l4108 07BD  
                                      l3340 03B7                                        l3324 0386  
                                      l3332 03A3                                        l4132 0A36  
                                      l4062 064B                                        l4046 062E  
                                      l3262 0695                                        l3254 0682  
                                      l3246 0670                                        l3406 0D56  
                                      l4118 07F2                                        l3350 03DF  
                                      l3342 03BC                                        l3334 03A8  
                                      l3326 0388                                        l3318 0380  
                                      l4134 0A38                                        l4126 0A2D  
                                      l4064 064F                                        l4048 0634  
                                      l3272 06B0                                        l3264 069C  
                                      l3256 0685                                        l3248 0674  
                                      l3280 06C8                                        l3408 0A41  
                                      l3352 03E4                                        l3344 03C1  
                                      l3336 03AD                                        l4136 0A3A  
                                      l4128 0A2E                                        l4058 0636  
                                      l4074 0656                                        l3290 0D00  
                                      l3274 06B5                                        l3266 06A3  
                                      l3258 068C                                        l3282 06E1  
                                      l4090 0CF6                                        l3354 03E9  
                                      l3338 03B2                                        l3370 0416  
                                      l4138 0A3F                                        l4250 06E8  
                                      l4076 0669                                        l3292 0D02  
                                      l3276 06BC                                        l3268 06A8  
                                      l3700 099B                                        l4092 0CF7  
                                      l4084 0CC0                                        l3364 03F8  
                                      l3356 03EE                                        l3348 03C6  
                                      l3372 0426                                        l4260 0746  
                                      l4252 06EC                                        l3294 0D07  
                                      l3278 06C3                                        l3702 09A0  
                                      l4094 0CFB                                        l4086 0CC4  
                                      l5310 00D9                                        l5302 00A9  
                                      l3366 0411                                        l3358 03F3  
                                      l3630 0BFC                                        l3622 0BD8  
                                      l4270 0C5A                                        l4262 074A  
                                      l4254 06F1                                        l3296 0D0E  
                                      l3392 0972                                        l3704 09FF  
                                      l3712 0A13                                        l4096 0B00  
                                      l4088 0CC7                                        l5400 01A6  
                                      l5320 0100                                        l5304 00BC  
                                      l3632 0C0C                                        l3624 0BDA  
                                      l3640 0B6B                                        l3800 0E21  
                                      l4280 0C78                                        l4272 0C62  
                                      l4256 073B                                        l4248 06E7  
                                      l3298 0D15                                        l3394 0978  
                                      l3706 0A04                                        l3722 0966  
                                      l3714 0A18                                        l4098 0B06  
                                      l3730 0FAA                                        l5410 01B6  
                                      l5402 01A8                                        l5322 010B  
                                      l5330 0120                                        l5306 00C5  
                                      l3626 0BEB                                        l3650 0B82  
                                      l3642 0B6D                                        l3810 0E35  
                                      l3802 0E25                                        l4282 0C80  
                                      l4274 0C66                                        l4266 0C49  
                                      l4258 0741                                        l3396 0D3D  
                                      l3708 0A0D                                        l3724 0969  
                                      l3716 0A21                                        l3740 0FC7  
                                      l3732 0FAD                                        l5412 01BA  
                                      l5420 01DE                                        l5340 0152  
                                      l5332 0133                                        l5324 0114  
                                      l5308 00D0                                        l5316 00E5  
                                      l5500 0B34                                        l3644 0B74  
                                      l3820 0E4D                                        l3812 0E3B  
                                      l3804 0E2A                                        l4284 0C82  
                                      l4276 0C67                                        l4268 0C54  
                                      l3670 0E90                                        l3398 0D3E  
                                      l3726 096E                                        l3718 0A26  
                                      l3742 0FD9                                        l3734 0FB6  
                                      l3750 0FF7                                        l5430 01FB  
                                      l5414 01BE                                        l5406 01AE  
                                      l5422 01E3                                        l5342 015D  
                                      l5350 0172                                        l5318 00F8  
                                      l5510 0B66                                        l5502 0B3A  
                                      l3646 0B78                                        l3654 0B87  
                                      l3830 0E6F                                        l3822 0E57  
                                      l3814 0E3E                                        l3806 0E2C  
                                      l4278 0C72                                        l3672 0E99  
                                      l3680 0EB0                                        l3664 0E7C  
                                      l3744 0FE7                                        l3736 0FBA  
                                      l3728 0F98                                        l5440 022D  
                                      l5432 0205                                        l5424 01EB  
                                      l5408 01B2                                        l5352 0185  
                                      l5344 0166                                        l5336 0138  
                                      l5504 0B45                                        l3648 0B7B  
                                      l3656 0B9A                                        l3760 075A  
                                      l3832 0E74                                        l3824 0E5D  
                                      l3816 0E45                                        l3808 0E30  
                                      l5520 04ED                                        l3674 0EA2  
                                      l3682 0EC9                                        l3666 0E7E  
                                      l3746 0FE8                                        l3738 0FBE  
                                      l5450 0261                                        l5434 020F  
                                      l5426 01F4                                        l5418 01C2  
                                      l5338 014A                                        l5290 007D  
                                      l5506 0B50                                        l3770 076B  
                                      l3762 075C                                        l3754 074E  
                                      l3826 0E64                                        l3818 0E49  
                                      l5610 0359                                        l5602 02C1  
                                      l5530 050B                                        l5522 04F2  
                                      l5514 04DD                                        l3684 0ED1  
                                      l3676 0EAB                                        l3668 0E87  
                                      l3940 0584                                        l3932 0567  
                                      l3692 098D                                        l3748 0FF1  
                                      l5460 027F                                        l5452 026B  
                                      l5444 0232                                        l5436 0219  
                                      l5292 0084                                        l5356 018A  
                                      l5508 0B5B                                        l3780 0783  
                                      l3772 0771                                        l3764 0760  
                                      l3756 0751                                        l3828 0E6A  
                                      l5612 0369                                        l5604 02D3  
                                      l5540 0536                                        l5524 04F7  
                                      l5516 04E8                                        l5620 0BA3  
                                      l3950 05BD                                        l3942 0590  
                                      l3934 0568                                        l3694 0992  
                                      l5462 029A                                        l5454 0275  
                                      l5446 024D                                        l5438 0223  
                                      l5470 02B5                                        l5358 01A0  
                                      l5294 008F                                        l3782 0794  
                                      l3774 0774                                        l3790 07A8  
                                      l3766 0765                                        l3758 0755  
                                      l5614 036F                                        l5606 02D4  
                                      l5526 04FE                                        l5550 054B  
                                      l5534 0510                                        l5518 04E9  
                                      l5622 0BB2                                        l3960 05E8  
                                      l3952 05C8                                        l3944 0598  
                                      l3936 0571                                        l3696 097F  
                                      l5448 0257                                        l5296 0098  
                                      l5288 007B                                        l3792 07AD  
                                      l3784 079A                                        l3776 077B  
                                      l3768 0769                                        l5608 031E  
                                      l5544 053B                                        l5552 0560  
                                      l5536 0520                                        l6440 0518  
                                      l5528 0504                                        l5624 0BC2  
                                      l5616 0B9D                                        l3954 05CD  
                                      l3946 05A0                                        l3938 057E  
                                      l3970 0C1D                                        l3698 0984  
                                      l5466 029F                                        l5298 00A4  
                                      l6450 0392                                        l3794 07B2  
                                      l3786 079B                                        l3778 077F  
                                      l5570 0F34                                        l6442 0543  
                                      l5538 052B                                        l5618 0B9D  
                                      l3948 05B8                                        l3980 0C40  
                                      l3972 0C23                                        l5468 02B1  
                                      l6460 00F0                                        l6452 03CE  
                                      l3788 07A2                                        l5580 0F4B  
                                      l5572 0F34                                        l6444 055B  
                                      l3958 05D4                                        l3974 0C24  
                                      l6470 01CD                                        l5398 01A5  
                                      l6462 012B                                        l6454 0400  
                                      l6446 0B8F                                        l3798 0E1E  
                                      l5590 0F8D                                        l5582 0F5A  
                                      l5574 0F3A                                        l5638 09A9  
                                      l6480 06D0                                        l3976 0C31  
                                      l3968 0C0E                                        l6472 023C  
                                      l6464 0142                                        l6456 041E  
                                      l6448 0C04                                        l5584 0F65  
                                      l5576 0F40                                        l5568 0F34  
                                      l5592 02B8                                        l6482 0D29  
                                      l3978 0C34                                        l6474 0289  
                                      l6466 017D                                        l6458 00B4  
                                      l5498 0B34                                        l5586 0F6B  
                                      l5578 0F46                                        l5594 02B8  
                                      l6484 065E                                        l6476 02A9  
                                      l6468 0195                                        l5588 0F7A  
                                      l5596 02BF                                        l6486 0EB8  
                                      l6478 05E0                                        u1000 0679  
                                      u1001 0678                                        u1010 068C  
                                      u1011 068B                                        u1020 069C  
                                      u1100 0D72                                        u1021 069B  
                                      u1030 06AF                                        u1110 0D7C  
                                      u1031 06AE                                        u1111 0D7B  
                                      u1040 06BC                                        u1120 0A5E  
                                      u1200 0FAA                                        u2000 02D3  
                                      u1041 06BB                                        u1105 0D65  
                                      u1201 0FA9                                        u2001 02D2  
                                      u1106 0D66                                        u1130 0A68  
                                      u1050 037F                                        u2010 031E  
                                      u1107 0D6B                                        u1131 0A67  
                                      u1051 037E                                        u2011 031D  
                                      u1108 0D6C                                        u1060 0978  
                                      u1220 0FBE                                        u2020 0359  
                                      u1109 0D71                                        u1125 0A51  
                                      u1061 0977                                        u1221 0FBD  
                                      u2021 0358                                        u1126 0A52  
                                      u1070 097E                                        u1310 0783  
                                      u2030 0375                                        u1127 0A57  
                                      u1071 097D                                        u1215 0FAF  
                                      u1311 0782                                        u2031 0374  
                                      u2015 031A                                        u1080 0D4F  
                                      u1128 0A58                                        u1240 0FD9  
                                      u1081 0D4E                                        u1129 0A5D  
                                      u1241 0FD8                                        u1305 0775  
                                      u1170 0ED1                                        u1090 0D56  
                                      u1330 0794                                        u1410 0E4D  
                                      u1171 0ED0                                        u1091 0D55  
                                      u1235 0FC0                                        u1331 0793  
                                      u1411 0E4C                                        u1180 0A0C  
                                      u1260 0FF7                                        u1420 0E57  
                                      u1181 0A0B                                        u1261 0FF6  
                                      u1245 0FD5                                        u1325 0784  
                                      u1421 0E56                                        u1405 0E3F  
                                      u1510 0C40                                        u1190 0A20  
                                      u1350 07A8                                        u1270 0755  
                                      u1511 0C3F                                        u1191 0A1F  
                                      u1255 0FE9                                        u1351 07A7  
                                      u1335 0790                                        u1271 0754  
                                      u1600 0655                                        u1360 07AD  
                                      u1280 0760                                        u1440 0E6A  
                                      u1520 0EE0                                        u1601 0654  
                                      u1505 0C37                                        u1361 07AC  
                                      u1345 079C                                        u1281 075F  
                                      u1441 0E69                                        u1425 0E53  
                                      u1521 0EDF                                        u1610 0CD7  
                                      u1290 0771                                        u1450 0E6F  
                                      u1370 0E25                                        u1530 0EE6  
                                      u1291 0770                                        u1451 0E6E  
                                      u1435 0E5E                                        u1371 0E24  
                                      u1531 0EE5                                        u1620 0B16  
                                      u1380 0E30                                        u1540 0F1D  
                                      u1700 0C62                                        u1621 0B15  
                                      u1381 0E2F                                        u1541 0F1C  
                                      u1701 0C61                                        u1550 0606  
                                      u1470 0571                                        u1630 07CD  
                                      u1390 0E3B                                        u1710 0C72  
                                      u1551 0605                                        u1471 0570  
                                      u1631 07CC                                        u1615 0CD2  
                                      u1391 0E3A                                        u1711 0C71  
                                      u1560 0610                                        u1480 0598  
                                      u1720 0C80                                        u1640 0A32  
                                      u1561 060F                                        u1481 0597  
                                      u1721 0C7F                                        u1641 0A31  
                                      u1570 062A                                        u1490 05A0  
                                      u1650 0A3F                                        u1571 0629  
                                      u1491 059F                                        u1651 0A3E  
                                      u1580 0634                                        u1581 0633  
                                      u1590 064B                                        u1670 06F1  
                                      u1591 064A                                        u1671 06F0  
                                      u1680 0741                                        u1681 0740  
                                      u1690 0C54                                        u1691 0C53  
                                      u1950 01AD                                        u1951 01AC  
                                      u1960 01EB                                        u1961 01EA  
                                      u1970 01FA                                        u1971 01F9  
                                      u1980 04F2                                        u1981 04F1  
                                      u1990 02BF                                        u1991 02BE  
                                      i1l36 09D6                                        _RCEN 048B  
                                      i1l81 0DC6                                        i1l74 0A99  
                                      i1l88 0ACC         __end_of_timer0_interrupt_ovfRoutine 09C6  
               _timer0_interrupt_ovfRoutine 09B7                                        _RSEN 0489  
                          __end_of_I2C_NACK 0972                          __size_of_DIO_Write 00B2  
          __end_of_I2C_Master_RepeatedStart 098D                            __end_of_ADC_INIT 05EC  
                          __end_of_ADC_READ 0C49                                        _main 09A9  
                                      fp_u0 0054                                        fp_u1 0055  
                                      fp_u2 0056                                        fp_u3 0057  
                                      fp_u4 0058                                        fp_u5 0059  
                                      btemp 007E                           ADC_INIT@ret_error 0050  
                           __end_of_SOS_Run 0376                                        start 0012  
                           EEPROM_Write@add 004B                           ___bmul@multiplier 004C  
               _Timer_Deinit_Configuration0 00E7                 _Timer_Deinit_Configuration1 00DE  
               _Timer_Deinit_Configuration2 00D9                            __end_of_DIO_Read 0ED6  
                      __end_of_EEPROM_Write 0B34                            __end_of_DIO_init 02B8  
                          ?_I2C_Master_Init 0058                            ?_I2C_Master_Wait 0070  
                          ?_I2C_Master_Stop 0070                                ?i1_DIO_Write 0070  
                                     ?_main 0070                                       _ACKEN 048C  
                                     _ACKDT 048D                             __end_of___awdiv 07B7  
                           _sevenSegDisable 0BD5                             __end_of___awmod 0E79  
                             DIO_Write@GPIO 004F                             __end_of___lldiv 1000  
                           ___awdiv@divisor 004A                                       i1l130 0E11  
                                     i1l502 095A                                       i1l179 0CBF  
                                     i1l570 09E8                                       i1l379 04D9  
                                     i1l567 09C5                             ___awdiv@counter 004E  
                                     _TRISC 0087                                       _SSPIF 0063  
                __size_of_global_int_enable 000B                               DIO_Write@pins 004A  
                                     _Task1 0C49                                       _Task2 0F34  
                                     _Task3 0003                      __size_of_I2C_Read_Byte 0017  
                        DIO_Write@ret_error 004E                                       _start 00D3  
                                     fpbase 0053                                       pclath 000A  
                          __end_of_SOS_Init 0564                                       status 0003  
                                     wtemp0 007E                            EEPROM_Write@data 004D  
           pushButtonGetStatus@en_butotn_id 0052                        __size_of_EEPROM_Read 0049  
                   __size_of_clear_int_flag 003C                             __initialization 0015  
                         _last_temp_reading 0028                                 _system_init 0B9D  
                              __end_of_main 09B7                         _special_int_disable 0CFD  
                  __size_of_timer_interrupt 000B              i1sevenSegDisable@en_segment_id 0078  
                        fp__timer_interrupt 006C                                      ??_main 0066  
                         __end_of_DIO_Write 0428            SOS_Create_Task@Function_Consumer 0051  
                         ?_I2C_Master_Start 0070                SOS_Create_Task@u8_Preodicity 004D  
                         ?_I2C_Master_Write 0070                                      ?_Task1 0070  
                                    ?_Task2 0070                                      ?_Task3 0070  
                        ??_I2C_Master_Start 004A                          ??_I2C_Master_Write 004A  
                          ___awdiv@dividend 004C                                  _SwDelay_ms 0D3D  
                                _SwDelay_us 0A41                                   ??_SOS_Run 00EC  
                      ?_special_int_disable 0070                                      i1l4310 09C6  
                                    i1l4150 0ABB                                      i1l4142 0A9B  
                                    i1l4160 0C85                                      i1l4312 09D0  
                                    i1l4152 0ACB                                      i1l4144 0A9D  
                                    i1l4320 0A78                                      i1l4400 0DDB  
                                    i1l4170 0CA1                                      i1l4162 0C87  
                                    i1l4146 0AAC                                      i1l4322 0A85  
                                    i1l4330 0A91                                      i1l4314 0A69  
                                    i1l4410 0DFD                                      i1l4402 0DE1  
                                    i1l4164 0C8C                                      i1l4180 0D7E  
                                    i1l4332 0A95                                      i1l4324 0A86  
                                    i1l4316 0A71                                      i1l4412 0E03  
                                    i1l4404 0DE9                                      i1l4166 0C93  
                                    i1l4174 0CA6                                      i1l4182 0D80  
                                    i1l4326 0A8A                                      i1l4318 0A72  
                                    i1l4414 0E09                                      i1l4406 0DEF  
                                    i1l4168 0C9A                                      i1l4184 0D9B  
                                    i1l4328 0A90                                      i1l4408 0DF5  
                                    i1l4370 09BD                                      i1l4188 0DB6  
                                    i1l4364 0950                                      i1l4372 09C1  
                                    i1l4380 09E4                                      i1l4366 09B7  
                                    i1l4374 09D7                                      i1l4368 09BA  
                                    i1l4376 09DA                                      i1l4392 0DC7  
                                    i1l3850 043A                                      i1l3842 0432  
                                    i1l4378 09E0                                      i1l4394 0DCB  
                                    i1l6500 0CAE                                      i1l3860 045F  
                                    i1l3844 0434                                      i1l3836 0429  
                                    i1l4396 0DCF                                      i1l3862 0464  
                                    i1l3846 0436                                      i1l3854 043C  
                                    i1l3838 042A                                      i1l4398 0DD5  
                                    i1l3880 04A0                                      i1l3872 0478  
                                    i1l3864 0469                                      i1l3848 0438  
                                    i1l3856 0455                                      i1l3890 04C3  
                                    i1l3882 04A5                                      i1l3874 0491  
                                    i1l3866 046E                                      i1l3858 045A  
                                    i1l3876 0496                                      i1l3868 0473  
                                    i1l3878 049B                                      i1l3894 04C8  
                                    i1l3888 04AA                                      i1l3896 04D8  
                                    i1l6490 0AC3                                      i1l6492 0444  
                                    i1l6494 0480                                      i1l6496 04B2  
                                    i1l6488 0DBE                                      i1l6498 04D0  
                                    u146_20 0431                                      u146_21 0430  
                                    u180_20 0DCB                                      u180_21 0DCA  
                                    u173_20 0A71                                      u181_20 0DCF  
                                    u173_21 0A70                                      u181_21 0DCE  
                                    u174_20 0A90                                      u182_20 0DDB  
                                    u174_21 0A8F                                      u182_21 0DDA  
                                    u183_20 0DE1                                      u183_21 0DE0  
                                    u184_20 0DEF                                      u184_21 0DEE  
                                    u185_20 0DF5                                      u185_21 0DF4  
                                    u186_20 0E03                                      u186_21 0E02  
                                    u187_20 0E09                                      u187_21 0E08  
                                __i1fptable 0063                         _pushButtonGetStatus 05EC  
                                    _SSPADD 0093                                      _SSPCON 0014  
                                    _SSPBUF 0013                            __end_of__fptable 0063  
                         ??_SOS_Create_Task 0051                              DIO_Write@value 004B  
                    DIO_Write@first_powerup 0038                    _I2C_Master_RepeatedStart 097F  
                                    ___bmul 0A2A                               _I2C_Read_Byte 0A13  
                   __end_of_sevenSegDisable 0C0E                                   ??___awdiv 004E  
                                 ??___awmod 004E                                   ??___lldiv 0052  
                                _Prescaler0 0066                                  _Prescaler1 0033  
                                _Timer_Init 0078                            ___awdiv@quotient 0050  
                           ___awmod@divisor 004A                        ?_pushButtonGetStatus 0070  
                           ___awmod@counter 004E                               ??_Timer_Start 004C  
                                 ?_I2C_NACK 0070                                      fptable 004E  
                                 ?_ADC_INIT 0070                                   ?_ADC_READ 0054  
                                    fptotal 0006                       _adc_interrupt_routine 09C6  
                                    saved_w 007E                             i1DIO_Write@GPIO 0075  
                     ??_special_int_disable 004A                             i1DIO_Write@pins 0070  
                                 ?_DIO_Read 004A                           SOS_Init@ConfigPtr 0056  
                   __end_of__initialization 004A                ?_timer1_interrupt_ovfRoutine 0070  
                                 ?_DIO_init 004A                       __size_of_EEPROM_Write 0034  
                     SOS_Init@u8_channel_ID 0054                         ___bmul@multiplicand 004A  
                      Timer_Start@ret_error 004F                             sevenSegInit@ret 0054  
                            ?_I2C_Read_Byte 0070                 special_int_enable@ret_error 004D  
                            __pcstackCOMMON 0070                               __end_of_Task1 0C84  
                             __end_of_Task2 0F98                               __end_of_Task3 0004  
                              __pidataBANK0 0943                                __pidataBANK1 0ACD  
                               SwDelay_ms@n 004A                                 SwDelay_us@n 004A  
                __end_of_special_int_enable 06E4                       ??_pushButtonGetStatus 0050  
                                 ?_SOS_Init 0070              fp__timer0_interrupt_ovfRoutine 0072  
                                ??_I2C_NACK 004A                        __size_ofi1_DIO_Write 00B2  
                                ??_ADC_INIT 004E                                  ??_ADC_READ 0056  
                                   ??_Task1 0054                                     ??_Task2 0060  
                                   ??_Task3 004A                           ??_timer_interrupt 0070  
                            _u8_timer2Count 0032                         __end_of_Timer_Start 0B9D  
                       Timer_Init@Timer_cfg 0051                       __end_of_sevenSegWrite 0F34  
                               ?_SwDelay_ms 004A                                 ?_SwDelay_us 004A  
                              _EEPROM_Write 0B00                                  __pbssBANK0 0020  
                                __pbssBANK1 00D3                                  __pbssBANK3 0190  
                                ??_DIO_Read 004C                                  ??_DIO_init 004A  
                                _checkmyisr 0DC7                            _u8_Is_Intialized 0036  
             ??_timer1_interrupt_ovfRoutine 0070                                Task2@EE_Data 0062  
                            _clear_int_flag 0C84                           DIO_Read@ret_error 004E  
                                __pmaintext 09A9                                     ?___bmul 004A  
                          ?_sevenSegDisable 0070                                  __pintentry 0004  
                               ?_Timer_Init 004E                       __end_of_seven_seg_POV 0A9A  
                   __size_of_sevenSegEnable 004A                                     _ADC_INT 0042  
                                   _ACKSTAT 048E                                  ??_SOS_Init 0052  
                    ?_adc_interrupt_routine 0070                           _TMU_Configuration 0806  
                          ADC_INIT@ADC_info 0051                                     _SSPCON2 0091  
                              _Buffer_Array 0190                                     _SSPSTAT 0094  
                                __stringtab 0800                                     _SOS_Run 02B8  
                                   i1fpbase 0068                      __end_of_clear_int_flag 0CC0  
                           ??_I2C_Read_Byte 004A                  DIO_init@first_powerup_init 0039  
                              ?_system_init 0070                             _u16_result_data 002C  
                           __size_of___bmul 0017                                     ___awdiv 074E  
                                   ___awmod 0E1E                                     ___lldiv 0F98  
                       __size_of_SwDelay_ms 0040                         __size_of_SwDelay_us 0028  
                 __end_of_TMU_Configuration 0808                               ?_sevenSegInit 0070  
                                   __ptext1 0B9D                                     __ptext2 04DA  
                                   __ptext3 06E4                                     __ptext4 02B8  
                                   __ptext5 0A2A                                     __ptext6 0F34  
                                   __ptext7 0C49                                     __ptext8 0003  
                                   __ptext9 0ED6        __size_of_timer1_interrupt_ovfRoutine 0012  
                       __size_of__i1fptable 0015                                 _Timer_Start 0B68  
                                   _is_init 003A                            ___awmod@dividend 004C  
                       Timer_Init@ret_error 0050                             _SOS_Create_Task 06E4  
                                 _DIO_Write 0376                    __size_of_I2C_Master_Init 003D  
                  __size_of_I2C_Master_Wait 000D                    __size_of_I2C_Master_Stop 000E  
                                   clrloop0 0949                        end_of_initialization 004A  
                ??_I2C_Master_RepeatedStart 004A                         __size_of_Timer_Init 012A  
                             ??_EEPROM_Read 004D                                 ?_checkmyisr 0070  
                           ?_clear_int_flag 0070                   __size_of_I2C_Master_Start 000E  
                 __size_of_I2C_Master_Write 0017                             ___lldiv@divisor 004A  
                             _Segments_Code 00A0                             ___lldiv@counter 0057  
                              _disp_counter 0040               SOS_Create_Task@u16_Time_delay 004F  
                            ??_sevenSegInit 0054                    sevenSegEnable@segment_id 007C  
                          i1DIO_Write@value 0071                                  ?_DIO_Write 004A  
                         __size_of_I2C_NACK 000C                           __size_of_ADC_INIT 0088  
                         __size_of_ADC_READ 003B               pushButtonGetStatus@pushreturn 0053  
        pushButtonGetStatus@u8_Button_press 0043                   _Dio_configutation_A_7_seg 0067  
     clear_int_flag@u8_interrupt_prepherals 0073                           __size_of_DIO_Read 005D  
                         __size_of_DIO_init 0116                               _TIMER0OVF_INT 003D  
                             _TIMER1OVF_INT 003C                               _TIMER2OVF_INT 003B  
                       __end_of_EEPROM_Read 0800                              _sevenSegEnable 0D7D  
                            __end_of___bmul 0A41                             _timer_interrupt 0950  
                      _u8global_int_enabled 003F                          SOS_Create_Task@ret 0052  
                   __end_of_SOS_Create_Task 074E                         __size_of_checkmyisr 0057  
                    Timer_Start@Timer_CH_NO 004E                 __end_of_special_int_disable 0D3D  
                       start_initialization 0015                           __size_of_SOS_Init 008A  
                    Timer_Start@Timer_Count 004A                          _special_int_enable 066B  
                              ??_SwDelay_ms 004E                                ??_SwDelay_us 004E  
              ?_timer0_interrupt_ovfRoutine 0070                           ??_I2C_Master_Init 005C  
                         ??_I2C_Master_Wait 004A                           ??_I2C_Master_Stop 004A  
          SOS_Create_Task@u8_function_index 004E                         ?_special_int_enable 0070  
                          _u8_Init_finished 0037                           DIO_init@ret_error 004C  
               __end_of_pushButtonGetStatus 066B                      __end_of_sevenSegEnable 0DC7  
                                  ??___bmul 004B                            sevenSegWrite@ret 0054  
                    sevenSegWrite@u8_number 0055                                  init_fetch0 09E9  
                       _Dio_configutation_B 00B3                         _Dio_configutation_C 00AF  
                       _Dio_configutation_D 00CF                         _Dio_configutation_E 00E3  
                              ??_Timer_Init 004E                                 __pdataBANK0 0066  
                               __pdataBANK1 00A0                     ??_adc_interrupt_routine 0074  
                      __size_of_system_init 0038                               ??i1_DIO_Write 0072  
                        __end_of_SwDelay_ms 0D7D                          __end_of_SwDelay_us 0A69  
                      ??_special_int_enable 004A                          __end_of__i1fptable 0078  
                                 ___latbits 0002                                 ??_DIO_Write 004C  
                               SOS_Init@ret 0055                               __pcstackBANK0 0046  
                             __pcstackBANK1 00EC                           __size_of__fptable 0015  
 special_int_enable@u8_interrupt_prepherals 004C                                    ?_SOS_Run 0070  
                        __end_of_Timer_Init 01A2                        __end_of_sevenSegInit 0B68  
                          DIO_init@DIO_info 004D                                 _EEPROM_Read 07B7  
                   _u8prepheral_int_enabled 003E               ??_timer0_interrupt_ovfRoutine 0070  
                          _I2C_Master_Start 098D                    _Timer_Configuration2_SOS 00B7  
                          _I2C_Master_Write 09FC                     __end_of_timer_interrupt 095B  
                      _Timer_Configuration0 00BC                        _Timer_Configuration1 00AA  
                                 __pfunctab 004E                             ?_sevenSegEnable 0070  
                                  ?___awdiv 004A                                    ?___awmod 004A  
                                  ?___lldiv 004A                           i1_sevenSegDisable 0A9A  
                    __size_of_sevenSegWrite 005E                        I2C_Master_Write@data 004A  
                          ?_SOS_Create_Task 004D                                   __pstrings 0800  
                        ?i1_sevenSegDisable 0070                                ?_Timer_Start 004A  
                                  _I2C_NACK 0966                                    _ADC_INIT 0564  
                                  _ADC_READ 0C0E                    __size_of_sevenSegDisable 0039  
                       __end_ofi1_DIO_Write 04DA                              __size_of_Task1 003B  
                            __size_of_Task2 0064                              __size_of_Task3 0001  
                       ??i1_sevenSegDisable 0076                            ??_clear_int_flag 0070  
                                  _DIO_Read 0E79         __end_of_timer1_interrupt_ovfRoutine 09E9  
               _timer1_interrupt_ovfRoutine 09D7                      __size_of_seven_seg_POV 0031  
                          fp__seven_seg_POV 006F                           interrupt_function 0004  
                                  _DIO_init 01A2                                ??_checkmyisr 0046  
                                 clear_ram0 0948                                 _arr_display 002A  
                     Task2@readings_counter 002E                     _Dio_configutation_A_ADC 00CB  
                     __end_of_I2C_Read_Byte 0A2A                   __end_ofi1_sevenSegDisable 0ACD  
      __size_of_timer0_interrupt_ovfRoutine 000F                                 __stringbase 0805  
                                  _SOS_Init 04DA                               Task2@adc_data 0026  
                        __end_of_checkmyisr 0E1E                        i1sevenSegDisable@ret 0079  
                            _stu8_increment 0031                         I2C_Master_Init@baud 0058  
                                  i1fptable 0063                                    i1fptotal 000B  
                             _sevenSegWrite 0ED6                sevenSegDisable@en_segment_id 0052  
                          __size_of_SOS_Run 00BE                            ?_timer_interrupt 0070  
special_int_disable@u8_interrupt_prepherals 004C                                _u8_FUN_index 0035  
         __size_of_I2C_Master_RepeatedStart 000E                            __size_of___awdiv 0069  
                          __size_of___awmod 005B                   ?_I2C_Master_RepeatedStart 0070  
                          __size_of___lldiv 0068                  _Timer_Configuration1_7_seg 00C1  
                             _seven_seg_POV 0A69                                 i1_DIO_Write 0428  
                        __end_of__stringtab 0806                       SwDelay_ms@counter_256 0052  
                                  __fptable 004E                             _I2C_Master_Init 0CC0  
                           _I2C_Master_Wait 0972                             _I2C_Master_Stop 099B  
                     _u8Excution_to_be_done 0034                                    __ptext10 0E1E  
                                  __ptext11 074E                                    __ptext20 0B00  
                                  __ptext12 0B68                                    __ptext21 07B7  
                                  __ptext13 0B34                                    __ptext30 0A41  
                                  __ptext22 0A13                                    __ptext14 0BD5  
                                  __ptext31 0D3D                                    __ptext23 0966  
                                  __ptext15 0376                                    __ptext40 09B7  
                                  __ptext32 0564                                    __ptext24 09FC  
                                  __ptext16 0078                                    __ptext41 0A69  
                                  __ptext33 066B                                    __ptext25 099B  
                                  __ptext17 01A2                                    __ptext42 0950  
                                  __ptext34 095B                                    __ptext26 098D  
                                  __ptext18 0CC0                                    __ptext43 0D7D  
                                  __ptext35 0CFD                                    __ptext27 097F  
                                  __ptext19 0F98                                    __ptext44 0A9A  
                                  __ptext36 05EC                                    __ptext28 0972  
                                  __ptext45 0428                                    __ptext37 0E79  
                                  __ptext29 0C0E                                    __ptext46 09C6  
                                  __ptext38 0DC7                                    __ptext47 0C84  
                                  __ptext39 09D7                       __size_of_sevenSegInit 0034  
                      i1DIO_Write@ret_error 0074                              ?_sevenSegWrite 0070  
                             ?_EEPROM_Write 004B                           ??_sevenSegDisable 0050  
                             __size_of_main 000E       pushButtonGetStatus@u8_S_button_status 0023  
                                  fp__Task1 005D                                    fp__Task2 0060  
                                  fp__Task3 005A                  __size_ofi1_sevenSegDisable 0033  
              special_int_disable@ret_error 004D                              ?_seven_seg_POV 0070  
            __size_of_adc_interrupt_routine 0011               __end_of_adc_interrupt_routine 09D7  
                              _sevenSegInit 0B34                    __end_of_I2C_Master_Start 099B  
                  __end_of_I2C_Master_Write 0A13                        __size_of_Timer_Start 0035  
                          Task1@u8_Counter1 002F                                    init_ram0 09ED  
                         _global_int_enable 095B                              ??_EEPROM_Write 004E  
                        ?_global_int_enable 0070                                    intlevel1 004E  
                      SwDelay_ms@counter_21 0053                __size_of_special_int_disable 0040  
                              ?_EEPROM_Read 004B                            ___lldiv@dividend 004E  
                          ??_sevenSegEnable 007A                         ??_global_int_enable 004A  
                                 stringcode 0800                               ??_system_init 0057  
                   __end_of_I2C_Master_Init 0CFD                     __end_of_I2C_Master_Wait 097F  
                   __end_of_I2C_Master_Stop 09A9                            _ADC_Cnfiguration 00C6  
                               _ovf_counter 0041                             Task1@u8_Counter 0030  
              __size_of_pushButtonGetStatus 007F              fp__timer1_interrupt_ovfRoutine 0075  
               __size_of_special_int_enable 0079                            ___lldiv@quotient 0053  
                 __end_of_global_int_enable 0966                                    stringdir 0800  
                                  stringtab 0800                             ??_sevenSegWrite 0052  
                              DIO_Read@GPIO 004F                                _Start_status 0020  
                              DIO_Read@data 004B                                DIO_Read@pins 004A  
                           EEPROM_Read@Data 004D                              EEPROM_Read@add 004B  
