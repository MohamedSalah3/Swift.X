

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Tue Jul 21 07:15:59 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	idataBANK1,global,class=CODE,delta=2,noexec
     6                           	psect	idataBANK3,global,class=CODE,delta=2,noexec
     7                           	psect	strings,global,class=STRING,delta=2,noexec
     8                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cinit,global,class=CODE,merge=1,delta=2
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,noexec
    16                           	psect	inittext,global,class=CODE,delta=2
    17                           	psect	clrtext,global,class=CODE,delta=2
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    21                           	psect	maintext,global,class=CODE,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2,group=1
    38                           	psect	text17,local,class=CODE,merge=1,delta=2
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2,group=1
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text23,local,class=CODE,merge=1,delta=2
    45                           	psect	text24,local,class=CODE,merge=1,delta=2
    46                           	psect	text25,local,class=CODE,merge=1,delta=2
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	text30,local,class=CODE,merge=1,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text39,local,class=CODE,merge=1,delta=2
    62                           	psect	text40,local,class=CODE,merge=1,delta=2
    63                           	psect	text41,local,class=CODE,merge=1,delta=2
    64                           	psect	text42,local,class=CODE,merge=1,delta=2
    65                           	psect	text43,local,class=CODE,merge=1,delta=2
    66                           	psect	text44,local,class=CODE,merge=1,delta=2
    67                           	psect	text45,local,class=CODE,merge=1,delta=2
    68                           	psect	text46,local,class=CODE,merge=1,delta=2
    69                           	psect	functab,global,class=ENTRY,delta=2
    70                           	dabs	1,0x7E,2
    71  0000                     
    72                           ; Version 2.20
    73                           ; Generated 12/02/2020 GMT
    74                           ; 
    75                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    76                           ; All rights reserved.
    77                           ; 
    78                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    79                           ; 
    80                           ; Redistribution and use in source and binary forms, with or without modification, are
    81                           ; permitted provided that the following conditions are met:
    82                           ; 
    83                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    84                           ;        conditions and the following disclaimer.
    85                           ; 
    86                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    87                           ;        of conditions and the following disclaimer in the documentation and/or other
    88                           ;        materials provided with the distribution.
    89                           ; 
    90                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    91                           ;        software without specific prior written permission.
    92                           ; 
    93                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    94                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    95                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    96                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    97                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    98                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    99                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   100                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   101                           ; 
   102                           ; 
   103                           ; Code-generator required, PIC16F877A Definitions
   104                           ; 
   105                           ; SFR Addresses
   106  0000                     	;# 
   107  0001                     	;# 
   108  0002                     	;# 
   109  0003                     	;# 
   110  0004                     	;# 
   111  0005                     	;# 
   112  0006                     	;# 
   113  0007                     	;# 
   114  0008                     	;# 
   115  0009                     	;# 
   116  000A                     	;# 
   117  000B                     	;# 
   118  000C                     	;# 
   119  000D                     	;# 
   120  000E                     	;# 
   121  000E                     	;# 
   122  000F                     	;# 
   123  0010                     	;# 
   124  0011                     	;# 
   125  0012                     	;# 
   126  0013                     	;# 
   127  0014                     	;# 
   128  0015                     	;# 
   129  0015                     	;# 
   130  0016                     	;# 
   131  0017                     	;# 
   132  0018                     	;# 
   133  0019                     	;# 
   134  001A                     	;# 
   135  001B                     	;# 
   136  001B                     	;# 
   137  001C                     	;# 
   138  001D                     	;# 
   139  001E                     	;# 
   140  001F                     	;# 
   141  0081                     	;# 
   142  0085                     	;# 
   143  0086                     	;# 
   144  0087                     	;# 
   145  0088                     	;# 
   146  0089                     	;# 
   147  008C                     	;# 
   148  008D                     	;# 
   149  008E                     	;# 
   150  0091                     	;# 
   151  0092                     	;# 
   152  0093                     	;# 
   153  0094                     	;# 
   154  0098                     	;# 
   155  0099                     	;# 
   156  009C                     	;# 
   157  009D                     	;# 
   158  009E                     	;# 
   159  009F                     	;# 
   160  010C                     	;# 
   161  010D                     	;# 
   162  010E                     	;# 
   163  010F                     	;# 
   164  018C                     	;# 
   165  018D                     	;# 
   166  0000                     	;# 
   167  0001                     	;# 
   168  0002                     	;# 
   169  0003                     	;# 
   170  0004                     	;# 
   171  0005                     	;# 
   172  0006                     	;# 
   173  0007                     	;# 
   174  0008                     	;# 
   175  0009                     	;# 
   176  000A                     	;# 
   177  000B                     	;# 
   178  000C                     	;# 
   179  000D                     	;# 
   180  000E                     	;# 
   181  000E                     	;# 
   182  000F                     	;# 
   183  0010                     	;# 
   184  0011                     	;# 
   185  0012                     	;# 
   186  0013                     	;# 
   187  0014                     	;# 
   188  0015                     	;# 
   189  0015                     	;# 
   190  0016                     	;# 
   191  0017                     	;# 
   192  0018                     	;# 
   193  0019                     	;# 
   194  001A                     	;# 
   195  001B                     	;# 
   196  001B                     	;# 
   197  001C                     	;# 
   198  001D                     	;# 
   199  001E                     	;# 
   200  001F                     	;# 
   201  0081                     	;# 
   202  0085                     	;# 
   203  0086                     	;# 
   204  0087                     	;# 
   205  0088                     	;# 
   206  0089                     	;# 
   207  008C                     	;# 
   208  008D                     	;# 
   209  008E                     	;# 
   210  0091                     	;# 
   211  0092                     	;# 
   212  0093                     	;# 
   213  0094                     	;# 
   214  0098                     	;# 
   215  0099                     	;# 
   216  009C                     	;# 
   217  009D                     	;# 
   218  009E                     	;# 
   219  009F                     	;# 
   220  010C                     	;# 
   221  010D                     	;# 
   222  010E                     	;# 
   223  010F                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226                           
   227                           	psect	idataBANK0
   228  0982                     __pidataBANK0:
   229                           
   230                           ;initializer for Task2@EE_Address
   231  0982  3420               	retlw	32
   232                           
   233                           ;initializer for _Prescaler0
   234  0983  34FF               	retlw	255
   235                           
   236                           ;initializer for _Dio_configutation_A_ADC
   237  0984  3400               	retlw	0
   238  0985  3401               	retlw	1
   239  0986  3400               	retlw	0
   240  0987  3406               	retlw	6
   241                           
   242                           ;initializer for _Dio_configutation_D
   243  0988  3403               	retlw	3
   244  0989  34FF               	retlw	255
   245  098A  34FF               	retlw	255
   246  098B  3400               	retlw	0
   247                           
   248                           ;initializer for _Dio_configutation_A_7_seg
   249  098C  3400               	retlw	0
   250  098D  340C               	retlw	12
   251  098E  34FF               	retlw	255
   252  098F  3406               	retlw	6
   253                           
   254                           	psect	idataBANK1
   255  0A18                     __pidataBANK1:
   256                           
   257                           ;initializer for _Timer_Configuration1
   258  0A18  3401               	retlw	1
   259  0A19  3400               	retlw	0
   260  0A1A  3401               	retlw	1
   261  0A1B  3430               	retlw	48
   262  0A1C  340D               	retlw	low (fp__timer1_interrupt_ovfRoutine-i1fpbase)
   263                           
   264                           ;initializer for _Dio_configutation_B
   265  0A1D  3401               	retlw	1
   266  0A1E  34FF               	retlw	255
   267  0A1F  34FF               	retlw	255
   268  0A20  3400               	retlw	0
   269                           
   270                           ;initializer for _Timer_Configuration2_SOS
   271  0A21  3402               	retlw	2
   272  0A22  3400               	retlw	0
   273  0A23  3402               	retlw	2
   274  0A24  3402               	retlw	2
   275  0A25  3404               	retlw	low (fp__timer_interrupt-i1fpbase)
   276                           
   277                           ;initializer for _Timer_Configuration0
   278  0A26  3400               	retlw	0
   279  0A27  34C7               	retlw	199
   280  0A28  34A0               	retlw	160
   281  0A29  3400               	retlw	0
   282  0A2A  340A               	retlw	low (fp__timer0_interrupt_ovfRoutine-i1fpbase)
   283                           
   284                           ;initializer for _Timer_Configuration1_7_seg
   285  0A2B  3400               	retlw	0
   286  0A2C  34C2               	retlw	194
   287  0A2D  34A0               	retlw	160
   288  0A2E  3400               	retlw	0
   289  0A2F  3407               	retlw	low (fp__seven_seg_POV-i1fpbase)
   290                           
   291                           ;initializer for _ADC_Cnfiguration
   292  0A30  3400               	retlw	0
   293  0A31  3401               	retlw	1
   294  0A32  3440               	retlw	64
   295  0A33  3480               	retlw	128
   296  0A34  3440               	retlw	64
   297                           
   298                           ;initializer for _Dio_configutation_C
   299  0A35  3402               	retlw	2
   300  0A36  34F8               	retlw	248
   301  0A37  3400               	retlw	0
   302  0A38  3400               	retlw	0
   303                           
   304                           	psect	idataBANK3
   305  091E                     __pidataBANK3:
   306                           
   307                           ;initializer for _Segments_Code
   308  091E  34FE               	retlw	254
   309  091F  3406               	retlw	6
   310  0920  346D               	retlw	109
   311  0921  344F               	retlw	79
   312  0922  3466               	retlw	102
   313  0923  346D               	retlw	109
   314  0924  347D               	retlw	125
   315  0925  3407               	retlw	7
   316  0926  347F               	retlw	127
   317  0927  346F               	retlw	111
   318                           
   319                           	psect	strings
   320  0800                     __pstrings:
   321  0800                     stringtab:
   322  0800                     __stringtab:
   323  0800                     stringcode:	
   324                           ;	String table - string pointers are 1 byte each
   325                           
   326  0800                     stringdir:
   327  0800  3008               	movlw	high stringdir
   328  0801  008A               	movwf	10
   329  0802  0804               	movf	4,w
   330  0803  0A84               	incf	4,f
   331  0804  0782               	addwf	2,f
   332  0805                     __stringbase:
   333  0805  3400               	retlw	0
   334  0806                     __end_of__stringtab:
   335  0806                     _TMU_Configuration:
   336  0806  3401               	retlw	1
   337  0807  3402               	retlw	2
   338  0808                     __end_of_TMU_Configuration:
   339                           
   340                           	psect	nvBANK0
   341  006B                     __pnvBANK0:
   342  006B                     _ret:
   343  006B                     	ds	1
   344  0013                     _SSPBUF	set	19
   345  0014                     _SSPCON	set	20
   346  0063                     _SSPIF	set	99
   347  0087                     _TRISC	set	135
   348  0094                     _SSPSTAT	set	148
   349  0093                     _SSPADD	set	147
   350  0091                     _SSPCON2	set	145
   351  048C                     _ACKEN	set	1164
   352  048D                     _ACKDT	set	1165
   353  048B                     _RCEN	set	1163
   354  048E                     _ACKSTAT	set	1166
   355  048A                     _PEN	set	1162
   356  0489                     _RSEN	set	1161
   357  0488                     _SEN	set	1160
   358                           
   359                           	psect	cinit
   360  0015                     start_initialization:	
   361                           ; #config settings
   362                           
   363  0015                     __initialization:
   364                           
   365                           ; Initialize objects allocated to BANK3
   366  0015  1783               	bsf	3,7	;select IRP bank2
   367  0016  30AE               	movlw	low (__pdataBANK3+10)
   368  0017  00FD               	movwf	btemp+-1
   369  0018  3009               	movlw	high __pidataBANK3
   370  0019  00FE               	movwf	btemp
   371  001A  301E               	movlw	low __pidataBANK3
   372  001B  00FF               	movwf	btemp+1
   373  001C  30A4               	movlw	low __pdataBANK3
   374  001D  0084               	movwf	4
   375  001E  120A  158A  21C4  120A  118A  	fcall	init_ram0
   376                           
   377                           ; Initialize objects allocated to BANK1
   378  0023  1383               	bcf	3,7	;select IRP bank0
   379  0024  30EF               	movlw	low (__pdataBANK1+33)
   380  0025  00FD               	movwf	btemp+-1
   381  0026  300A               	movlw	high __pidataBANK1
   382  0027  00FE               	movwf	btemp
   383  0028  3018               	movlw	low __pidataBANK1
   384  0029  00FF               	movwf	btemp+1
   385  002A  30CE               	movlw	low __pdataBANK1
   386  002B  0084               	movwf	4
   387  002C  120A  158A  21C4  120A  118A  	fcall	init_ram0
   388                           
   389                           ; Initialize objects allocated to BANK0
   390  0031  306B               	movlw	low (__pdataBANK0+14)
   391  0032  00FD               	movwf	btemp+-1
   392  0033  3009               	movlw	high __pidataBANK0
   393  0034  00FE               	movwf	btemp
   394  0035  3082               	movlw	low __pidataBANK0
   395  0036  00FF               	movwf	btemp+1
   396  0037  305D               	movlw	low __pdataBANK0
   397  0038  0084               	movwf	4
   398  0039  120A  158A  21C4  120A  118A  	fcall	init_ram0
   399                           
   400                           ; Clear objects allocated to BANK3
   401  003E  1783               	bsf	3,7	;select IRP bank2
   402  003F  3090               	movlw	low __pbssBANK3
   403  0040  0084               	movwf	4
   404  0041  30A4               	movlw	low (__pbssBANK3+20)
   405  0042  120A  158A  2116  120A  118A  	fcall	clear_ram0
   406                           
   407                           ; Clear objects allocated to BANK1
   408  0047  1383               	bcf	3,7	;select IRP bank0
   409  0048  30A0               	movlw	low __pbssBANK1
   410  0049  0084               	movwf	4
   411  004A  30CE               	movlw	low (__pbssBANK1+46)
   412  004B  120A  158A  2116  120A  118A  	fcall	clear_ram0
   413                           
   414                           ; Clear objects allocated to BANK0
   415  0050  3020               	movlw	low __pbssBANK0
   416  0051  0084               	movwf	4
   417  0052  3047               	movlw	low (__pbssBANK0+39)
   418  0053  120A  158A  2116  120A  118A  	fcall	clear_ram0
   419  0058                     end_of_initialization:	
   420                           ;End of C runtime variable initialization code
   421                           
   422  0058                     __end_of__initialization:
   423  0058  0183               	clrf	3
   424  0059  120A  158A  2974   	ljmp	_main	;jump to C main() function
   425                           
   426                           	psect	bssBANK0
   427  0020                     __pbssBANK0:
   428  0020                     _Start_status:
   429  0020                     	ds	3
   430  0023                     pushButtonGetStatus@u8_S_button_status:
   431  0023                     	ds	3
   432  0026                     Task2@adc_data:
   433  0026                     	ds	2
   434  0028                     _last_temp_reading:
   435  0028                     	ds	2
   436  002A                     _arr_display:
   437  002A                     	ds	2
   438  002C                     _u16_result_data:
   439  002C                     	ds	2
   440  002E                     Task2@readings_counter:
   441  002E                     	ds	1
   442  002F                     Task2@EE_Data:
   443  002F                     	ds	1
   444  0030                     Task1@u8_Counter2:
   445  0030                     	ds	1
   446  0031                     Task1@u8_Counter:
   447  0031                     	ds	1
   448  0032                     Task1@u8_Counter1:
   449  0032                     	ds	1
   450  0033                     _u8_timer2Count:
   451  0033                     	ds	1
   452  0034                     _Prescaler1:
   453  0034                     	ds	1
   454  0035                     _u8Excution_to_be_done:
   455  0035                     	ds	1
   456  0036                     _u8_FUN_index:
   457  0036                     	ds	1
   458  0037                     _u8_Is_Intialized:
   459  0037                     	ds	1
   460  0038                     _u8_Init_finished:
   461  0038                     	ds	1
   462  0039                     DIO_Write@first_powerup:
   463  0039                     	ds	1
   464  003A                     DIO_init@first_powerup_init:
   465  003A                     	ds	1
   466  003B                     _is_init:
   467  003B                     	ds	1
   468  003C                     _TIMER2OVF_INT:
   469  003C                     	ds	1
   470  003D                     _TIMER1OVF_INT:
   471  003D                     	ds	1
   472  003E                     _TIMER0OVF_INT:
   473  003E                     	ds	1
   474  003F                     _u8prepheral_int_enabled:
   475  003F                     	ds	1
   476  0040                     _u8global_int_enabled:
   477  0040                     	ds	1
   478  0041                     _disp_counter:
   479  0041                     	ds	1
   480  0042                     _ovf_counter:
   481  0042                     	ds	1
   482  0043                     _ADC_INT:
   483  0043                     	ds	1
   484  0044                     pushButtonGetStatus@u8_Button_press:
   485  0044                     	ds	3
   486                           
   487                           	psect	dataBANK0
   488  005D                     __pdataBANK0:
   489  005D                     Task2@EE_Address:
   490  005D                     	ds	1
   491  005E                     _Prescaler0:
   492  005E                     	ds	1
   493  005F                     _Dio_configutation_A_ADC:
   494  005F                     	ds	4
   495  0063                     _Dio_configutation_D:
   496  0063                     	ds	4
   497  0067                     _Dio_configutation_A_7_seg:
   498  0067                     	ds	4
   499                           
   500                           	psect	bssBANK1
   501  00A0                     __pbssBANK1:
   502  00A0                     _Buffer_Array:
   503  00A0                     	ds	21
   504  00B5                     _start:
   505  00B5                     	ds	6
   506  00BB                     _Timer_Deinit_Configuration2:
   507  00BB                     	ds	5
   508  00C0                     _Timer_Deinit_Configuration1:
   509  00C0                     	ds	5
   510  00C5                     _Dio_configutation_E:
   511  00C5                     	ds	4
   512  00C9                     _Timer_Deinit_Configuration0:
   513  00C9                     	ds	5
   514                           
   515                           	psect	dataBANK1
   516  00CE                     __pdataBANK1:
   517  00CE                     _Timer_Configuration1:
   518  00CE                     	ds	5
   519  00D3                     _Dio_configutation_B:
   520  00D3                     	ds	4
   521  00D7                     _Timer_Configuration2_SOS:
   522  00D7                     	ds	5
   523  00DC                     _Timer_Configuration0:
   524  00DC                     	ds	5
   525  00E1                     _Timer_Configuration1_7_seg:
   526  00E1                     	ds	5
   527  00E6                     _ADC_Cnfiguration:
   528  00E6                     	ds	5
   529  00EB                     _Dio_configutation_C:
   530  00EB                     	ds	4
   531                           
   532                           	psect	bssBANK3
   533  0190                     __pbssBANK3:
   534  0190                     _last_Ten_readings:
   535  0190                     	ds	20
   536                           
   537                           	psect	dataBANK3
   538  01A4                     __pdataBANK3:
   539  01A4                     _Segments_Code:
   540  01A4                     	ds	10
   541                           
   542                           	psect	inittext
   543  09C0                     init_fetch0:	
   544                           ;	Called with low address in FSR and high address in W
   545                           
   546  09C0  087E               	movf	btemp,w
   547  09C1  008A               	movwf	10
   548  09C2  087F               	movf	btemp+1,w
   549  09C3  0082               	movwf	2
   550  09C4                     init_ram0:	
   551                           ;Called with:
   552                           ;	high address of idata address in btemp 
   553                           ;	low address of idata address in btemp+1 
   554                           ;	low address of data in FSR
   555                           ;	high address + 1 of data in btemp-1
   556                           
   557  09C4  120A  158A  21C0  120A  158A  	fcall	init_fetch0
   558  09C9  0080               	movwf	0
   559  09CA  0A84               	incf	4,f
   560  09CB  0804               	movf	4,w
   561  09CC  067D               	xorwf	btemp+-1,w
   562  09CD  1903               	btfsc	3,2
   563  09CE  3400               	retlw	0
   564  09CF  0AFF               	incf	btemp+1,f
   565  09D0  1903               	btfsc	3,2
   566  09D1  0AFE               	incf	btemp,f
   567  09D2  29C4               	goto	init_ram0
   568                           
   569                           	psect	clrtext
   570  0916                     clear_ram0:	
   571                           ;	Called with FSR containing the base address, and
   572                           ;	W with the last address+1
   573                           
   574  0916  0064               	clrwdt	;clear the watchdog before getting into this loop
   575  0917                     clrloop0:
   576  0917  0180               	clrf	0	;clear RAM location pointed to by FSR
   577  0918  0A84               	incf	4,f	;increment pointer
   578  0919  0604               	xorwf	4,w	;XOR with final address
   579  091A  1903               	btfsc	3,2	;have we reached the end yet?
   580  091B  3400               	retlw	0	;all done for this memory range, return
   581  091C  0604               	xorwf	4,w	;XOR again to restore value
   582  091D  2917               	goto	clrloop0	;do the next byte
   583                           
   584                           	psect	cstackBANK3
   585  01AE                     __pcstackBANK3:
   586  01AE                     ??_I2C_Master_Init:
   587  01AE                     ??_SOS_Run:	
   588                           ; 1 bytes @ 0x0
   589                           
   590                           
   591                           ; 1 bytes @ 0x0
   592  01AE                     	ds	4
   593                           
   594                           	psect	cstackCOMMON
   595  0070                     __pcstackCOMMON:
   596  0070                     ?_special_int_enable:
   597  0070                     ?_adc_interrupt_routine:	
   598                           ; 1 bytes @ 0x0
   599                           
   600  0070                     ??_adc_interrupt_routine:	
   601                           ; 1 bytes @ 0x0
   602                           
   603  0070                     ?_special_int_disable:	
   604                           ; 1 bytes @ 0x0
   605                           
   606  0070                     ?_seven_seg_POV:	
   607                           ; 1 bytes @ 0x0
   608                           
   609  0070                     ?_sevenSegDisable:	
   610                           ; 1 bytes @ 0x0
   611                           
   612  0070                     ?_sevenSegEnable:	
   613                           ; 1 bytes @ 0x0
   614                           
   615  0070                     ?_global_int_enable:	
   616                           ; 1 bytes @ 0x0
   617                           
   618  0070                     ?_timer_interrupt:	
   619                           ; 1 bytes @ 0x0
   620                           
   621  0070                     ??_timer_interrupt:	
   622                           ; 1 bytes @ 0x0
   623                           
   624  0070                     ?_Task1:	
   625                           ; 1 bytes @ 0x0
   626                           
   627  0070                     ?_Task2:	
   628                           ; 1 bytes @ 0x0
   629                           
   630  0070                     ?_Task3:	
   631                           ; 1 bytes @ 0x0
   632                           
   633  0070                     ?_ADC_INIT:	
   634                           ; 1 bytes @ 0x0
   635                           
   636  0070                     ?_sevenSegInit:	
   637                           ; 1 bytes @ 0x0
   638                           
   639  0070                     ?_sevenSegWrite:	
   640                           ; 1 bytes @ 0x0
   641                           
   642  0070                     ?_checkmyisr:	
   643                           ; 1 bytes @ 0x0
   644                           
   645  0070                     ?_pushButtonGetStatus:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0070                     ?_I2C_Master_Wait:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0070                     ?_I2C_Master_Start:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ?_I2C_Master_RepeatedStart:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0070                     ?_I2C_Master_Stop:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0070                     ?_I2C_Master_Write:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?_I2C_Read_Byte:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ?_I2C_NACK:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ?_SOS_Init:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_SOS_Run:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_timer0_interrupt_ovfRoutine:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ??_timer0_interrupt_ovfRoutine:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_timer1_interrupt_ovfRoutine:	
   682                           ; 1 bytes @ 0x0
   683                           
   684  0070                     ??_timer1_interrupt_ovfRoutine:	
   685                           ; 1 bytes @ 0x0
   686                           
   687  0070                     ?_system_init:	
   688                           ; 1 bytes @ 0x0
   689                           
   690  0070                     ?_main:	
   691                           ; 1 bytes @ 0x0
   692                           
   693  0070                     ?i1_sevenSegDisable:	
   694                           ; 1 bytes @ 0x0
   695                           
   696  0070                     ?i1_DIO_Write:	
   697                           ; 1 bytes @ 0x0
   698                           
   699  0070                     i1DIO_Write@pins:	
   700                           ; 1 bytes @ 0x0
   701                           
   702                           
   703                           ; 1 bytes @ 0x0
   704  0070                     	ds	1
   705  0071                     i1DIO_Write@value:
   706                           
   707                           ; 1 bytes @ 0x1
   708  0071                     	ds	1
   709  0072                     ??i1_DIO_Write:
   710                           
   711                           ; 1 bytes @ 0x2
   712  0072                     	ds	2
   713  0074                     i1DIO_Write@ret_error:
   714                           
   715                           ; 1 bytes @ 0x4
   716  0074                     	ds	1
   717  0075                     i1DIO_Write@GPIO:
   718                           
   719                           ; 1 bytes @ 0x5
   720  0075                     	ds	1
   721  0076                     ??i1_sevenSegDisable:
   722                           
   723                           ; 1 bytes @ 0x6
   724  0076                     	ds	2
   725  0078                     i1sevenSegDisable@en_segment_id:
   726                           
   727                           ; 1 bytes @ 0x8
   728  0078                     	ds	1
   729  0079                     i1sevenSegDisable@ret:
   730                           
   731                           ; 1 bytes @ 0x9
   732  0079                     	ds	1
   733  007A                     ??_sevenSegEnable:
   734                           
   735                           ; 1 bytes @ 0xA
   736  007A                     	ds	2
   737  007C                     sevenSegEnable@segment_id:
   738                           
   739                           ; 1 bytes @ 0xC
   740  007C                     	ds	1
   741  007D                     sevenSegEnable@ret:
   742                           
   743                           ; 1 bytes @ 0xD
   744  007D                     	ds	1
   745  007E                     ??_seven_seg_POV:
   746                           
   747                           	psect	cstackBANK0
   748  0047                     __pcstackBANK0:	
   749                           ; 1 bytes @ 0xE
   750                           
   751  0047                     ??_checkmyisr:
   752                           
   753                           ; 1 bytes @ 0x0
   754  0047                     	ds	4
   755  004B                     ??_special_int_enable:
   756  004B                     ??_special_int_disable:	
   757                           ; 1 bytes @ 0x4
   758                           
   759  004B                     ?_SwDelay_ms:	
   760                           ; 1 bytes @ 0x4
   761                           
   762  004B                     ?_SwDelay_us:	
   763                           ; 1 bytes @ 0x4
   764                           
   765  004B                     ?_DIO_init:	
   766                           ; 1 bytes @ 0x4
   767                           
   768  004B                     ??_DIO_init:	
   769                           ; 1 bytes @ 0x4
   770                           
   771  004B                     ?_DIO_Write:	
   772                           ; 1 bytes @ 0x4
   773                           
   774  004B                     ?_Timer_Start:	
   775                           ; 1 bytes @ 0x4
   776                           
   777  004B                     ??_global_int_enable:	
   778                           ; 1 bytes @ 0x4
   779                           
   780  004B                     ?_DIO_Read:	
   781                           ; 1 bytes @ 0x4
   782                           
   783  004B                     ??_Task3:	
   784                           ; 1 bytes @ 0x4
   785                           
   786  004B                     ??_I2C_Master_Wait:	
   787                           ; 1 bytes @ 0x4
   788                           
   789  004B                     ??_I2C_Master_Start:	
   790                           ; 1 bytes @ 0x4
   791                           
   792  004B                     ??_I2C_Master_RepeatedStart:	
   793                           ; 1 bytes @ 0x4
   794                           
   795  004B                     ??_I2C_Master_Stop:	
   796                           ; 1 bytes @ 0x4
   797                           
   798  004B                     ??_I2C_Master_Write:	
   799                           ; 1 bytes @ 0x4
   800                           
   801  004B                     ??_I2C_Read_Byte:	
   802                           ; 1 bytes @ 0x4
   803                           
   804  004B                     ??_I2C_NACK:	
   805                           ; 1 bytes @ 0x4
   806                           
   807  004B                     ?___bmul:	
   808                           ; 1 bytes @ 0x4
   809                           
   810  004B                     ?___awdiv:	
   811                           ; 1 bytes @ 0x4
   812                           
   813  004B                     ?___awmod:	
   814                           ; 2 bytes @ 0x4
   815                           
   816  004B                     ?___lldiv:	
   817                           ; 2 bytes @ 0x4
   818                           
   819  004B                     I2C_Master_Write@data:	
   820                           ; 4 bytes @ 0x4
   821                           
   822  004B                     DIO_Write@pins:	
   823                           ; 1 bytes @ 0x4
   824                           
   825  004B                     DIO_Read@pins:	
   826                           ; 1 bytes @ 0x4
   827                           
   828  004B                     ___bmul@multiplicand:	
   829                           ; 1 bytes @ 0x4
   830                           
   831  004B                     Timer_Start@Timer_Count:	
   832                           ; 1 bytes @ 0x4
   833                           
   834  004B                     ___awdiv@divisor:	
   835                           ; 2 bytes @ 0x4
   836                           
   837  004B                     ___awmod@divisor:	
   838                           ; 2 bytes @ 0x4
   839                           
   840  004B                     SwDelay_ms@n:	
   841                           ; 2 bytes @ 0x4
   842                           
   843  004B                     SwDelay_us@n:	
   844                           ; 4 bytes @ 0x4
   845                           
   846  004B                     ___lldiv@divisor:	
   847                           ; 4 bytes @ 0x4
   848                           
   849                           
   850                           ; 4 bytes @ 0x4
   851  004B                     	ds	1
   852  004C                     ?_EEPROM_Write:
   853  004C                     ?_EEPROM_Read:	
   854                           ; 1 bytes @ 0x5
   855                           
   856  004C                     ??___bmul:	
   857                           ; 1 bytes @ 0x5
   858                           
   859  004C                     DIO_Write@value:	
   860                           ; 1 bytes @ 0x5
   861                           
   862  004C                     DIO_Read@data:	
   863                           ; 1 bytes @ 0x5
   864                           
   865  004C                     ___bmul@product:	
   866                           ; 1 bytes @ 0x5
   867                           
   868  004C                     EEPROM_Write@add:	
   869                           ; 1 bytes @ 0x5
   870                           
   871  004C                     EEPROM_Read@add:	
   872                           ; 2 bytes @ 0x5
   873                           
   874                           
   875                           ; 2 bytes @ 0x5
   876  004C                     	ds	1
   877  004D                     ??_DIO_Write:
   878  004D                     ??_Timer_Start:	
   879                           ; 1 bytes @ 0x6
   880                           
   881  004D                     ??_DIO_Read:	
   882                           ; 1 bytes @ 0x6
   883                           
   884  004D                     special_int_enable@u8_interrupt_prepherals:	
   885                           ; 1 bytes @ 0x6
   886                           
   887  004D                     special_int_disable@u8_interrupt_prepherals:	
   888                           ; 1 bytes @ 0x6
   889                           
   890  004D                     DIO_init@ret_error:	
   891                           ; 1 bytes @ 0x6
   892                           
   893  004D                     ___bmul@multiplier:	
   894                           ; 1 bytes @ 0x6
   895                           
   896  004D                     ___awdiv@dividend:	
   897                           ; 1 bytes @ 0x6
   898                           
   899  004D                     ___awmod@dividend:	
   900                           ; 2 bytes @ 0x6
   901                           
   902                           
   903                           ; 2 bytes @ 0x6
   904  004D                     	ds	1
   905  004E                     ??_EEPROM_Read:
   906  004E                     ?_SOS_Create_Task:	
   907                           ; 1 bytes @ 0x7
   908                           
   909  004E                     special_int_enable@ret_error:	
   910                           ; 1 bytes @ 0x7
   911                           
   912  004E                     special_int_disable@ret_error:	
   913                           ; 1 bytes @ 0x7
   914                           
   915  004E                     EEPROM_Write@data:	
   916                           ; 1 bytes @ 0x7
   917                           
   918  004E                     EEPROM_Read@Data:	
   919                           ; 1 bytes @ 0x7
   920                           
   921  004E                     DIO_init@DIO_info:	
   922                           ; 1 bytes @ 0x7
   923                           
   924  004E                     SOS_Create_Task@u8_Preodicity:	
   925                           ; 1 bytes @ 0x7
   926                           
   927                           
   928                           ; 1 bytes @ 0x7
   929  004E                     	ds	1
   930  004F                     ??_SwDelay_ms:
   931  004F                     ??_SwDelay_us:	
   932                           ; 1 bytes @ 0x8
   933                           
   934  004F                     ?_Timer_Init:	
   935                           ; 1 bytes @ 0x8
   936                           
   937  004F                     ??_Timer_Init:	
   938                           ; 1 bytes @ 0x8
   939                           
   940  004F                     ??_ADC_INIT:	
   941                           ; 1 bytes @ 0x8
   942                           
   943  004F                     ??_EEPROM_Write:	
   944                           ; 1 bytes @ 0x8
   945                           
   946  004F                     ??___awdiv:	
   947                           ; 1 bytes @ 0x8
   948                           
   949  004F                     ??___awmod:	
   950                           ; 1 bytes @ 0x8
   951                           
   952  004F                     DIO_Write@ret_error:	
   953                           ; 1 bytes @ 0x8
   954                           
   955  004F                     DIO_Read@ret_error:	
   956                           ; 1 bytes @ 0x8
   957                           
   958  004F                     SOS_Create_Task@u8_function_index:	
   959                           ; 1 bytes @ 0x8
   960                           
   961  004F                     Timer_Start@Timer_CH_NO:	
   962                           ; 1 bytes @ 0x8
   963                           
   964  004F                     ___awdiv@counter:	
   965                           ; 1 bytes @ 0x8
   966                           
   967  004F                     ___awmod@counter:	
   968                           ; 1 bytes @ 0x8
   969                           
   970  004F                     ___lldiv@dividend:	
   971                           ; 1 bytes @ 0x8
   972                           
   973                           
   974                           ; 4 bytes @ 0x8
   975  004F                     	ds	1
   976  0050                     DIO_Write@GPIO:
   977  0050                     DIO_Read@GPIO:	
   978                           ; 1 bytes @ 0x9
   979                           
   980  0050                     Timer_Start@ret_error:	
   981                           ; 1 bytes @ 0x9
   982                           
   983  0050                     ___awdiv@sign:	
   984                           ; 1 bytes @ 0x9
   985                           
   986  0050                     ___awmod@sign:	
   987                           ; 1 bytes @ 0x9
   988                           
   989  0050                     SOS_Create_Task@u16_Time_delay:	
   990                           ; 1 bytes @ 0x9
   991                           
   992                           
   993                           ; 2 bytes @ 0x9
   994  0050                     	ds	1
   995  0051                     ??_sevenSegDisable:
   996  0051                     ??_pushButtonGetStatus:	
   997                           ; 1 bytes @ 0xA
   998                           
   999  0051                     ADC_INIT@ret_error:	
  1000                           ; 1 bytes @ 0xA
  1001                           
  1002  0051                     Timer_Init@ret_error:	
  1003                           ; 1 bytes @ 0xA
  1004                           
  1005  0051                     ___awdiv@quotient:	
  1006                           ; 1 bytes @ 0xA
  1007                           
  1008                           
  1009                           ; 2 bytes @ 0xA
  1010  0051                     	ds	1
  1011  0052                     ??_SOS_Create_Task:
  1012  0052                     ADC_INIT@ADC_info:	
  1013                           ; 1 bytes @ 0xB
  1014                           
  1015  0052                     SOS_Create_Task@Function_Consumer:	
  1016                           ; 1 bytes @ 0xB
  1017                           
  1018  0052                     Timer_Init@Timer_cfg:	
  1019                           ; 1 bytes @ 0xB
  1020                           
  1021                           
  1022                           ; 1 bytes @ 0xB
  1023  0052                     	ds	1
  1024  0053                     ??_sevenSegWrite:
  1025  0053                     ??_SOS_Init:	
  1026                           ; 1 bytes @ 0xC
  1027                           
  1028  0053                     ??___lldiv:	
  1029                           ; 1 bytes @ 0xC
  1030                           
  1031  0053                     sevenSegDisable@en_segment_id:	
  1032                           ; 1 bytes @ 0xC
  1033                           
  1034  0053                     pushButtonGetStatus@en_butotn_id:	
  1035                           ; 1 bytes @ 0xC
  1036                           
  1037  0053                     SwDelay_ms@counter_256:	
  1038                           ; 1 bytes @ 0xC
  1039                           
  1040  0053                     SOS_Create_Task@ret:	
  1041                           ; 1 bytes @ 0xC
  1042                           
  1043                           
  1044                           ; 1 bytes @ 0xC
  1045  0053                     	ds	1
  1046  0054                     sevenSegDisable@ret:
  1047  0054                     pushButtonGetStatus@pushreturn:	
  1048                           ; 1 bytes @ 0xD
  1049                           
  1050  0054                     SwDelay_ms@counter_21:	
  1051                           ; 1 bytes @ 0xD
  1052                           
  1053  0054                     ___lldiv@quotient:	
  1054                           ; 1 bytes @ 0xD
  1055                           
  1056                           
  1057                           ; 4 bytes @ 0xD
  1058  0054                     	ds	1
  1059  0055                     ??_Task1:
  1060  0055                     ??_sevenSegInit:	
  1061                           ; 1 bytes @ 0xE
  1062                           
  1063  0055                     ?_ADC_READ:	
  1064                           ; 1 bytes @ 0xE
  1065                           
  1066  0055                     sevenSegInit@ret:	
  1067                           ; 2 bytes @ 0xE
  1068                           
  1069  0055                     sevenSegWrite@ret:	
  1070                           ; 1 bytes @ 0xE
  1071                           
  1072  0055                     SOS_Init@u8_channel_ID:	
  1073                           ; 1 bytes @ 0xE
  1074                           
  1075                           
  1076                           ; 1 bytes @ 0xE
  1077  0055                     	ds	1
  1078  0056                     sevenSegWrite@u8_number:
  1079  0056                     SOS_Init@ret:	
  1080                           ; 1 bytes @ 0xF
  1081                           
  1082                           
  1083                           ; 1 bytes @ 0xF
  1084  0056                     	ds	1
  1085  0057                     ??_ADC_READ:
  1086  0057                     SOS_Init@ConfigPtr:	
  1087                           ; 1 bytes @ 0x10
  1088                           
  1089                           
  1090                           ; 1 bytes @ 0x10
  1091  0057                     	ds	1
  1092  0058                     ??_Task2:
  1093  0058                     ___lldiv@counter:	
  1094                           ; 1 bytes @ 0x11
  1095                           
  1096                           
  1097                           ; 1 bytes @ 0x11
  1098  0058                     	ds	1
  1099  0059                     ?_I2C_Master_Init:
  1100  0059                     I2C_Master_Init@baud:	
  1101                           ; 1 bytes @ 0x12
  1102                           
  1103                           
  1104                           ; 4 bytes @ 0x12
  1105  0059                     	ds	4
  1106  005D                     ??_system_init:
  1107  005D                     ??_main:	
  1108                           ; 1 bytes @ 0x16
  1109                           
  1110                           
  1111                           	psect	maintext
  1112  0974                     __pmaintext:	
  1113                           ; 1 bytes @ 0x16
  1114 ;;
  1115 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1116 ;;
  1117 ;; *************** function _main *****************
  1118 ;; Defined at:
  1119 ;;		line 24 in file "main.c"
  1120 ;; Parameters:    Size  Location     Type
  1121 ;;		None
  1122 ;; Auto vars:     Size  Location     Type
  1123 ;;		None
  1124 ;; Return value:  Size  Location     Type
  1125 ;;                  1    wreg      void 
  1126 ;; Registers used:
  1127 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1128 ;; Tracked objects:
  1129 ;;		On entry : B00/0
  1130 ;;		On exit  : 0/0
  1131 ;;		Unchanged: 0/0
  1132 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1133 ;;      Params:         0       0       0       0       0
  1134 ;;      Locals:         0       0       0       0       0
  1135 ;;      Temps:          0       0       0       0       0
  1136 ;;      Totals:         0       0       0       0       0
  1137 ;;Total ram usage:        0 bytes
  1138 ;; Hardware stack levels required when called:   10
  1139 ;; This function calls:
  1140 ;;		_SOS_Run
  1141 ;;		_system_init
  1142 ;; This function is called by:
  1143 ;;		Startup code after reset
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           
  1148                           ;psect for function _main
  1149  0974                     _main:
  1150  0974                     l5613:	
  1151                           ;incstack = 0
  1152 ;; hardware stack exceeded
  1153                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1154                           
  1155                           
  1156                           ;main.c: 25:     system_init();
  1157  0974  120A  118A  24E7  120A  158A  	fcall	_system_init
  1158  0979                     l657:	
  1159                           ;main.c: 26:   while(1)
  1160                           
  1161                           
  1162                           ;main.c: 27:   {;main.c: 28:  SOS_Run();
  1163  0979  120A  118A  22C5  120A  158A  	fcall	_SOS_Run
  1164  097E  2979               	goto	l657
  1165  097F  120A  118A  2812   	ljmp	start
  1166  0982                     __end_of_main:
  1167                           
  1168                           	psect	text1
  1169  04E7                     __ptext1:	
  1170 ;; *************** function _system_init *****************
  1171 ;; Defined at:
  1172 ;;		line 10 in file "main.c"
  1173 ;; Parameters:    Size  Location     Type
  1174 ;;		None
  1175 ;; Auto vars:     Size  Location     Type
  1176 ;;		None
  1177 ;; Return value:  Size  Location     Type
  1178 ;;                  1    wreg      void 
  1179 ;; Registers used:
  1180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1181 ;; Tracked objects:
  1182 ;;		On entry : 0/0
  1183 ;;		On exit  : 0/0
  1184 ;;		Unchanged: 0/0
  1185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1186 ;;      Params:         0       0       0       0       0
  1187 ;;      Locals:         0       0       0       0       0
  1188 ;;      Temps:          0       0       0       0       0
  1189 ;;      Totals:         0       0       0       0       0
  1190 ;;Total ram usage:        0 bytes
  1191 ;; Hardware stack levels used:    1
  1192 ;; Hardware stack levels required when called:    9
  1193 ;; This function calls:
  1194 ;;		_ADC_INIT
  1195 ;;		_DIO_init
  1196 ;;		_I2C_Master_Init
  1197 ;;		_SOS_Create_Task
  1198 ;;		_SOS_Init
  1199 ;;		_Timer_Init
  1200 ;;		_Timer_Start
  1201 ;;		_sevenSegInit
  1202 ;; This function is called by:
  1203 ;;		_main
  1204 ;; This function uses a non-reentrant model
  1205 ;;
  1206                           
  1207                           
  1208                           ;psect for function _system_init
  1209  04E7                     _system_init:
  1210  04E7                     l5597:	
  1211                           ;incstack = 0
  1212 ;; hardware stack exceeded
  1213                           ; Regs used in _system_init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1214                           
  1215                           
  1216                           ;main.c: 12: ret = Timer_Init(&Timer_Configuration0);
  1217  04E7  30DC               	movlw	(low (_Timer_Configuration0| 0))& (0+255)
  1218  04E8  120A  118A  2085  120A  118A  	fcall	_Timer_Init
  1219  04ED  00FF               	movwf	btemp+1
  1220  04EE  087F               	movf	btemp+1,w
  1221  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  1222  04F0  1303               	bcf	3,6	;RP1=0, select bank0
  1223  04F1  00EB               	movwf	_ret
  1224                           
  1225                           ;main.c: 13: ret= Timer_Start(0,100);
  1226  04F2  3064               	movlw	100
  1227  04F3  00CB               	movwf	Timer_Start@Timer_Count
  1228  04F4  3000               	movlw	0
  1229  04F5  00CC               	movwf	Timer_Start@Timer_Count+1
  1230  04F6  3000               	movlw	0
  1231  04F7  120A  158A  232D  120A  118A  	fcall	_Timer_Start
  1232  04FC  00FF               	movwf	btemp+1
  1233  04FD  087F               	movf	btemp+1,w
  1234  04FE  1283               	bcf	3,5	;RP0=0, select bank0
  1235  04FF  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0500  00EB               	movwf	_ret
  1237                           
  1238                           ;main.c: 14: ret = SOS_Init(&TMU_Configuration);
  1239  0501  3001               	movlw	(low ((_TMU_Configuration-__stringbase)| (0+32768)))& (0+255)
  1240  0502  120A  118A  257F  120A  118A  	fcall	_SOS_Init
  1241  0507  00FF               	movwf	btemp+1
  1242  0508  087F               	movf	btemp+1,w
  1243  0509  1283               	bcf	3,5	;RP0=0, select bank0
  1244  050A  1303               	bcf	3,6	;RP1=0, select bank0
  1245  050B  00EB               	movwf	_ret
  1246                           
  1247                           ;main.c: 15: ret = SOS_Create_Task(Task1,1,0,1);
  1248  050C  01CE               	clrf	SOS_Create_Task@u8_Preodicity
  1249  050D  0ACE               	incf	SOS_Create_Task@u8_Preodicity,f
  1250  050E  01CF               	clrf	SOS_Create_Task@u8_function_index
  1251  050F  3001               	movlw	1
  1252  0510  00D0               	movwf	SOS_Create_Task@u16_Time_delay
  1253  0511  3000               	movlw	0
  1254  0512  00D1               	movwf	SOS_Create_Task@u16_Time_delay+1
  1255  0513  3009               	movlw	(low (fp__Task1-fpbase))& (0+255)
  1256  0514  120A  118A  2789  120A  118A  	fcall	_SOS_Create_Task
  1257  0519  00FF               	movwf	btemp+1
  1258  051A  087F               	movf	btemp+1,w
  1259  051B  1283               	bcf	3,5	;RP0=0, select bank0
  1260  051C  1303               	bcf	3,6	;RP1=0, select bank0
  1261  051D  00EB               	movwf	_ret
  1262                           
  1263                           ;main.c: 16: ret = SOS_Create_Task(Task2,1,1,50);
  1264  051E  01CE               	clrf	SOS_Create_Task@u8_Preodicity
  1265  051F  0ACE               	incf	SOS_Create_Task@u8_Preodicity,f
  1266  0520  01CF               	clrf	SOS_Create_Task@u8_function_index
  1267  0521  0ACF               	incf	SOS_Create_Task@u8_function_index,f
  1268  0522  3032               	movlw	50
  1269  0523  00D0               	movwf	SOS_Create_Task@u16_Time_delay
  1270  0524  3000               	movlw	0
  1271  0525  00D1               	movwf	SOS_Create_Task@u16_Time_delay+1
  1272  0526  300C               	movlw	(low (fp__Task2-fpbase))& (0+255)
  1273  0527  120A  118A  2789  120A  118A  	fcall	_SOS_Create_Task
  1274  052C  00FF               	movwf	btemp+1
  1275  052D  087F               	movf	btemp+1,w
  1276  052E  1283               	bcf	3,5	;RP0=0, select bank0
  1277  052F  1303               	bcf	3,6	;RP1=0, select bank0
  1278  0530  00EB               	movwf	_ret
  1279                           
  1280                           ;main.c: 17: ret = SOS_Create_Task(Task3,1,2,2500);
  1281  0531  01CE               	clrf	SOS_Create_Task@u8_Preodicity
  1282  0532  0ACE               	incf	SOS_Create_Task@u8_Preodicity,f
  1283  0533  3002               	movlw	2
  1284  0534  00FF               	movwf	btemp+1
  1285  0535  087F               	movf	btemp+1,w
  1286  0536  00CF               	movwf	SOS_Create_Task@u8_function_index
  1287  0537  30C4               	movlw	196
  1288  0538  00D0               	movwf	SOS_Create_Task@u16_Time_delay
  1289  0539  3009               	movlw	9
  1290  053A  00D1               	movwf	SOS_Create_Task@u16_Time_delay+1
  1291  053B  3006               	movlw	(low (fp__Task3-fpbase))& (0+255)
  1292  053C  120A  118A  2789  120A  118A  	fcall	_SOS_Create_Task
  1293  0541  00FF               	movwf	btemp+1
  1294  0542  087F               	movf	btemp+1,w
  1295  0543  1283               	bcf	3,5	;RP0=0, select bank0
  1296  0544  1303               	bcf	3,6	;RP1=0, select bank0
  1297  0545  00EB               	movwf	_ret
  1298                           
  1299                           ;main.c: 18: ret = DIO_init(&Dio_configutation_C);
  1300  0546  30EB               	movlw	(low (_Dio_configutation_C| 0))& (0+255)
  1301  0547  120A  118A  21AF  120A  118A  	fcall	_DIO_init
  1302  054C  00FF               	movwf	btemp+1
  1303  054D  087F               	movf	btemp+1,w
  1304  054E  1283               	bcf	3,5	;RP0=0, select bank0
  1305  054F  1303               	bcf	3,6	;RP1=0, select bank0
  1306  0550  00EB               	movwf	_ret
  1307                           
  1308                           ;main.c: 19: ret = DIO_init(&Dio_configutation_A_ADC);
  1309  0551  305F               	movlw	(low (_Dio_configutation_A_ADC| 0))& (0+255)
  1310  0552  120A  118A  21AF  120A  118A  	fcall	_DIO_init
  1311  0557  00FF               	movwf	btemp+1
  1312  0558  087F               	movf	btemp+1,w
  1313  0559  1283               	bcf	3,5	;RP0=0, select bank0
  1314  055A  1303               	bcf	3,6	;RP1=0, select bank0
  1315  055B  00EB               	movwf	_ret
  1316                           
  1317                           ;main.c: 20: ret = ADC_INIT(&ADC_Cnfiguration);
  1318  055C  30E6               	movlw	(low (_ADC_Cnfiguration| 0))& (0+255)
  1319  055D  120A  118A  2609  120A  118A  	fcall	_ADC_INIT
  1320  0562  00FF               	movwf	btemp+1
  1321  0563  087F               	movf	btemp+1,w
  1322  0564  1283               	bcf	3,5	;RP0=0, select bank0
  1323  0565  1303               	bcf	3,6	;RP1=0, select bank0
  1324  0566  00EB               	movwf	_ret
  1325                           
  1326                           ;main.c: 21: ret = sevenSegInit();
  1327  0567  120A  158A  22F9  120A  118A  	fcall	_sevenSegInit
  1328  056C  00FF               	movwf	btemp+1
  1329  056D  087F               	movf	btemp+1,w
  1330  056E  1283               	bcf	3,5	;RP0=0, select bank0
  1331  056F  1303               	bcf	3,6	;RP1=0, select bank0
  1332  0570  00EB               	movwf	_ret
  1333  0571                     l5599:
  1334                           
  1335                           ;main.c: 22:  I2C_Master_Init(100000);
  1336  0571  3000               	movlw	0
  1337  0572  00DC               	movwf	I2C_Master_Init@baud+3
  1338  0573  3001               	movlw	1
  1339  0574  00DB               	movwf	I2C_Master_Init@baud+2
  1340  0575  3086               	movlw	134
  1341  0576  00DA               	movwf	I2C_Master_Init@baud+1
  1342  0577  30A0               	movlw	160
  1343  0578  00D9               	movwf	I2C_Master_Init@baud
  1344  0579  120A  158A  25C0  120A  118A  	fcall	_I2C_Master_Init
  1345  057E                     l652:
  1346  057E  0008               	return
  1347  057F                     __end_of_system_init:
  1348                           
  1349                           	psect	text2
  1350  0AF9                     __ptext2:	
  1351 ;; *************** function _sevenSegInit *****************
  1352 ;; Defined at:
  1353 ;;		line 10 in file "seven_segment.c"
  1354 ;; Parameters:    Size  Location     Type
  1355 ;;		None
  1356 ;; Auto vars:     Size  Location     Type
  1357 ;;  ret             1   14[BANK0 ] unsigned char 
  1358 ;; Return value:  Size  Location     Type
  1359 ;;                  1    wreg      unsigned char 
  1360 ;; Registers used:
  1361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1362 ;; Tracked objects:
  1363 ;;		On entry : 0/0
  1364 ;;		On exit  : 0/0
  1365 ;;		Unchanged: 0/0
  1366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1367 ;;      Params:         0       0       0       0       0
  1368 ;;      Locals:         0       1       0       0       0
  1369 ;;      Temps:          0       0       0       0       0
  1370 ;;      Totals:         0       1       0       0       0
  1371 ;;Total ram usage:        1 bytes
  1372 ;; Hardware stack levels used:    1
  1373 ;; Hardware stack levels required when called:    8
  1374 ;; This function calls:
  1375 ;;		_DIO_init
  1376 ;;		_Timer_Init
  1377 ;;		_sevenSegDisable
  1378 ;; This function is called by:
  1379 ;;		_system_init
  1380 ;; This function uses a non-reentrant model
  1381 ;;
  1382                           
  1383                           
  1384                           ;psect for function _sevenSegInit
  1385  0AF9                     _sevenSegInit:
  1386  0AF9                     l5491:	
  1387                           ;incstack = 0
  1388 ;; hardware stack exceeded
  1389                           ; Regs used in _sevenSegInit: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1390                           
  1391  0AF9                     l5493:
  1392  0AF9  30E1               	movlw	(low (_Timer_Configuration1_7_seg| 0))& (0+255)
  1393  0AFA  120A  118A  2085  120A  158A  	fcall	_Timer_Init
  1394  0AFF                     l5495:
  1395                           
  1396                           ;seven_segment.c: 17:     ret=DIO_init(&Dio_configutation_A_7_seg);
  1397  0AFF  3067               	movlw	(low (_Dio_configutation_A_7_seg| 0))& (0+255)
  1398  0B00  120A  118A  21AF  120A  158A  	fcall	_DIO_init
  1399  0B05  00FF               	movwf	btemp+1
  1400  0B06  087F               	movf	btemp+1,w
  1401  0B07  1283               	bcf	3,5	;RP0=0, select bank0
  1402  0B08  1303               	bcf	3,6	;RP1=0, select bank0
  1403  0B09  00D5               	movwf	sevenSegInit@ret
  1404  0B0A                     l5497:
  1405                           
  1406                           ;seven_segment.c: 18:     ret += sevenSegDisable(SEG_0);
  1407  0B0A  3000               	movlw	0
  1408  0B0B  120A  158A  2362  120A  158A  	fcall	_sevenSegDisable
  1409  0B10  00FF               	movwf	btemp+1
  1410  0B11  087F               	movf	btemp+1,w
  1411  0B12  1283               	bcf	3,5	;RP0=0, select bank0
  1412  0B13  1303               	bcf	3,6	;RP1=0, select bank0
  1413  0B14  07D5               	addwf	sevenSegInit@ret,f
  1414  0B15                     l5499:
  1415                           
  1416                           ;seven_segment.c: 19:     ret += sevenSegDisable(SEG_1);
  1417  0B15  3001               	movlw	1
  1418  0B16  120A  158A  2362  120A  158A  	fcall	_sevenSegDisable
  1419  0B1B  00FF               	movwf	btemp+1
  1420  0B1C  087F               	movf	btemp+1,w
  1421  0B1D  1283               	bcf	3,5	;RP0=0, select bank0
  1422  0B1E  1303               	bcf	3,6	;RP1=0, select bank0
  1423  0B1F  07D5               	addwf	sevenSegInit@ret,f
  1424  0B20                     l5501:
  1425                           
  1426                           ;seven_segment.c: 21:     ret=DIO_init(&Dio_configutation_D);
  1427  0B20  3063               	movlw	(low (_Dio_configutation_D| 0))& (0+255)
  1428  0B21  120A  118A  21AF  120A  158A  	fcall	_DIO_init
  1429  0B26  00FF               	movwf	btemp+1
  1430  0B27  087F               	movf	btemp+1,w
  1431  0B28  1283               	bcf	3,5	;RP0=0, select bank0
  1432  0B29  1303               	bcf	3,6	;RP1=0, select bank0
  1433  0B2A  00D5               	movwf	sevenSegInit@ret
  1434  0B2B                     l5503:
  1435                           
  1436                           ;seven_segment.c: 22:     return ret;
  1437  0B2B  0855               	movf	sevenSegInit@ret,w
  1438  0B2C                     l67:
  1439  0B2C  0008               	return
  1440  0B2D                     __end_of_sevenSegInit:
  1441                           
  1442                           	psect	text3
  1443  0B62                     __ptext3:	
  1444 ;; *************** function _sevenSegDisable *****************
  1445 ;; Defined at:
  1446 ;;		line 67 in file "seven_segment.c"
  1447 ;; Parameters:    Size  Location     Type
  1448 ;;  en_segment_i    1    wreg     enum E96
  1449 ;; Auto vars:     Size  Location     Type
  1450 ;;  en_segment_i    1   12[BANK0 ] enum E96
  1451 ;;  ret             1   13[BANK0 ] unsigned char 
  1452 ;; Return value:  Size  Location     Type
  1453 ;;                  1    wreg      unsigned char 
  1454 ;; Registers used:
  1455 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1456 ;; Tracked objects:
  1457 ;;		On entry : 0/0
  1458 ;;		On exit  : 0/0
  1459 ;;		Unchanged: 0/0
  1460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1461 ;;      Params:         0       0       0       0       0
  1462 ;;      Locals:         0       2       0       0       0
  1463 ;;      Temps:          0       2       0       0       0
  1464 ;;      Totals:         0       4       0       0       0
  1465 ;;Total ram usage:        4 bytes
  1466 ;; Hardware stack levels used:    1
  1467 ;; Hardware stack levels required when called:    6
  1468 ;; This function calls:
  1469 ;;		_DIO_Write
  1470 ;; This function is called by:
  1471 ;;		_sevenSegInit
  1472 ;; This function uses a non-reentrant model
  1473 ;;
  1474                           
  1475                           
  1476                           ;psect for function _sevenSegDisable
  1477  0B62                     _sevenSegDisable:
  1478                           
  1479                           ;incstack = 0
  1480 ;; hardware stack exceeded
  1481                           ; Regs used in _sevenSegDisable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1482                           ;sevenSegDisable@en_segment_id stored from wreg
  1483  0B62  1283               	bcf	3,5	;RP0=0, select bank0
  1484  0B63  1303               	bcf	3,6	;RP1=0, select bank0
  1485  0B64  00D3               	movwf	sevenSegDisable@en_segment_id
  1486  0B65                     l3925:
  1487                           
  1488                           ;seven_segment.c: 67: ERROR_STATUS sevenSegDisable(En_SevenSegId_t en_segment_id);seven_
      +                          segment.c: 68: {;seven_segment.c: 70: uint8_t ret=0;
  1489  0B65  01D4               	clrf	sevenSegDisable@ret
  1490                           
  1491                           ;seven_segment.c: 71: switch(en_segment_id)
  1492  0B66  2B89               	goto	l3933
  1493  0B67                     l3927:
  1494                           
  1495                           ;seven_segment.c: 74: ret +=DIO_Write(0,0x04,0);
  1496  0B67  3004               	movlw	4
  1497  0B68  00FF               	movwf	btemp+1
  1498  0B69  087F               	movf	btemp+1,w
  1499  0B6A  00CB               	movwf	DIO_Write@pins
  1500  0B6B  01CC               	clrf	DIO_Write@value
  1501  0B6C  3000               	movlw	0
  1502  0B6D  120A  118A  2383  120A  158A  	fcall	_DIO_Write
  1503  0B72  00FF               	movwf	btemp+1
  1504  0B73  087F               	movf	btemp+1,w
  1505  0B74  1283               	bcf	3,5	;RP0=0, select bank0
  1506  0B75  1303               	bcf	3,6	;RP1=0, select bank0
  1507  0B76  07D4               	addwf	sevenSegDisable@ret,f
  1508                           
  1509                           ;seven_segment.c: 75: break;
  1510  0B77  2B99               	goto	l3935
  1511  0B78                     l3929:
  1512                           
  1513                           ;seven_segment.c: 77: ret +=DIO_Write(0,0x08,0);
  1514  0B78  3008               	movlw	8
  1515  0B79  00FF               	movwf	btemp+1
  1516  0B7A  087F               	movf	btemp+1,w
  1517  0B7B  00CB               	movwf	DIO_Write@pins
  1518  0B7C  01CC               	clrf	DIO_Write@value
  1519  0B7D  3000               	movlw	0
  1520  0B7E  120A  118A  2383  120A  158A  	fcall	_DIO_Write
  1521  0B83  00FF               	movwf	btemp+1
  1522  0B84  087F               	movf	btemp+1,w
  1523  0B85  1283               	bcf	3,5	;RP0=0, select bank0
  1524  0B86  1303               	bcf	3,6	;RP1=0, select bank0
  1525  0B87  07D4               	addwf	sevenSegDisable@ret,f
  1526                           
  1527                           ;seven_segment.c: 78: break;
  1528  0B88  2B99               	goto	l3935
  1529  0B89                     l3933:
  1530  0B89  0853               	movf	sevenSegDisable@en_segment_id,w
  1531  0B8A  00D1               	movwf	??_sevenSegDisable
  1532  0B8B  01D2               	clrf	??_sevenSegDisable+1
  1533                           
  1534                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1535                           ; Switch size 1, requested type "simple"
  1536                           ; Number of cases is 1, Range of values is 0 to 0
  1537                           ; switch strategies available:
  1538                           ; Name         Instructions Cycles
  1539                           ; simple_byte            4     3 (average)
  1540                           ; direct_byte           11     8 (fixed)
  1541                           ; jumptable            260     6 (fixed)
  1542                           ;	Chosen strategy is simple_byte
  1543  0B8C  0852               	movf	??_sevenSegDisable+1,w
  1544  0B8D  3A00               	xorlw	0	; case 0
  1545  0B8E  1903               	skipnz
  1546  0B8F  2B91               	goto	l6411
  1547  0B90  2B99               	goto	l3935
  1548  0B91                     l6411:
  1549                           
  1550                           ; Switch size 1, requested type "simple"
  1551                           ; Number of cases is 2, Range of values is 0 to 1
  1552                           ; switch strategies available:
  1553                           ; Name         Instructions Cycles
  1554                           ; simple_byte            7     4 (average)
  1555                           ; direct_byte           14     8 (fixed)
  1556                           ; jumptable            260     6 (fixed)
  1557                           ;	Chosen strategy is simple_byte
  1558  0B91  0851               	movf	??_sevenSegDisable,w
  1559  0B92  3A00               	xorlw	0	; case 0
  1560  0B93  1903               	skipnz
  1561  0B94  2B67               	goto	l3927
  1562  0B95  3A01               	xorlw	1	; case 1
  1563  0B96  1903               	skipnz
  1564  0B97  2B78               	goto	l3929
  1565  0B98  2B99               	goto	l3935
  1566  0B99                     l3935:
  1567                           
  1568                           ;seven_segment.c: 80: return ret;
  1569  0B99  0854               	movf	sevenSegDisable@ret,w
  1570  0B9A                     l86:
  1571  0B9A  0008               	return
  1572  0B9B                     __end_of_sevenSegDisable:
  1573                           
  1574                           	psect	text4
  1575  0383                     __ptext4:	
  1576 ;; *************** function _DIO_Write *****************
  1577 ;; Defined at:
  1578 ;;		line 132 in file "DIO.c"
  1579 ;; Parameters:    Size  Location     Type
  1580 ;;  GPIO            1    wreg     unsigned char 
  1581 ;;  pins            1    4[BANK0 ] unsigned char 
  1582 ;;  value           1    5[BANK0 ] unsigned char 
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;  GPIO            1    9[BANK0 ] unsigned char 
  1585 ;;  ret_error       1    8[BANK0 ] unsigned char 
  1586 ;; Return value:  Size  Location     Type
  1587 ;;                  1    wreg      unsigned char 
  1588 ;; Registers used:
  1589 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1590 ;; Tracked objects:
  1591 ;;		On entry : 0/0
  1592 ;;		On exit  : 0/0
  1593 ;;		Unchanged: 0/0
  1594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1595 ;;      Params:         0       2       0       0       0
  1596 ;;      Locals:         0       2       0       0       0
  1597 ;;      Temps:          0       2       0       0       0
  1598 ;;      Totals:         0       6       0       0       0
  1599 ;;Total ram usage:        6 bytes
  1600 ;; Hardware stack levels used:    1
  1601 ;; Hardware stack levels required when called:    5
  1602 ;; This function calls:
  1603 ;;		Nothing
  1604 ;; This function is called by:
  1605 ;;		_sevenSegDisable
  1606 ;; This function uses a non-reentrant model
  1607 ;;
  1608                           
  1609                           
  1610                           ;psect for function _DIO_Write
  1611  0383                     _DIO_Write:
  1612                           
  1613                           ;incstack = 0
  1614 ;; hardware stack exceeded
  1615                           ; Regs used in _DIO_Write: [wreg-fsr0h+status,2+status,0+btemp+1]
  1616                           ;DIO_Write@GPIO stored from wreg
  1617  0383  1283               	bcf	3,5	;RP0=0, select bank0
  1618  0384  1303               	bcf	3,6	;RP1=0, select bank0
  1619  0385  00D0               	movwf	DIO_Write@GPIO
  1620  0386                     l3353:
  1621                           
  1622                           ;DIO.c: 132: ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value);DIO.c: 1
      +                          33: { uint8_t ret_error=0;
  1623  0386  01CF               	clrf	DIO_Write@ret_error
  1624  0387                     l3355:
  1625                           
  1626                           ;DIO.c: 135:   static uint8_t first_powerup = 0;;DIO.c: 136: if (first_powerup == 0) {
  1627  0387  0839               	movf	DIO_Write@first_powerup,w
  1628  0388  1D03               	btfss	3,2
  1629  0389  2B8B               	goto	u1141
  1630  038A  2B8C               	goto	u1140
  1631  038B                     u1141:
  1632  038B  2C23               	goto	l3411
  1633  038C                     u1140:
  1634  038C  2B97               	goto	l3371
  1635  038D                     l3359:
  1636                           
  1637                           ;DIO.c: 139:   *((reg_type8_t)(0x0005))=0x00;
  1638  038D  0185               	clrf	5	;volatile
  1639                           
  1640                           ;DIO.c: 140:   break;
  1641  038E  2BB0               	goto	l3373
  1642  038F                     l3361:
  1643                           
  1644                           ;DIO.c: 142:   *((reg_type8_t)(0x0006))=0x00;
  1645  038F  0186               	clrf	6	;volatile
  1646                           
  1647                           ;DIO.c: 143:   break;
  1648  0390  2BB0               	goto	l3373
  1649  0391                     l3363:
  1650                           
  1651                           ;DIO.c: 145:   *((reg_type8_t)(0x0007))=0x00;
  1652  0391  0187               	clrf	7	;volatile
  1653                           
  1654                           ;DIO.c: 146:   break;
  1655  0392  2BB0               	goto	l3373
  1656  0393                     l3365:
  1657                           
  1658                           ;DIO.c: 148:   *((reg_type8_t)(0x0008))=0x00;
  1659  0393  0188               	clrf	8	;volatile
  1660                           
  1661                           ;DIO.c: 149:   break;
  1662  0394  2BB0               	goto	l3373
  1663  0395                     l3367:
  1664                           
  1665                           ;DIO.c: 151:   *((reg_type8_t)(0x0009))=0x00;
  1666  0395  0189               	clrf	9	;volatile
  1667                           
  1668                           ;DIO.c: 152:   break;
  1669  0396  2BB0               	goto	l3373
  1670  0397                     l3371:
  1671  0397  0850               	movf	DIO_Write@GPIO,w
  1672  0398  00CD               	movwf	??_DIO_Write
  1673  0399  01CE               	clrf	??_DIO_Write+1
  1674                           
  1675                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1676                           ; Switch size 1, requested type "simple"
  1677                           ; Number of cases is 1, Range of values is 0 to 0
  1678                           ; switch strategies available:
  1679                           ; Name         Instructions Cycles
  1680                           ; simple_byte            4     3 (average)
  1681                           ; direct_byte           11     8 (fixed)
  1682                           ; jumptable            260     6 (fixed)
  1683                           ;	Chosen strategy is simple_byte
  1684  039A  084E               	movf	??_DIO_Write+1,w
  1685  039B  3A00               	xorlw	0	; case 0
  1686  039C  1903               	skipnz
  1687  039D  2B9F               	goto	l6413
  1688  039E  2BB0               	goto	l3373
  1689  039F                     l6413:
  1690                           
  1691                           ; Switch size 1, requested type "simple"
  1692                           ; Number of cases is 5, Range of values is 0 to 4
  1693                           ; switch strategies available:
  1694                           ; Name         Instructions Cycles
  1695                           ; simple_byte           16     9 (average)
  1696                           ; direct_byte           23     8 (fixed)
  1697                           ; jumptable            260     6 (fixed)
  1698                           ;	Chosen strategy is simple_byte
  1699  039F  084D               	movf	??_DIO_Write,w
  1700  03A0  3A00               	xorlw	0	; case 0
  1701  03A1  1903               	skipnz
  1702  03A2  2B8D               	goto	l3359
  1703  03A3  3A01               	xorlw	1	; case 1
  1704  03A4  1903               	skipnz
  1705  03A5  2B8F               	goto	l3361
  1706  03A6  3A03               	xorlw	3	; case 2
  1707  03A7  1903               	skipnz
  1708  03A8  2B91               	goto	l3363
  1709  03A9  3A01               	xorlw	1	; case 3
  1710  03AA  1903               	skipnz
  1711  03AB  2B93               	goto	l3365
  1712  03AC  3A07               	xorlw	7	; case 4
  1713  03AD  1903               	skipnz
  1714  03AE  2B95               	goto	l3367
  1715  03AF  2BB0               	goto	l3373
  1716  03B0                     l3373:
  1717                           
  1718                           ;DIO.c: 154:   first_powerup++;
  1719  03B0  3001               	movlw	1
  1720  03B1  00FF               	movwf	btemp+1
  1721  03B2  087F               	movf	btemp+1,w
  1722  03B3  07B9               	addwf	DIO_Write@first_powerup,f
  1723  03B4  2C23               	goto	l3411
  1724  03B5                     l3375:
  1725                           
  1726                           ;DIO.c: 160:       *((reg_type8_t)(0x0005)) |= pins;
  1727  03B5  084B               	movf	DIO_Write@pins,w
  1728  03B6  00FF               	movwf	btemp+1
  1729  03B7  087F               	movf	btemp+1,w
  1730  03B8  0485               	iorwf	5,f	;volatile
  1731                           
  1732                           ;DIO.c: 161:       break;
  1733  03B9  2C33               	goto	l3413
  1734  03BA                     l3377:
  1735                           
  1736                           ;DIO.c: 163:       *((reg_type8_t)(0x0006)) |= pins;
  1737  03BA  084B               	movf	DIO_Write@pins,w
  1738  03BB  00FF               	movwf	btemp+1
  1739  03BC  087F               	movf	btemp+1,w
  1740  03BD  0486               	iorwf	6,f	;volatile
  1741                           
  1742                           ;DIO.c: 164:       break;
  1743  03BE  2C33               	goto	l3413
  1744  03BF                     l3379:
  1745                           
  1746                           ;DIO.c: 166:       *((reg_type8_t)(0x0007)) |= pins;
  1747  03BF  084B               	movf	DIO_Write@pins,w
  1748  03C0  00FF               	movwf	btemp+1
  1749  03C1  087F               	movf	btemp+1,w
  1750  03C2  0487               	iorwf	7,f	;volatile
  1751                           
  1752                           ;DIO.c: 167:       break;
  1753  03C3  2C33               	goto	l3413
  1754  03C4                     l3381:
  1755                           
  1756                           ;DIO.c: 169:       *((reg_type8_t)(0x0008)) |= pins;
  1757  03C4  084B               	movf	DIO_Write@pins,w
  1758  03C5  00FF               	movwf	btemp+1
  1759  03C6  087F               	movf	btemp+1,w
  1760  03C7  0488               	iorwf	8,f	;volatile
  1761                           
  1762                           ;DIO.c: 170:       break;
  1763  03C8  2C33               	goto	l3413
  1764  03C9                     l3383:
  1765                           
  1766                           ;DIO.c: 172:       *((reg_type8_t)(0x0009)) |= pins;
  1767  03C9  084B               	movf	DIO_Write@pins,w
  1768  03CA  00FF               	movwf	btemp+1
  1769  03CB  087F               	movf	btemp+1,w
  1770  03CC  0489               	iorwf	9,f	;volatile
  1771                           
  1772                           ;DIO.c: 173:       break;
  1773  03CD  2C33               	goto	l3413
  1774  03CE                     l3385:
  1775                           
  1776                           ;DIO.c: 175:       ret_error +=1 +14;
  1777  03CE  300F               	movlw	15
  1778  03CF  00FF               	movwf	btemp+1
  1779  03D0  087F               	movf	btemp+1,w
  1780  03D1  07CF               	addwf	DIO_Write@ret_error,f
  1781                           
  1782                           ;DIO.c: 176:       break;
  1783  03D2  2C33               	goto	l3413
  1784  03D3                     l3389:
  1785  03D3  0850               	movf	DIO_Write@GPIO,w
  1786  03D4  00CD               	movwf	??_DIO_Write
  1787  03D5  01CE               	clrf	??_DIO_Write+1
  1788                           
  1789                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1790                           ; Switch size 1, requested type "simple"
  1791                           ; Number of cases is 1, Range of values is 0 to 0
  1792                           ; switch strategies available:
  1793                           ; Name         Instructions Cycles
  1794                           ; simple_byte            4     3 (average)
  1795                           ; direct_byte           11     8 (fixed)
  1796                           ; jumptable            260     6 (fixed)
  1797                           ;	Chosen strategy is simple_byte
  1798  03D6  084E               	movf	??_DIO_Write+1,w
  1799  03D7  3A00               	xorlw	0	; case 0
  1800  03D8  1903               	skipnz
  1801  03D9  2BDB               	goto	l6415
  1802  03DA  2BCE               	goto	l3385
  1803  03DB                     l6415:
  1804                           
  1805                           ; Switch size 1, requested type "simple"
  1806                           ; Number of cases is 5, Range of values is 0 to 4
  1807                           ; switch strategies available:
  1808                           ; Name         Instructions Cycles
  1809                           ; simple_byte           16     9 (average)
  1810                           ; direct_byte           23     8 (fixed)
  1811                           ; jumptable            260     6 (fixed)
  1812                           ;	Chosen strategy is simple_byte
  1813  03DB  084D               	movf	??_DIO_Write,w
  1814  03DC  3A00               	xorlw	0	; case 0
  1815  03DD  1903               	skipnz
  1816  03DE  2BB5               	goto	l3375
  1817  03DF  3A01               	xorlw	1	; case 1
  1818  03E0  1903               	skipnz
  1819  03E1  2BBA               	goto	l3377
  1820  03E2  3A03               	xorlw	3	; case 2
  1821  03E3  1903               	skipnz
  1822  03E4  2BBF               	goto	l3379
  1823  03E5  3A01               	xorlw	1	; case 3
  1824  03E6  1903               	skipnz
  1825  03E7  2BC4               	goto	l3381
  1826  03E8  3A07               	xorlw	7	; case 4
  1827  03E9  1903               	skipnz
  1828  03EA  2BC9               	goto	l3383
  1829  03EB  2BCE               	goto	l3385
  1830  03EC                     l3391:
  1831                           
  1832                           ;DIO.c: 183:       *((reg_type8_t)(0x0005)) &= (~pins);
  1833  03EC  094B               	comf	DIO_Write@pins,w
  1834  03ED  00FF               	movwf	btemp+1
  1835  03EE  087F               	movf	btemp+1,w
  1836  03EF  0585               	andwf	5,f	;volatile
  1837                           
  1838                           ;DIO.c: 184:       break;
  1839  03F0  2C33               	goto	l3413
  1840  03F1                     l3393:
  1841                           
  1842                           ;DIO.c: 186:       *((reg_type8_t)(0x0006)) &= (~pins);
  1843  03F1  094B               	comf	DIO_Write@pins,w
  1844  03F2  00FF               	movwf	btemp+1
  1845  03F3  087F               	movf	btemp+1,w
  1846  03F4  0586               	andwf	6,f	;volatile
  1847                           
  1848                           ;DIO.c: 187:       break;
  1849  03F5  2C33               	goto	l3413
  1850  03F6                     l3395:
  1851                           
  1852                           ;DIO.c: 189:       *((reg_type8_t)(0x0007)) &= (~pins);
  1853  03F6  094B               	comf	DIO_Write@pins,w
  1854  03F7  00FF               	movwf	btemp+1
  1855  03F8  087F               	movf	btemp+1,w
  1856  03F9  0587               	andwf	7,f	;volatile
  1857                           
  1858                           ;DIO.c: 190:       break;
  1859  03FA  2C33               	goto	l3413
  1860  03FB                     l3397:
  1861                           
  1862                           ;DIO.c: 192:       *((reg_type8_t)(0x0008)) &= (~pins);
  1863  03FB  094B               	comf	DIO_Write@pins,w
  1864  03FC  00FF               	movwf	btemp+1
  1865  03FD  087F               	movf	btemp+1,w
  1866  03FE  0588               	andwf	8,f	;volatile
  1867                           
  1868                           ;DIO.c: 193:       break;
  1869  03FF  2C33               	goto	l3413
  1870  0400                     l3399:
  1871                           
  1872                           ;DIO.c: 195:       *((reg_type8_t)(0x0009)) &= (~pins);
  1873  0400  094B               	comf	DIO_Write@pins,w
  1874  0401  00FF               	movwf	btemp+1
  1875  0402  087F               	movf	btemp+1,w
  1876  0403  0589               	andwf	9,f	;volatile
  1877                           
  1878                           ;DIO.c: 196:       break;
  1879  0404  2C33               	goto	l3413
  1880  0405                     l3405:
  1881  0405  0850               	movf	DIO_Write@GPIO,w
  1882  0406  00CD               	movwf	??_DIO_Write
  1883  0407  01CE               	clrf	??_DIO_Write+1
  1884                           
  1885                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1886                           ; Switch size 1, requested type "simple"
  1887                           ; Number of cases is 1, Range of values is 0 to 0
  1888                           ; switch strategies available:
  1889                           ; Name         Instructions Cycles
  1890                           ; simple_byte            4     3 (average)
  1891                           ; direct_byte           11     8 (fixed)
  1892                           ; jumptable            260     6 (fixed)
  1893                           ;	Chosen strategy is simple_byte
  1894  0408  084E               	movf	??_DIO_Write+1,w
  1895  0409  3A00               	xorlw	0	; case 0
  1896  040A  1903               	skipnz
  1897  040B  2C0D               	goto	l6417
  1898  040C  2BCE               	goto	l3385
  1899  040D                     l6417:
  1900                           
  1901                           ; Switch size 1, requested type "simple"
  1902                           ; Number of cases is 5, Range of values is 0 to 4
  1903                           ; switch strategies available:
  1904                           ; Name         Instructions Cycles
  1905                           ; simple_byte           16     9 (average)
  1906                           ; direct_byte           23     8 (fixed)
  1907                           ; jumptable            260     6 (fixed)
  1908                           ;	Chosen strategy is simple_byte
  1909  040D  084D               	movf	??_DIO_Write,w
  1910  040E  3A00               	xorlw	0	; case 0
  1911  040F  1903               	skipnz
  1912  0410  2BEC               	goto	l3391
  1913  0411  3A01               	xorlw	1	; case 1
  1914  0412  1903               	skipnz
  1915  0413  2BF1               	goto	l3393
  1916  0414  3A03               	xorlw	3	; case 2
  1917  0415  1903               	skipnz
  1918  0416  2BF6               	goto	l3395
  1919  0417  3A01               	xorlw	1	; case 3
  1920  0418  1903               	skipnz
  1921  0419  2BFB               	goto	l3397
  1922  041A  3A07               	xorlw	7	; case 4
  1923  041B  1903               	skipnz
  1924  041C  2C00               	goto	l3399
  1925  041D  2BCE               	goto	l3385
  1926  041E                     l3407:
  1927                           
  1928                           ;DIO.c: 204: ret_error +=1 +18;
  1929  041E  3013               	movlw	19
  1930  041F  00FF               	movwf	btemp+1
  1931  0420  087F               	movf	btemp+1,w
  1932  0421  07CF               	addwf	DIO_Write@ret_error,f
  1933                           
  1934                           ;DIO.c: 205:   break;
  1935  0422  2C33               	goto	l3413
  1936  0423                     l3411:
  1937  0423  084C               	movf	DIO_Write@value,w
  1938  0424  00CD               	movwf	??_DIO_Write
  1939  0425  01CE               	clrf	??_DIO_Write+1
  1940                           
  1941                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1942                           ; Switch size 1, requested type "simple"
  1943                           ; Number of cases is 1, Range of values is 0 to 0
  1944                           ; switch strategies available:
  1945                           ; Name         Instructions Cycles
  1946                           ; simple_byte            4     3 (average)
  1947                           ; direct_byte           11     8 (fixed)
  1948                           ; jumptable            260     6 (fixed)
  1949                           ;	Chosen strategy is simple_byte
  1950  0426  084E               	movf	??_DIO_Write+1,w
  1951  0427  3A00               	xorlw	0	; case 0
  1952  0428  1903               	skipnz
  1953  0429  2C2B               	goto	l6419
  1954  042A  2C1E               	goto	l3407
  1955  042B                     l6419:
  1956                           
  1957                           ; Switch size 1, requested type "simple"
  1958                           ; Number of cases is 2, Range of values is 0 to 255
  1959                           ; switch strategies available:
  1960                           ; Name         Instructions Cycles
  1961                           ; simple_byte            7     4 (average)
  1962                           ; jumptable            260     6 (fixed)
  1963                           ;	Chosen strategy is simple_byte
  1964  042B  084D               	movf	??_DIO_Write,w
  1965  042C  3A00               	xorlw	0	; case 0
  1966  042D  1903               	skipnz
  1967  042E  2C05               	goto	l3405
  1968  042F  3AFF               	xorlw	255	; case 255
  1969  0430  1903               	skipnz
  1970  0431  2BD3               	goto	l3389
  1971  0432  2C1E               	goto	l3407
  1972  0433                     l3413:
  1973                           
  1974                           ;DIO.c: 207: return ret_error;
  1975  0433  084F               	movf	DIO_Write@ret_error,w
  1976  0434                     l372:
  1977  0434  0008               	return
  1978  0435                     __end_of_DIO_Write:
  1979                           
  1980                           	psect	text5
  1981  01AF                     __ptext5:	
  1982 ;; *************** function _DIO_init *****************
  1983 ;; Defined at:
  1984 ;;		line 11 in file "DIO.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;  DIO_info        1    wreg     PTR struct DIO_Cfg_s
  1987 ;;		 -> Dio_configutation_C(4), Dio_configutation_A_ADC(4), Dio_configutation_D(4), Dio_configutation_A_7_seg(4), 
  1988 ;; Auto vars:     Size  Location     Type
  1989 ;;  DIO_info        1    7[BANK0 ] PTR struct DIO_Cfg_s
  1990 ;;		 -> Dio_configutation_C(4), Dio_configutation_A_ADC(4), Dio_configutation_D(4), Dio_configutation_A_7_seg(4), 
  1991 ;;  ret_error       1    6[BANK0 ] unsigned char 
  1992 ;; Return value:  Size  Location     Type
  1993 ;;                  1    wreg      unsigned char 
  1994 ;; Registers used:
  1995 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1996 ;; Tracked objects:
  1997 ;;		On entry : 0/0
  1998 ;;		On exit  : 0/0
  1999 ;;		Unchanged: 0/0
  2000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2001 ;;      Params:         0       0       0       0       0
  2002 ;;      Locals:         0       2       0       0       0
  2003 ;;      Temps:          0       2       0       0       0
  2004 ;;      Totals:         0       4       0       0       0
  2005 ;;Total ram usage:        4 bytes
  2006 ;; Hardware stack levels used:    1
  2007 ;; Hardware stack levels required when called:    5
  2008 ;; This function calls:
  2009 ;;		Nothing
  2010 ;; This function is called by:
  2011 ;;		_sevenSegInit
  2012 ;;		_system_init
  2013 ;;		_Temp_sensor_init
  2014 ;; This function uses a non-reentrant model
  2015 ;;
  2016                           
  2017                           
  2018                           ;psect for function _DIO_init
  2019  01AF                     _DIO_init:
  2020                           
  2021                           ;incstack = 0
  2022                           ; Regs used in _DIO_init: [wreg-fsr0h+status,2+status,0+btemp+1]
  2023                           ;DIO_init@DIO_info stored from wreg
  2024  01AF  1283               	bcf	3,5	;RP0=0, select bank0
  2025  01B0  1303               	bcf	3,6	;RP1=0, select bank0
  2026  01B1  00CE               	movwf	DIO_init@DIO_info
  2027  01B2                     l5391:
  2028                           
  2029                           ;DIO.c: 11: ERROR_STATUS DIO_init (DIO_Cfg_s *DIO_info);DIO.c: 12: {;DIO.c: 13: uint8_t 
      +                          ret_error=0;
  2030  01B2  01CD               	clrf	DIO_init@ret_error
  2031  01B3                     l5393:
  2032                           
  2033                           ;DIO.c: 14: static uint8_t first_powerup_init = 0;;DIO.c: 15: is_init=1;
  2034  01B3  01BB               	clrf	_is_init
  2035  01B4  0ABB               	incf	_is_init,f
  2036  01B5                     l5395:
  2037                           
  2038                           ;DIO.c: 16:  if (first_powerup_init == 0) {
  2039  01B5  083A               	movf	DIO_init@first_powerup_init,w
  2040  01B6  1D03               	btfss	3,2
  2041  01B7  29B9               	goto	u1971
  2042  01B8  29BA               	goto	u1970
  2043  01B9                     u1971:
  2044  01B9  29F0               	goto	l5415
  2045  01BA                     u1970:
  2046  01BA  29CF               	goto	l5411
  2047  01BB                     l5399:
  2048                           
  2049                           ;DIO.c: 20:   *((reg_type8_t)(0x0085))=0x00;
  2050  01BB  1683               	bsf	3,5	;RP0=1, select bank1
  2051  01BC  1303               	bcf	3,6	;RP1=0, select bank1
  2052  01BD  0185               	clrf	5	;volatile
  2053                           
  2054                           ;DIO.c: 21:       break;
  2055  01BE  29EB               	goto	l5413
  2056  01BF                     l5401:
  2057                           
  2058                           ;DIO.c: 23:   *((reg_type8_t)(0x0086))=0x00;
  2059  01BF  1683               	bsf	3,5	;RP0=1, select bank1
  2060  01C0  1303               	bcf	3,6	;RP1=0, select bank1
  2061  01C1  0186               	clrf	6	;volatile
  2062                           
  2063                           ;DIO.c: 24:       break;
  2064  01C2  29EB               	goto	l5413
  2065  01C3                     l5403:
  2066                           
  2067                           ;DIO.c: 26:   *((reg_type8_t)(0x0087))=0x00;
  2068  01C3  1683               	bsf	3,5	;RP0=1, select bank1
  2069  01C4  1303               	bcf	3,6	;RP1=0, select bank1
  2070  01C5  0187               	clrf	7	;volatile
  2071                           
  2072                           ;DIO.c: 27:       break;
  2073  01C6  29EB               	goto	l5413
  2074  01C7                     l5405:
  2075                           
  2076                           ;DIO.c: 29:   *((reg_type8_t)(0x0088))=0x00;
  2077  01C7  1683               	bsf	3,5	;RP0=1, select bank1
  2078  01C8  1303               	bcf	3,6	;RP1=0, select bank1
  2079  01C9  0188               	clrf	8	;volatile
  2080                           
  2081                           ;DIO.c: 30:       break;
  2082  01CA  29EB               	goto	l5413
  2083  01CB                     l5407:
  2084                           
  2085                           ;DIO.c: 32:   *((reg_type8_t)(0x0089))=0x00;
  2086  01CB  1683               	bsf	3,5	;RP0=1, select bank1
  2087  01CC  1303               	bcf	3,6	;RP1=0, select bank1
  2088  01CD  0189               	clrf	9	;volatile
  2089                           
  2090                           ;DIO.c: 33:       break;
  2091  01CE  29EB               	goto	l5413
  2092  01CF                     l5411:
  2093  01CF  084E               	movf	DIO_init@DIO_info,w
  2094  01D0  0084               	movwf	4
  2095  01D1  1383               	bcf	3,7	;select IRP bank0
  2096  01D2  0800               	movf	0,w
  2097  01D3  00CB               	movwf	??_DIO_init
  2098  01D4  01CC               	clrf	??_DIO_init+1
  2099                           
  2100                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2101                           ; Switch size 1, requested type "simple"
  2102                           ; Number of cases is 1, Range of values is 0 to 0
  2103                           ; switch strategies available:
  2104                           ; Name         Instructions Cycles
  2105                           ; simple_byte            4     3 (average)
  2106                           ; direct_byte           11     8 (fixed)
  2107                           ; jumptable            260     6 (fixed)
  2108                           ;	Chosen strategy is simple_byte
  2109  01D5  084C               	movf	??_DIO_init+1,w
  2110  01D6  3A00               	xorlw	0	; case 0
  2111  01D7  1903               	skipnz
  2112  01D8  29DA               	goto	l6421
  2113  01D9  29EB               	goto	l5413
  2114  01DA                     l6421:
  2115                           
  2116                           ; Switch size 1, requested type "simple"
  2117                           ; Number of cases is 5, Range of values is 0 to 4
  2118                           ; switch strategies available:
  2119                           ; Name         Instructions Cycles
  2120                           ; simple_byte           16     9 (average)
  2121                           ; direct_byte           23     8 (fixed)
  2122                           ; jumptable            260     6 (fixed)
  2123                           ;	Chosen strategy is simple_byte
  2124  01DA  084B               	movf	??_DIO_init,w
  2125  01DB  3A00               	xorlw	0	; case 0
  2126  01DC  1903               	skipnz
  2127  01DD  29BB               	goto	l5399
  2128  01DE  3A01               	xorlw	1	; case 1
  2129  01DF  1903               	skipnz
  2130  01E0  29BF               	goto	l5401
  2131  01E1  3A03               	xorlw	3	; case 2
  2132  01E2  1903               	skipnz
  2133  01E3  29C3               	goto	l5403
  2134  01E4  3A01               	xorlw	1	; case 3
  2135  01E5  1903               	skipnz
  2136  01E6  29C7               	goto	l5405
  2137  01E7  3A07               	xorlw	7	; case 4
  2138  01E8  1903               	skipnz
  2139  01E9  29CB               	goto	l5407
  2140  01EA  29EB               	goto	l5413
  2141  01EB                     l5413:
  2142                           
  2143                           ;DIO.c: 35:   first_powerup_init++;
  2144  01EB  3001               	movlw	1
  2145  01EC  00FF               	movwf	btemp+1
  2146  01ED  087F               	movf	btemp+1,w
  2147  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  2148  01EF  07BA               	addwf	DIO_init@first_powerup_init,f
  2149  01F0                     l5415:
  2150                           
  2151                           ;DIO.c: 37: if((DIO_info -> port)== 0)
  2152  01F0  084E               	movf	DIO_init@DIO_info,w
  2153  01F1  0084               	movwf	4
  2154  01F2  1383               	bcf	3,7	;select IRP bank0
  2155  01F3  0800               	movf	0,w
  2156  01F4  1D03               	btfss	3,2
  2157  01F5  29F7               	goto	u1981
  2158  01F6  29F8               	goto	u1980
  2159  01F7                     u1981:
  2160  01F7  2A01               	goto	l5419
  2161  01F8                     u1980:
  2162  01F8                     l5417:
  2163                           
  2164                           ;DIO.c: 38:  *((reg_type8_t)(0x009F)) |=( DIO_info -> operation_mode) ;
  2165  01F8  084E               	movf	DIO_init@DIO_info,w
  2166  01F9  3E03               	addlw	3
  2167  01FA  0084               	movwf	4
  2168  01FB  0800               	movf	0,w
  2169  01FC  00FF               	movwf	btemp+1
  2170  01FD  087F               	movf	btemp+1,w
  2171  01FE  1683               	bsf	3,5	;RP0=1, select bank1
  2172  01FF  1303               	bcf	3,6	;RP1=0, select bank1
  2173  0200  049F               	iorwf	31,f	;volatile
  2174  0201                     l5419:
  2175                           
  2176                           ;DIO.c: 39: if(DIO_info != ((void *)0)){
  2177  0201  1283               	bcf	3,5	;RP0=0, select bank0
  2178  0202  084E               	movf	DIO_init@DIO_info,w
  2179  0203  1903               	btfsc	3,2
  2180  0204  2A06               	goto	u1991
  2181  0205  2A07               	goto	u1990
  2182  0206                     u1991:
  2183  0206  2ABE               	goto	l5461
  2184  0207                     u1990:
  2185  0207  2AAC               	goto	l5459
  2186  0208                     l5423:
  2187                           
  2188                           ;DIO.c: 48:            *((reg_type8_t)(0x0085)) |=(DIO_info-> pin) ;
  2189  0208  084E               	movf	DIO_init@DIO_info,w
  2190  0209  3E02               	addlw	2
  2191  020A  0084               	movwf	4
  2192  020B  0800               	movf	0,w
  2193  020C  00FF               	movwf	btemp+1
  2194  020D  087F               	movf	btemp+1,w
  2195  020E  1683               	bsf	3,5	;RP0=1, select bank1
  2196  020F  1303               	bcf	3,6	;RP1=0, select bank1
  2197  0210  0485               	iorwf	5,f	;volatile
  2198                           
  2199                           ;DIO.c: 49:             break;
  2200  0211  2AC2               	goto	l5463
  2201  0212                     l5425:
  2202                           
  2203                           ;DIO.c: 52:                 *((reg_type8_t)(0x0086)) |=(DIO_info->pin) ;
  2204  0212  084E               	movf	DIO_init@DIO_info,w
  2205  0213  3E02               	addlw	2
  2206  0214  0084               	movwf	4
  2207  0215  0800               	movf	0,w
  2208  0216  00FF               	movwf	btemp+1
  2209  0217  087F               	movf	btemp+1,w
  2210  0218  1683               	bsf	3,5	;RP0=1, select bank1
  2211  0219  1303               	bcf	3,6	;RP1=0, select bank1
  2212  021A  0486               	iorwf	6,f	;volatile
  2213                           
  2214                           ;DIO.c: 53:             break;
  2215  021B  2AC2               	goto	l5463
  2216  021C                     l5427:
  2217                           
  2218                           ;DIO.c: 56:                 *((reg_type8_t)(0x0087)) |=(DIO_info->pin) ;
  2219  021C  084E               	movf	DIO_init@DIO_info,w
  2220  021D  3E02               	addlw	2
  2221  021E  0084               	movwf	4
  2222  021F  0800               	movf	0,w
  2223  0220  00FF               	movwf	btemp+1
  2224  0221  087F               	movf	btemp+1,w
  2225  0222  1683               	bsf	3,5	;RP0=1, select bank1
  2226  0223  1303               	bcf	3,6	;RP1=0, select bank1
  2227  0224  0487               	iorwf	7,f	;volatile
  2228                           
  2229                           ;DIO.c: 57:             break;
  2230  0225  2AC2               	goto	l5463
  2231  0226                     l5429:
  2232                           
  2233                           ;DIO.c: 60:                 *((reg_type8_t)(0x0088)) |=(DIO_info->pin) ;
  2234  0226  084E               	movf	DIO_init@DIO_info,w
  2235  0227  3E02               	addlw	2
  2236  0228  0084               	movwf	4
  2237  0229  0800               	movf	0,w
  2238  022A  00FF               	movwf	btemp+1
  2239  022B  087F               	movf	btemp+1,w
  2240  022C  1683               	bsf	3,5	;RP0=1, select bank1
  2241  022D  1303               	bcf	3,6	;RP1=0, select bank1
  2242  022E  0488               	iorwf	8,f	;volatile
  2243                           
  2244                           ;DIO.c: 61:             break;
  2245  022F  2AC2               	goto	l5463
  2246  0230                     l5431:
  2247                           
  2248                           ;DIO.c: 64:             *((reg_type8_t)(0x0089)) |=(DIO_info->pin) ;
  2249  0230  084E               	movf	DIO_init@DIO_info,w
  2250  0231  3E02               	addlw	2
  2251  0232  0084               	movwf	4
  2252  0233  0800               	movf	0,w
  2253  0234  00FF               	movwf	btemp+1
  2254  0235  087F               	movf	btemp+1,w
  2255  0236  1683               	bsf	3,5	;RP0=1, select bank1
  2256  0237  1303               	bcf	3,6	;RP1=0, select bank1
  2257  0238  0489               	iorwf	9,f	;volatile
  2258                           
  2259                           ;DIO.c: 65:             break;
  2260  0239  2AC2               	goto	l5463
  2261  023A                     l5433:
  2262                           
  2263                           ;DIO.c: 67:             ret_error += 1 +14;
  2264  023A  300F               	movlw	15
  2265  023B  00FF               	movwf	btemp+1
  2266  023C  087F               	movf	btemp+1,w
  2267  023D  07CD               	addwf	DIO_init@ret_error,f
  2268                           
  2269                           ;DIO.c: 68:             break;
  2270  023E  2AC2               	goto	l5463
  2271  023F                     l5437:
  2272  023F  084E               	movf	DIO_init@DIO_info,w
  2273  0240  0084               	movwf	4
  2274  0241  0800               	movf	0,w
  2275  0242  00CB               	movwf	??_DIO_init
  2276  0243  01CC               	clrf	??_DIO_init+1
  2277                           
  2278                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2279                           ; Switch size 1, requested type "simple"
  2280                           ; Number of cases is 1, Range of values is 0 to 0
  2281                           ; switch strategies available:
  2282                           ; Name         Instructions Cycles
  2283                           ; simple_byte            4     3 (average)
  2284                           ; direct_byte           11     8 (fixed)
  2285                           ; jumptable            260     6 (fixed)
  2286                           ;	Chosen strategy is simple_byte
  2287  0244  084C               	movf	??_DIO_init+1,w
  2288  0245  3A00               	xorlw	0	; case 0
  2289  0246  1903               	skipnz
  2290  0247  2A49               	goto	l6423
  2291  0248  2A3A               	goto	l5433
  2292  0249                     l6423:
  2293                           
  2294                           ; Switch size 1, requested type "simple"
  2295                           ; Number of cases is 5, Range of values is 0 to 4
  2296                           ; switch strategies available:
  2297                           ; Name         Instructions Cycles
  2298                           ; simple_byte           16     9 (average)
  2299                           ; direct_byte           23     8 (fixed)
  2300                           ; jumptable            260     6 (fixed)
  2301                           ;	Chosen strategy is simple_byte
  2302  0249  084B               	movf	??_DIO_init,w
  2303  024A  3A00               	xorlw	0	; case 0
  2304  024B  1903               	skipnz
  2305  024C  2A08               	goto	l5423
  2306  024D  3A01               	xorlw	1	; case 1
  2307  024E  1903               	skipnz
  2308  024F  2A12               	goto	l5425
  2309  0250  3A03               	xorlw	3	; case 2
  2310  0251  1903               	skipnz
  2311  0252  2A1C               	goto	l5427
  2312  0253  3A01               	xorlw	1	; case 3
  2313  0254  1903               	skipnz
  2314  0255  2A26               	goto	l5429
  2315  0256  3A07               	xorlw	7	; case 4
  2316  0257  1903               	skipnz
  2317  0258  2A30               	goto	l5431
  2318  0259  2A3A               	goto	l5433
  2319  025A                     l5439:
  2320                           
  2321                           ;DIO.c: 75:         *((reg_type8_t)(0x0085)) &=(~(DIO_info->pin)) ;
  2322  025A  084E               	movf	DIO_init@DIO_info,w
  2323  025B  3E02               	addlw	2
  2324  025C  0084               	movwf	4
  2325  025D  0900               	comf	0,w
  2326  025E  00FF               	movwf	btemp+1
  2327  025F  087F               	movf	btemp+1,w
  2328  0260  1683               	bsf	3,5	;RP0=1, select bank1
  2329  0261  1303               	bcf	3,6	;RP1=0, select bank1
  2330  0262  0585               	andwf	5,f	;volatile
  2331                           
  2332                           ;DIO.c: 76:       break;
  2333  0263  2AC2               	goto	l5463
  2334  0264                     l5441:
  2335                           
  2336                           ;DIO.c: 78:         *((reg_type8_t)(0x0086)) &=(~(DIO_info->pin)) ;
  2337  0264  084E               	movf	DIO_init@DIO_info,w
  2338  0265  3E02               	addlw	2
  2339  0266  0084               	movwf	4
  2340  0267  0900               	comf	0,w
  2341  0268  00FF               	movwf	btemp+1
  2342  0269  087F               	movf	btemp+1,w
  2343  026A  1683               	bsf	3,5	;RP0=1, select bank1
  2344  026B  1303               	bcf	3,6	;RP1=0, select bank1
  2345  026C  0586               	andwf	6,f	;volatile
  2346                           
  2347                           ;DIO.c: 79:       break;
  2348  026D  2AC2               	goto	l5463
  2349  026E                     l5443:
  2350                           
  2351                           ;DIO.c: 81:         *((reg_type8_t)(0x0087)) &=(~(DIO_info->pin)) ;
  2352  026E  084E               	movf	DIO_init@DIO_info,w
  2353  026F  3E02               	addlw	2
  2354  0270  0084               	movwf	4
  2355  0271  0900               	comf	0,w
  2356  0272  00FF               	movwf	btemp+1
  2357  0273  087F               	movf	btemp+1,w
  2358  0274  1683               	bsf	3,5	;RP0=1, select bank1
  2359  0275  1303               	bcf	3,6	;RP1=0, select bank1
  2360  0276  0587               	andwf	7,f	;volatile
  2361                           
  2362                           ;DIO.c: 82:       break;
  2363  0277  2AC2               	goto	l5463
  2364  0278                     l5445:
  2365                           
  2366                           ;DIO.c: 84:         *((reg_type8_t)(0x0088)) &=(~(DIO_info->pin)) ;
  2367  0278  084E               	movf	DIO_init@DIO_info,w
  2368  0279  3E02               	addlw	2
  2369  027A  0084               	movwf	4
  2370  027B  0900               	comf	0,w
  2371  027C  00FF               	movwf	btemp+1
  2372  027D  087F               	movf	btemp+1,w
  2373  027E  1683               	bsf	3,5	;RP0=1, select bank1
  2374  027F  1303               	bcf	3,6	;RP1=0, select bank1
  2375  0280  0588               	andwf	8,f	;volatile
  2376                           
  2377                           ;DIO.c: 85:       break;
  2378  0281  2AC2               	goto	l5463
  2379  0282                     l5447:
  2380                           
  2381                           ;DIO.c: 87:         *((reg_type8_t)(0x0089)) &=(~(DIO_info->pin)) ;
  2382  0282  084E               	movf	DIO_init@DIO_info,w
  2383  0283  3E02               	addlw	2
  2384  0284  0084               	movwf	4
  2385  0285  0900               	comf	0,w
  2386  0286  00FF               	movwf	btemp+1
  2387  0287  087F               	movf	btemp+1,w
  2388  0288  1683               	bsf	3,5	;RP0=1, select bank1
  2389  0289  1303               	bcf	3,6	;RP1=0, select bank1
  2390  028A  0589               	andwf	9,f	;volatile
  2391                           
  2392                           ;DIO.c: 88:       break;
  2393  028B  2AC2               	goto	l5463
  2394  028C                     l5453:
  2395  028C  084E               	movf	DIO_init@DIO_info,w
  2396  028D  0084               	movwf	4
  2397  028E  0800               	movf	0,w
  2398  028F  00CB               	movwf	??_DIO_init
  2399  0290  01CC               	clrf	??_DIO_init+1
  2400                           
  2401                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2402                           ; Switch size 1, requested type "simple"
  2403                           ; Number of cases is 1, Range of values is 0 to 0
  2404                           ; switch strategies available:
  2405                           ; Name         Instructions Cycles
  2406                           ; simple_byte            4     3 (average)
  2407                           ; direct_byte           11     8 (fixed)
  2408                           ; jumptable            260     6 (fixed)
  2409                           ;	Chosen strategy is simple_byte
  2410  0291  084C               	movf	??_DIO_init+1,w
  2411  0292  3A00               	xorlw	0	; case 0
  2412  0293  1903               	skipnz
  2413  0294  2A96               	goto	l6425
  2414  0295  2A3A               	goto	l5433
  2415  0296                     l6425:
  2416                           
  2417                           ; Switch size 1, requested type "simple"
  2418                           ; Number of cases is 5, Range of values is 0 to 4
  2419                           ; switch strategies available:
  2420                           ; Name         Instructions Cycles
  2421                           ; simple_byte           16     9 (average)
  2422                           ; direct_byte           23     8 (fixed)
  2423                           ; jumptable            260     6 (fixed)
  2424                           ;	Chosen strategy is simple_byte
  2425  0296  084B               	movf	??_DIO_init,w
  2426  0297  3A00               	xorlw	0	; case 0
  2427  0298  1903               	skipnz
  2428  0299  2A5A               	goto	l5439
  2429  029A  3A01               	xorlw	1	; case 1
  2430  029B  1903               	skipnz
  2431  029C  2A64               	goto	l5441
  2432  029D  3A03               	xorlw	3	; case 2
  2433  029E  1903               	skipnz
  2434  029F  2A6E               	goto	l5443
  2435  02A0  3A01               	xorlw	1	; case 3
  2436  02A1  1903               	skipnz
  2437  02A2  2A78               	goto	l5445
  2438  02A3  3A07               	xorlw	7	; case 4
  2439  02A4  1903               	skipnz
  2440  02A5  2A82               	goto	l5447
  2441  02A6  2A3A               	goto	l5433
  2442  02A7                     l5455:
  2443                           
  2444                           ;DIO.c: 95: ret_error +=1 + 18;
  2445  02A7  3013               	movlw	19
  2446  02A8  00FF               	movwf	btemp+1
  2447  02A9  087F               	movf	btemp+1,w
  2448  02AA  07CD               	addwf	DIO_init@ret_error,f
  2449                           
  2450                           ;DIO.c: 96: break;
  2451  02AB  2AC2               	goto	l5463
  2452  02AC                     l5459:
  2453  02AC  0A4E               	incf	DIO_init@DIO_info,w
  2454  02AD  0084               	movwf	4
  2455  02AE  0800               	movf	0,w
  2456  02AF  00CB               	movwf	??_DIO_init
  2457  02B0  01CC               	clrf	??_DIO_init+1
  2458                           
  2459                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2460                           ; Switch size 1, requested type "simple"
  2461                           ; Number of cases is 1, Range of values is 0 to 0
  2462                           ; switch strategies available:
  2463                           ; Name         Instructions Cycles
  2464                           ; simple_byte            4     3 (average)
  2465                           ; direct_byte           11     8 (fixed)
  2466                           ; jumptable            260     6 (fixed)
  2467                           ;	Chosen strategy is simple_byte
  2468  02B1  084C               	movf	??_DIO_init+1,w
  2469  02B2  3A00               	xorlw	0	; case 0
  2470  02B3  1903               	skipnz
  2471  02B4  2AB6               	goto	l6427
  2472  02B5  2AA7               	goto	l5455
  2473  02B6                     l6427:
  2474                           
  2475                           ; Switch size 1, requested type "simple"
  2476                           ; Number of cases is 2, Range of values is 0 to 255
  2477                           ; switch strategies available:
  2478                           ; Name         Instructions Cycles
  2479                           ; simple_byte            7     4 (average)
  2480                           ; jumptable            260     6 (fixed)
  2481                           ;	Chosen strategy is simple_byte
  2482  02B6  084B               	movf	??_DIO_init,w
  2483  02B7  3A00               	xorlw	0	; case 0
  2484  02B8  1903               	skipnz
  2485  02B9  2A3F               	goto	l5437
  2486  02BA  3AFF               	xorlw	255	; case 255
  2487  02BB  1903               	skipnz
  2488  02BC  2A8C               	goto	l5453
  2489  02BD  2AA7               	goto	l5455
  2490  02BE                     l5461:
  2491                           
  2492                           ;DIO.c: 99: {;DIO.c: 100: ret_error +=1 +16;
  2493  02BE  3011               	movlw	17
  2494  02BF  00FF               	movwf	btemp+1
  2495  02C0  087F               	movf	btemp+1,w
  2496  02C1  07CD               	addwf	DIO_init@ret_error,f
  2497  02C2                     l5463:
  2498                           
  2499                           ;DIO.c: 102: return ret_error;
  2500  02C2  1283               	bcf	3,5	;RP0=0, select bank0
  2501  02C3  084D               	movf	DIO_init@ret_error,w
  2502  02C4                     l338:
  2503  02C4  0008               	return
  2504  02C5                     __end_of_DIO_init:
  2505                           
  2506                           	psect	text6
  2507  057F                     __ptext6:	
  2508 ;; *************** function _SOS_Init *****************
  2509 ;; Defined at:
  2510 ;;		line 24 in file "SOS.c"
  2511 ;; Parameters:    Size  Location     Type
  2512 ;;  ConfigPtr       1    wreg     PTR const struct TMU_Con
  2513 ;;		 -> TMU_Configuration(2), 
  2514 ;; Auto vars:     Size  Location     Type
  2515 ;;  ConfigPtr       1   16[BANK0 ] PTR const struct TMU_Con
  2516 ;;		 -> TMU_Configuration(2), 
  2517 ;;  ret             1   15[BANK0 ] unsigned char 
  2518 ;;  u8_channel_I    1   14[BANK0 ] unsigned char 
  2519 ;; Return value:  Size  Location     Type
  2520 ;;                  1    wreg      unsigned char 
  2521 ;; Registers used:
  2522 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2523 ;; Tracked objects:
  2524 ;;		On entry : 0/0
  2525 ;;		On exit  : 0/0
  2526 ;;		Unchanged: 0/0
  2527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2528 ;;      Params:         0       0       0       0       0
  2529 ;;      Locals:         0       3       0       0       0
  2530 ;;      Temps:          0       2       0       0       0
  2531 ;;      Totals:         0       5       0       0       0
  2532 ;;Total ram usage:        5 bytes
  2533 ;; Hardware stack levels used:    1
  2534 ;; Hardware stack levels required when called:    8
  2535 ;; This function calls:
  2536 ;;		_Timer_Init
  2537 ;;		_Timer_Start
  2538 ;; This function is called by:
  2539 ;;		_system_init
  2540 ;; This function uses a non-reentrant model
  2541 ;;
  2542                           
  2543                           
  2544                           ;psect for function _SOS_Init
  2545  057F                     _SOS_Init:
  2546                           
  2547                           ;incstack = 0
  2548 ;; hardware stack exceeded
  2549                           ; Regs used in _SOS_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2550                           ;SOS_Init@ConfigPtr stored from wreg
  2551  057F  1283               	bcf	3,5	;RP0=0, select bank0
  2552  0580  1303               	bcf	3,6	;RP1=0, select bank0
  2553  0581  00D7               	movwf	SOS_Init@ConfigPtr
  2554  0582                     l5519:
  2555                           
  2556                           ;SOS.c: 24: ERROR_STATUS SOS_Init (const TMU_ConfigType * ConfigPtr );SOS.c: 25: {uint8_
      +                          t u8_channel_ID=ConfigPtr->u8_Timer_channel;
  2557  0582  0857               	movf	SOS_Init@ConfigPtr,w
  2558  0583  3E01               	addlw	1
  2559  0584  0084               	movwf	4
  2560  0585  120A  158A  2000  120A  118A  	fcall	stringdir
  2561  058A  00FF               	movwf	btemp+1
  2562  058B  087F               	movf	btemp+1,w
  2563  058C  00D5               	movwf	SOS_Init@u8_channel_ID
  2564  058D                     l5521:
  2565                           
  2566                           ;SOS.c: 26: uint8_t ret=0;
  2567  058D  01D6               	clrf	SOS_Init@ret
  2568  058E                     l5523:
  2569                           
  2570                           ;SOS.c: 30: u8_Is_Intialized++;
  2571  058E  3001               	movlw	1
  2572  058F  00FF               	movwf	btemp+1
  2573  0590  087F               	movf	btemp+1,w
  2574  0591  07B7               	addwf	_u8_Is_Intialized,f
  2575  0592                     l5525:
  2576                           
  2577                           ;SOS.c: 32: if(ConfigPtr==((void *)0)){ret=32 +16;}
  2578  0592  0857               	movf	SOS_Init@ConfigPtr,w
  2579  0593  1D03               	btfss	3,2
  2580  0594  2D96               	goto	u2011
  2581  0595  2D97               	goto	u2010
  2582  0596                     u2011:
  2583  0596  2DB5               	goto	l5539
  2584  0597                     u2010:
  2585  0597                     l5527:
  2586  0597  3030               	movlw	48
  2587  0598  00FF               	movwf	btemp+1
  2588  0599  087F               	movf	btemp+1,w
  2589  059A  00D6               	movwf	SOS_Init@ret
  2590  059B  2DB5               	goto	l5539
  2591  059C                     l5529:
  2592                           
  2593                           ;SOS.c: 36:    Timer_Init(&Timer_Configuration0);
  2594  059C  30DC               	movlw	(low (_Timer_Configuration0| 0))& (0+255)
  2595  059D  120A  118A  2085  120A  118A  	fcall	_Timer_Init
  2596                           
  2597                           ;SOS.c: 37:     break;
  2598  05A2  2DF0               	goto	l5555
  2599  05A3                     l5531:
  2600                           
  2601                           ;SOS.c: 40:   Timer_Init(&Timer_Configuration2_SOS);
  2602  05A3  30D7               	movlw	(low (_Timer_Configuration2_SOS| 0))& (0+255)
  2603  05A4  120A  118A  2085  120A  118A  	fcall	_Timer_Init
  2604  05A9                     l5533:
  2605                           
  2606                           ;SOS.c: 41:                 TIMER2OVF_INT = timer_interrupt;
  2607  05A9  3004               	movlw	(low (fp__timer_interrupt-i1fpbase))& (0+255)
  2608  05AA  00FF               	movwf	btemp+1
  2609  05AB  087F               	movf	btemp+1,w
  2610  05AC  1283               	bcf	3,5	;RP0=0, select bank0
  2611  05AD  1303               	bcf	3,6	;RP1=0, select bank0
  2612  05AE  00BC               	movwf	_TIMER2OVF_INT
  2613                           
  2614                           ;SOS.c: 42:    break;
  2615  05AF  2DF0               	goto	l5555
  2616  05B0                     l5535:
  2617                           
  2618                           ;SOS.c: 44:    ret+=1;
  2619  05B0  3001               	movlw	1
  2620  05B1  00FF               	movwf	btemp+1
  2621  05B2  087F               	movf	btemp+1,w
  2622  05B3  07D6               	addwf	SOS_Init@ret,f
  2623                           
  2624                           ;SOS.c: 45:    break;
  2625  05B4  2DF0               	goto	l5555
  2626  05B5                     l5539:
  2627  05B5  0855               	movf	SOS_Init@u8_channel_ID,w
  2628  05B6  00D3               	movwf	??_SOS_Init
  2629  05B7  01D4               	clrf	??_SOS_Init+1
  2630                           
  2631                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2632                           ; Switch size 1, requested type "simple"
  2633                           ; Number of cases is 1, Range of values is 0 to 0
  2634                           ; switch strategies available:
  2635                           ; Name         Instructions Cycles
  2636                           ; simple_byte            4     3 (average)
  2637                           ; direct_byte           11     8 (fixed)
  2638                           ; jumptable            260     6 (fixed)
  2639                           ;	Chosen strategy is simple_byte
  2640  05B8  0854               	movf	??_SOS_Init+1,w
  2641  05B9  3A00               	xorlw	0	; case 0
  2642  05BA  1903               	skipnz
  2643  05BB  2DBD               	goto	l6429
  2644  05BC  2DB0               	goto	l5535
  2645  05BD                     l6429:
  2646                           
  2647                           ; Switch size 1, requested type "simple"
  2648                           ; Number of cases is 2, Range of values is 0 to 2
  2649                           ; switch strategies available:
  2650                           ; Name         Instructions Cycles
  2651                           ; simple_byte            7     4 (average)
  2652                           ; direct_byte           17     8 (fixed)
  2653                           ; jumptable            260     6 (fixed)
  2654                           ;	Chosen strategy is simple_byte
  2655  05BD  0853               	movf	??_SOS_Init,w
  2656  05BE  3A00               	xorlw	0	; case 0
  2657  05BF  1903               	skipnz
  2658  05C0  2D9C               	goto	l5529
  2659  05C1  3A02               	xorlw	2	; case 2
  2660  05C2  1903               	skipnz
  2661  05C3  2DA3               	goto	l5531
  2662  05C4  2DB0               	goto	l5535
  2663  05C5                     l5541:
  2664                           
  2665                           ;SOS.c: 59:   Timer_Start(0,250);
  2666  05C5  30FA               	movlw	250
  2667  05C6  00CB               	movwf	Timer_Start@Timer_Count
  2668  05C7  3000               	movlw	0
  2669  05C8  00CC               	movwf	Timer_Start@Timer_Count+1
  2670  05C9  3000               	movlw	0
  2671  05CA  120A  158A  232D  120A  118A  	fcall	_Timer_Start
  2672                           
  2673                           ;SOS.c: 61:      break;
  2674  05CF  2E05               	goto	l5557
  2675  05D0                     l5543:
  2676                           
  2677                           ;SOS.c: 63:     Timer_Start(2,250);
  2678  05D0  30FA               	movlw	250
  2679  05D1  00CB               	movwf	Timer_Start@Timer_Count
  2680  05D2  3000               	movlw	0
  2681  05D3  00CC               	movwf	Timer_Start@Timer_Count+1
  2682  05D4  3002               	movlw	2
  2683  05D5  120A  158A  232D  120A  118A  	fcall	_Timer_Start
  2684                           
  2685                           ;SOS.c: 64:      break;
  2686  05DA  2E05               	goto	l5557
  2687  05DB                     l5545:
  2688                           
  2689                           ;SOS.c: 66:     ret+=1;
  2690  05DB  3001               	movlw	1
  2691  05DC  00FF               	movwf	btemp+1
  2692  05DD  087F               	movf	btemp+1,w
  2693  05DE  07D6               	addwf	SOS_Init@ret,f
  2694                           
  2695                           ;SOS.c: 67:      break;
  2696  05DF  2E05               	goto	l5557
  2697  05E0                     l5549:
  2698  05E0  0855               	movf	SOS_Init@u8_channel_ID,w
  2699  05E1  00D3               	movwf	??_SOS_Init
  2700  05E2  01D4               	clrf	??_SOS_Init+1
  2701                           
  2702                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2703                           ; Switch size 1, requested type "simple"
  2704                           ; Number of cases is 1, Range of values is 0 to 0
  2705                           ; switch strategies available:
  2706                           ; Name         Instructions Cycles
  2707                           ; simple_byte            4     3 (average)
  2708                           ; direct_byte           11     8 (fixed)
  2709                           ; jumptable            260     6 (fixed)
  2710                           ;	Chosen strategy is simple_byte
  2711  05E3  0854               	movf	??_SOS_Init+1,w
  2712  05E4  3A00               	xorlw	0	; case 0
  2713  05E5  1903               	skipnz
  2714  05E6  2DE8               	goto	l6431
  2715  05E7  2DDB               	goto	l5545
  2716  05E8                     l6431:
  2717                           
  2718                           ; Switch size 1, requested type "simple"
  2719                           ; Number of cases is 2, Range of values is 0 to 2
  2720                           ; switch strategies available:
  2721                           ; Name         Instructions Cycles
  2722                           ; simple_byte            7     4 (average)
  2723                           ; direct_byte           17     8 (fixed)
  2724                           ; jumptable            260     6 (fixed)
  2725                           ;	Chosen strategy is simple_byte
  2726  05E8  0853               	movf	??_SOS_Init,w
  2727  05E9  3A00               	xorlw	0	; case 0
  2728  05EA  1903               	skipnz
  2729  05EB  2DC5               	goto	l5541
  2730  05EC  3A02               	xorlw	2	; case 2
  2731  05ED  1903               	skipnz
  2732  05EE  2DD0               	goto	l5543
  2733  05EF  2DDB               	goto	l5545
  2734  05F0                     l5555:
  2735  05F0  1283               	bcf	3,5	;RP0=0, select bank0
  2736  05F1  1303               	bcf	3,6	;RP1=0, select bank0
  2737  05F2  0857               	movf	SOS_Init@ConfigPtr,w
  2738  05F3  0084               	movwf	4
  2739  05F4  120A  158A  2000  120A  118A  	fcall	stringdir
  2740  05F9  00D3               	movwf	??_SOS_Init
  2741  05FA  01D4               	clrf	??_SOS_Init+1
  2742                           
  2743                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2744                           ; Switch size 1, requested type "simple"
  2745                           ; Number of cases is 1, Range of values is 0 to 0
  2746                           ; switch strategies available:
  2747                           ; Name         Instructions Cycles
  2748                           ; simple_byte            4     3 (average)
  2749                           ; direct_byte           11     8 (fixed)
  2750                           ; jumptable            260     6 (fixed)
  2751                           ;	Chosen strategy is simple_byte
  2752  05FB  0854               	movf	??_SOS_Init+1,w
  2753  05FC  3A00               	xorlw	0	; case 0
  2754  05FD  1903               	skipnz
  2755  05FE  2E00               	goto	l6433
  2756  05FF  2DDB               	goto	l5545
  2757  0600                     l6433:
  2758                           
  2759                           ; Switch size 1, requested type "simple"
  2760                           ; Number of cases is 1, Range of values is 1 to 1
  2761                           ; switch strategies available:
  2762                           ; Name         Instructions Cycles
  2763                           ; simple_byte            4     3 (average)
  2764                           ; direct_byte           14    11 (fixed)
  2765                           ; jumptable            263     9 (fixed)
  2766                           ;	Chosen strategy is simple_byte
  2767  0600  0853               	movf	??_SOS_Init,w
  2768  0601  3A01               	xorlw	1	; case 1
  2769  0602  1903               	skipnz
  2770  0603  2DE0               	goto	l5549
  2771  0604  2DDB               	goto	l5545
  2772  0605                     l5557:
  2773                           
  2774                           ;SOS.c: 85: return ret;
  2775  0605  1283               	bcf	3,5	;RP0=0, select bank0
  2776  0606  1303               	bcf	3,6	;RP1=0, select bank0
  2777  0607  0856               	movf	SOS_Init@ret,w
  2778  0608                     l458:
  2779  0608  0008               	return
  2780  0609                     __end_of_SOS_Init:
  2781                           
  2782                           	psect	text7
  2783  0085                     __ptext7:	
  2784 ;; *************** function _Timer_Init *****************
  2785 ;; Defined at:
  2786 ;;		line 19 in file "Timer.c"
  2787 ;; Parameters:    Size  Location     Type
  2788 ;;  Timer_cfg       1    wreg     PTR struct Timer_cfg_s
  2789 ;;		 -> Timer_Deinit_Configuration0(5), Timer_Configuration2_SOS(5), Timer_Configuration0(5), Timer_Configuration1_7_seg
      +(5), 
  2790 ;; Auto vars:     Size  Location     Type
  2791 ;;  Timer_cfg       1   11[BANK0 ] PTR struct Timer_cfg_s
  2792 ;;		 -> Timer_Deinit_Configuration0(5), Timer_Configuration2_SOS(5), Timer_Configuration0(5), Timer_Configuration1_7_seg
      +(5), 
  2793 ;;  ret_error       1   10[BANK0 ] unsigned char 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  1    wreg      unsigned char 
  2796 ;; Registers used:
  2797 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2803 ;;      Params:         0       0       0       0       0
  2804 ;;      Locals:         0       2       0       0       0
  2805 ;;      Temps:          0       2       0       0       0
  2806 ;;      Totals:         0       4       0       0       0
  2807 ;;Total ram usage:        4 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    7
  2810 ;; This function calls:
  2811 ;;		_special_int_disable
  2812 ;;		_special_int_enable
  2813 ;; This function is called by:
  2814 ;;		_sevenSegInit
  2815 ;;		_SOS_Init
  2816 ;;		_system_init
  2817 ;;		_TMU_DeInit
  2818 ;; This function uses a non-reentrant model
  2819 ;;
  2820                           
  2821                           
  2822                           ;psect for function _Timer_Init
  2823  0085                     _Timer_Init:
  2824                           
  2825                           ;incstack = 0
  2826 ;; hardware stack exceeded
  2827                           ; Regs used in _Timer_Init: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2828                           ;Timer_Init@Timer_cfg stored from wreg
  2829  0085  1283               	bcf	3,5	;RP0=0, select bank0
  2830  0086  1303               	bcf	3,6	;RP1=0, select bank0
  2831  0087  00D2               	movwf	Timer_Init@Timer_cfg
  2832  0088                     l5281:
  2833                           
  2834                           ;Timer.c: 19: ERROR_STATUS Timer_Init(Timer_cfg_s* Timer_cfg);Timer.c: 20: {;Timer.c: 21
      +                          : uint8_t ret_error = 0;
  2835  0088  01D1               	clrf	Timer_Init@ret_error
  2836                           
  2837                           ;Timer.c: 23: switch (Timer_cfg->Timer_CH_NO)
  2838  0089  2997               	goto	l5349
  2839  008A                     l5283:
  2840                           
  2841                           ;Timer.c: 26:     Prescaler0 &= (Timer_cfg -> Timer_Mode);
  2842  008A  0A52               	incf	Timer_Init@Timer_cfg,w
  2843  008B  0084               	movwf	4
  2844  008C  0800               	movf	0,w
  2845  008D  00FF               	movwf	btemp+1
  2846  008E  087F               	movf	btemp+1,w
  2847  008F  05DE               	andwf	_Prescaler0,f
  2848                           
  2849                           ;Timer.c: 27:         switch (Timer_cfg->Timer_Polling_Or_Interrupt)
  2850  0090  28B6               	goto	l5295
  2851  0091                     l5285:
  2852                           
  2853                           ;Timer.c: 30:            ret_error =special_int_enable(0);
  2854  0091  3000               	movlw	0
  2855  0092  120A  118A  2710  120A  118A  	fcall	_special_int_enable
  2856  0097  00FF               	movwf	btemp+1
  2857  0098  087F               	movf	btemp+1,w
  2858  0099  1283               	bcf	3,5	;RP0=0, select bank0
  2859  009A  1303               	bcf	3,6	;RP1=0, select bank0
  2860  009B  00D1               	movwf	Timer_Init@ret_error
  2861  009C                     l5287:
  2862                           
  2863                           ;Timer.c: 31:            TIMER0OVF_INT = ( Timer_cfg -> Timer_Cbk_ptr);
  2864  009C  0852               	movf	Timer_Init@Timer_cfg,w
  2865  009D  3E04               	addlw	4
  2866  009E  0084               	movwf	4
  2867  009F  1383               	bcf	3,7	;select IRP bank0
  2868  00A0  0800               	movf	0,w
  2869  00A1  00FF               	movwf	btemp+1
  2870  00A2  087F               	movf	btemp+1,w
  2871  00A3  00BE               	movwf	_TIMER0OVF_INT
  2872                           
  2873                           ;Timer.c: 32:             break;
  2874  00A4  29AD               	goto	l5351
  2875  00A5                     l5289:
  2876                           
  2877                           ;Timer.c: 34:             ret_error =special_int_disable(0);
  2878  00A5  3000               	movlw	0
  2879  00A6  120A  158A  2490  120A  118A  	fcall	_special_int_disable
  2880  00AB  00FF               	movwf	btemp+1
  2881  00AC  087F               	movf	btemp+1,w
  2882  00AD  1283               	bcf	3,5	;RP0=0, select bank0
  2883  00AE  1303               	bcf	3,6	;RP1=0, select bank0
  2884  00AF  00D1               	movwf	Timer_Init@ret_error
  2885                           
  2886                           ;Timer.c: 35:             break;
  2887  00B0  29AD               	goto	l5351
  2888  00B1                     l5291:
  2889                           
  2890                           ;Timer.c: 37:             ret_error += 1 +24;
  2891  00B1  3019               	movlw	25
  2892  00B2  00FF               	movwf	btemp+1
  2893  00B3  087F               	movf	btemp+1,w
  2894  00B4  07D1               	addwf	Timer_Init@ret_error,f
  2895                           
  2896                           ;Timer.c: 38:             break;
  2897  00B5  29AD               	goto	l5351
  2898  00B6                     l5295:
  2899  00B6  0852               	movf	Timer_Init@Timer_cfg,w
  2900  00B7  3E02               	addlw	2
  2901  00B8  0084               	movwf	4
  2902  00B9  0800               	movf	0,w
  2903  00BA  00CF               	movwf	??_Timer_Init
  2904  00BB  01D0               	clrf	??_Timer_Init+1
  2905                           
  2906                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2907                           ; Switch size 1, requested type "simple"
  2908                           ; Number of cases is 1, Range of values is 0 to 0
  2909                           ; switch strategies available:
  2910                           ; Name         Instructions Cycles
  2911                           ; simple_byte            4     3 (average)
  2912                           ; direct_byte           11     8 (fixed)
  2913                           ; jumptable            260     6 (fixed)
  2914                           ;	Chosen strategy is simple_byte
  2915  00BC  0850               	movf	??_Timer_Init+1,w
  2916  00BD  3A00               	xorlw	0	; case 0
  2917  00BE  1903               	skipnz
  2918  00BF  28C1               	goto	l6435
  2919  00C0  28B1               	goto	l5291
  2920  00C1                     l6435:
  2921                           
  2922                           ; Switch size 1, requested type "simple"
  2923                           ; Number of cases is 2, Range of values is 160 to 223
  2924                           ; switch strategies available:
  2925                           ; Name         Instructions Cycles
  2926                           ; simple_byte            7     4 (average)
  2927                           ; direct_byte          203    11 (fixed)
  2928                           ; jumptable            263     9 (fixed)
  2929                           ;	Chosen strategy is simple_byte
  2930  00C1  084F               	movf	??_Timer_Init,w
  2931  00C2  3AA0               	xorlw	160	; case 160
  2932  00C3  1903               	skipnz
  2933  00C4  2891               	goto	l5285
  2934  00C5  3A7F               	xorlw	127	; case 223
  2935  00C6  1903               	skipnz
  2936  00C7  28A5               	goto	l5289
  2937  00C8  28B1               	goto	l5291
  2938  00C9                     l5297:
  2939                           
  2940                           ;Timer.c: 45:         Prescaler1 |= (Timer_cfg -> Timer_Prescaler)|0X08;
  2941  00C9  0852               	movf	Timer_Init@Timer_cfg,w
  2942  00CA  3E03               	addlw	3
  2943  00CB  0084               	movwf	4
  2944  00CC  0800               	movf	0,w
  2945  00CD  3808               	iorlw	8
  2946  00CE  00FF               	movwf	btemp+1
  2947  00CF  087F               	movf	btemp+1,w
  2948  00D0  04B4               	iorwf	_Prescaler1,f
  2949                           
  2950                           ;Timer.c: 46:         switch (Timer_cfg->Timer_Polling_Or_Interrupt)
  2951  00D1  28F2               	goto	l5309
  2952  00D2                     l5299:
  2953                           
  2954                           ;Timer.c: 49:                 ret_error = special_int_enable(1);
  2955  00D2  3001               	movlw	1
  2956  00D3  120A  118A  2710  120A  118A  	fcall	_special_int_enable
  2957  00D8  00FF               	movwf	btemp+1
  2958  00D9  087F               	movf	btemp+1,w
  2959  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  2960  00DB  1303               	bcf	3,6	;RP1=0, select bank0
  2961  00DC  00D1               	movwf	Timer_Init@ret_error
  2962  00DD                     l5301:
  2963                           
  2964                           ;Timer.c: 50:                 TIMER1OVF_INT = ( Timer_cfg -> Timer_Cbk_ptr);
  2965  00DD  0852               	movf	Timer_Init@Timer_cfg,w
  2966  00DE  3E04               	addlw	4
  2967  00DF  0084               	movwf	4
  2968  00E0  1383               	bcf	3,7	;select IRP bank0
  2969  00E1  0800               	movf	0,w
  2970  00E2  00FF               	movwf	btemp+1
  2971  00E3  087F               	movf	btemp+1,w
  2972  00E4  00BD               	movwf	_TIMER1OVF_INT
  2973                           
  2974                           ;Timer.c: 51:             break;
  2975  00E5  29AD               	goto	l5351
  2976  00E6                     l5303:
  2977                           
  2978                           ;Timer.c: 53:                 ret_error = special_int_disable(1);
  2979  00E6  3001               	movlw	1
  2980  00E7  120A  158A  2490  120A  118A  	fcall	_special_int_disable
  2981  00EC  00FF               	movwf	btemp+1
  2982  00ED  087F               	movf	btemp+1,w
  2983  00EE  1283               	bcf	3,5	;RP0=0, select bank0
  2984  00EF  1303               	bcf	3,6	;RP1=0, select bank0
  2985  00F0  00D1               	movwf	Timer_Init@ret_error
  2986                           
  2987                           ;Timer.c: 54:             break;
  2988  00F1  29AD               	goto	l5351
  2989  00F2                     l5309:
  2990  00F2  0852               	movf	Timer_Init@Timer_cfg,w
  2991  00F3  3E02               	addlw	2
  2992  00F4  0084               	movwf	4
  2993  00F5  0800               	movf	0,w
  2994  00F6  00CF               	movwf	??_Timer_Init
  2995  00F7  01D0               	clrf	??_Timer_Init+1
  2996                           
  2997                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2998                           ; Switch size 1, requested type "simple"
  2999                           ; Number of cases is 1, Range of values is 0 to 0
  3000                           ; switch strategies available:
  3001                           ; Name         Instructions Cycles
  3002                           ; simple_byte            4     3 (average)
  3003                           ; direct_byte           11     8 (fixed)
  3004                           ; jumptable            260     6 (fixed)
  3005                           ;	Chosen strategy is simple_byte
  3006  00F8  0850               	movf	??_Timer_Init+1,w
  3007  00F9  3A00               	xorlw	0	; case 0
  3008  00FA  1903               	skipnz
  3009  00FB  28FD               	goto	l6437
  3010  00FC  28B1               	goto	l5291
  3011  00FD                     l6437:
  3012                           
  3013                           ; Switch size 1, requested type "simple"
  3014                           ; Number of cases is 2, Range of values is 1 to 254
  3015                           ; switch strategies available:
  3016                           ; Name         Instructions Cycles
  3017                           ; simple_byte            7     4 (average)
  3018                           ; jumptable            263     9 (fixed)
  3019                           ;	Chosen strategy is simple_byte
  3020  00FD  084F               	movf	??_Timer_Init,w
  3021  00FE  3A01               	xorlw	1	; case 1
  3022  00FF  1903               	skipnz
  3023  0100  28D2               	goto	l5299
  3024  0101  3AFF               	xorlw	255	; case 254
  3025  0102  1903               	skipnz
  3026  0103  28E6               	goto	l5303
  3027  0104  28B1               	goto	l5291
  3028  0105                     l5311:
  3029                           
  3030                           ;Timer.c: 61:       Prescaler1 |= (Timer_cfg -> Timer_Prescaler);
  3031  0105  0852               	movf	Timer_Init@Timer_cfg,w
  3032  0106  3E03               	addlw	3
  3033  0107  0084               	movwf	4
  3034  0108  0800               	movf	0,w
  3035  0109  00FF               	movwf	btemp+1
  3036  010A  087F               	movf	btemp+1,w
  3037  010B  04B4               	iorwf	_Prescaler1,f
  3038                           
  3039                           ;Timer.c: 62:         switch (Timer_cfg->Timer_Polling_Or_Interrupt)
  3040  010C  292D               	goto	l5323
  3041  010D                     l5313:
  3042                           
  3043                           ;Timer.c: 65:             ret_error = special_int_enable(1);
  3044  010D  3001               	movlw	1
  3045  010E  120A  118A  2710  120A  118A  	fcall	_special_int_enable
  3046  0113  00FF               	movwf	btemp+1
  3047  0114  087F               	movf	btemp+1,w
  3048  0115  1283               	bcf	3,5	;RP0=0, select bank0
  3049  0116  1303               	bcf	3,6	;RP1=0, select bank0
  3050  0117  00D1               	movwf	Timer_Init@ret_error
  3051  0118                     l5315:
  3052                           
  3053                           ;Timer.c: 66:             TIMER1OVF_INT = ( Timer_cfg -> Timer_Cbk_ptr);
  3054  0118  0852               	movf	Timer_Init@Timer_cfg,w
  3055  0119  3E04               	addlw	4
  3056  011A  0084               	movwf	4
  3057  011B  1383               	bcf	3,7	;select IRP bank0
  3058  011C  0800               	movf	0,w
  3059  011D  00FF               	movwf	btemp+1
  3060  011E  087F               	movf	btemp+1,w
  3061  011F  00BD               	movwf	_TIMER1OVF_INT
  3062                           
  3063                           ;Timer.c: 67:             break;
  3064  0120  29AD               	goto	l5351
  3065  0121                     l5317:
  3066                           
  3067                           ;Timer.c: 69:             ret_error = special_int_disable(1);
  3068  0121  3001               	movlw	1
  3069  0122  120A  158A  2490  120A  118A  	fcall	_special_int_disable
  3070  0127  00FF               	movwf	btemp+1
  3071  0128  087F               	movf	btemp+1,w
  3072  0129  1283               	bcf	3,5	;RP0=0, select bank0
  3073  012A  1303               	bcf	3,6	;RP1=0, select bank0
  3074  012B  00D1               	movwf	Timer_Init@ret_error
  3075                           
  3076                           ;Timer.c: 70:             break;
  3077  012C  29AD               	goto	l5351
  3078  012D                     l5323:
  3079  012D  0852               	movf	Timer_Init@Timer_cfg,w
  3080  012E  3E02               	addlw	2
  3081  012F  0084               	movwf	4
  3082  0130  0800               	movf	0,w
  3083  0131  00CF               	movwf	??_Timer_Init
  3084  0132  01D0               	clrf	??_Timer_Init+1
  3085                           
  3086                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3087                           ; Switch size 1, requested type "simple"
  3088                           ; Number of cases is 1, Range of values is 0 to 0
  3089                           ; switch strategies available:
  3090                           ; Name         Instructions Cycles
  3091                           ; simple_byte            4     3 (average)
  3092                           ; direct_byte           11     8 (fixed)
  3093                           ; jumptable            260     6 (fixed)
  3094                           ;	Chosen strategy is simple_byte
  3095  0133  0850               	movf	??_Timer_Init+1,w
  3096  0134  3A00               	xorlw	0	; case 0
  3097  0135  1903               	skipnz
  3098  0136  2938               	goto	l6439
  3099  0137  28B1               	goto	l5291
  3100  0138                     l6439:
  3101                           
  3102                           ; Switch size 1, requested type "simple"
  3103                           ; Number of cases is 2, Range of values is 1 to 254
  3104                           ; switch strategies available:
  3105                           ; Name         Instructions Cycles
  3106                           ; simple_byte            7     4 (average)
  3107                           ; jumptable            263     9 (fixed)
  3108                           ;	Chosen strategy is simple_byte
  3109  0138  084F               	movf	??_Timer_Init,w
  3110  0139  3A01               	xorlw	1	; case 1
  3111  013A  1903               	skipnz
  3112  013B  290D               	goto	l5313
  3113  013C  3AFF               	xorlw	255	; case 254
  3114  013D  1903               	skipnz
  3115  013E  2921               	goto	l5317
  3116  013F  28B1               	goto	l5291
  3117  0140                     l5325:
  3118                           
  3119                           ;Timer.c: 77:       ret_error += 1 +22;
  3120  0140  3017               	movlw	23
  3121  0141  00FF               	movwf	btemp+1
  3122  0142  087F               	movf	btemp+1,w
  3123  0143  07D1               	addwf	Timer_Init@ret_error,f
  3124                           
  3125                           ;Timer.c: 78:       break;
  3126  0144  29AD               	goto	l5351
  3127  0145                     l5329:
  3128  0145  0A52               	incf	Timer_Init@Timer_cfg,w
  3129  0146  0084               	movwf	4
  3130  0147  0800               	movf	0,w
  3131  0148  00CF               	movwf	??_Timer_Init
  3132  0149  01D0               	clrf	??_Timer_Init+1
  3133                           
  3134                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3135                           ; Switch size 1, requested type "simple"
  3136                           ; Number of cases is 1, Range of values is 0 to 0
  3137                           ; switch strategies available:
  3138                           ; Name         Instructions Cycles
  3139                           ; simple_byte            4     3 (average)
  3140                           ; direct_byte           11     8 (fixed)
  3141                           ; jumptable            260     6 (fixed)
  3142                           ;	Chosen strategy is simple_byte
  3143  014A  0850               	movf	??_Timer_Init+1,w
  3144  014B  3A00               	xorlw	0	; case 0
  3145  014C  1903               	skipnz
  3146  014D  294F               	goto	l6441
  3147  014E  2940               	goto	l5325
  3148  014F                     l6441:
  3149                           
  3150                           ; Switch size 1, requested type "simple"
  3151                           ; Number of cases is 2, Range of values is 0 to 1
  3152                           ; switch strategies available:
  3153                           ; Name         Instructions Cycles
  3154                           ; simple_byte            7     4 (average)
  3155                           ; direct_byte           14     8 (fixed)
  3156                           ; jumptable            260     6 (fixed)
  3157                           ;	Chosen strategy is simple_byte
  3158  014F  084F               	movf	??_Timer_Init,w
  3159  0150  3A00               	xorlw	0	; case 0
  3160  0151  1903               	skipnz
  3161  0152  28C9               	goto	l5297
  3162  0153  3A01               	xorlw	1	; case 1
  3163  0154  1903               	skipnz
  3164  0155  2905               	goto	l5311
  3165  0156  2940               	goto	l5325
  3166  0157                     l5331:
  3167                           
  3168                           ;Timer.c: 83:           *((reg_type8_t)(0x0012)) |= (Timer_cfg -> Timer_Prescaler);
  3169  0157  0852               	movf	Timer_Init@Timer_cfg,w
  3170  0158  3E03               	addlw	3
  3171  0159  0084               	movwf	4
  3172  015A  0800               	movf	0,w
  3173  015B  00FF               	movwf	btemp+1
  3174  015C  087F               	movf	btemp+1,w
  3175  015D  0492               	iorwf	18,f	;volatile
  3176                           
  3177                           ;Timer.c: 84:         switch (Timer_cfg->Timer_Polling_Or_Interrupt)
  3178  015E  297F               	goto	l5343
  3179  015F                     l5333:
  3180                           
  3181                           ;Timer.c: 87:                 ret_error =special_int_enable(2);
  3182  015F  3002               	movlw	2
  3183  0160  120A  118A  2710  120A  118A  	fcall	_special_int_enable
  3184  0165  00FF               	movwf	btemp+1
  3185  0166  087F               	movf	btemp+1,w
  3186  0167  1283               	bcf	3,5	;RP0=0, select bank0
  3187  0168  1303               	bcf	3,6	;RP1=0, select bank0
  3188  0169  00D1               	movwf	Timer_Init@ret_error
  3189  016A                     l5335:
  3190                           
  3191                           ;Timer.c: 88:                 TIMER2OVF_INT = ( Timer_cfg -> Timer_Cbk_ptr);
  3192  016A  0852               	movf	Timer_Init@Timer_cfg,w
  3193  016B  3E04               	addlw	4
  3194  016C  0084               	movwf	4
  3195  016D  1383               	bcf	3,7	;select IRP bank0
  3196  016E  0800               	movf	0,w
  3197  016F  00FF               	movwf	btemp+1
  3198  0170  087F               	movf	btemp+1,w
  3199  0171  00BC               	movwf	_TIMER2OVF_INT
  3200                           
  3201                           ;Timer.c: 90:             break;
  3202  0172  29AD               	goto	l5351
  3203  0173                     l5337:
  3204                           
  3205                           ;Timer.c: 92:                 ret_error =special_int_disable(2);
  3206  0173  3002               	movlw	2
  3207  0174  120A  158A  2490  120A  118A  	fcall	_special_int_disable
  3208  0179  00FF               	movwf	btemp+1
  3209  017A  087F               	movf	btemp+1,w
  3210  017B  1283               	bcf	3,5	;RP0=0, select bank0
  3211  017C  1303               	bcf	3,6	;RP1=0, select bank0
  3212  017D  00D1               	movwf	Timer_Init@ret_error
  3213                           
  3214                           ;Timer.c: 93:             break;
  3215  017E  29AD               	goto	l5351
  3216  017F                     l5343:
  3217  017F  0852               	movf	Timer_Init@Timer_cfg,w
  3218  0180  3E02               	addlw	2
  3219  0181  0084               	movwf	4
  3220  0182  0800               	movf	0,w
  3221  0183  00CF               	movwf	??_Timer_Init
  3222  0184  01D0               	clrf	??_Timer_Init+1
  3223                           
  3224                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3225                           ; Switch size 1, requested type "simple"
  3226                           ; Number of cases is 1, Range of values is 0 to 0
  3227                           ; switch strategies available:
  3228                           ; Name         Instructions Cycles
  3229                           ; simple_byte            4     3 (average)
  3230                           ; direct_byte           11     8 (fixed)
  3231                           ; jumptable            260     6 (fixed)
  3232                           ;	Chosen strategy is simple_byte
  3233  0185  0850               	movf	??_Timer_Init+1,w
  3234  0186  3A00               	xorlw	0	; case 0
  3235  0187  1903               	skipnz
  3236  0188  298A               	goto	l6443
  3237  0189  28B1               	goto	l5291
  3238  018A                     l6443:
  3239                           
  3240                           ; Switch size 1, requested type "simple"
  3241                           ; Number of cases is 2, Range of values is 2 to 253
  3242                           ; switch strategies available:
  3243                           ; Name         Instructions Cycles
  3244                           ; simple_byte            7     4 (average)
  3245                           ; jumptable            263     9 (fixed)
  3246                           ;	Chosen strategy is simple_byte
  3247  018A  084F               	movf	??_Timer_Init,w
  3248  018B  3A02               	xorlw	2	; case 2
  3249  018C  1903               	skipnz
  3250  018D  295F               	goto	l5333
  3251  018E  3AFF               	xorlw	255	; case 253
  3252  018F  1903               	skipnz
  3253  0190  2973               	goto	l5337
  3254  0191  28B1               	goto	l5291
  3255  0192                     l5345:
  3256                           
  3257                           ;Timer.c: 100:   ret_error += 1 +26;
  3258  0192  301B               	movlw	27
  3259  0193  00FF               	movwf	btemp+1
  3260  0194  087F               	movf	btemp+1,w
  3261  0195  07D1               	addwf	Timer_Init@ret_error,f
  3262                           
  3263                           ;Timer.c: 101:   break;
  3264  0196  29AD               	goto	l5351
  3265  0197                     l5349:
  3266  0197  0852               	movf	Timer_Init@Timer_cfg,w
  3267  0198  0084               	movwf	4
  3268  0199  1383               	bcf	3,7	;select IRP bank0
  3269  019A  0800               	movf	0,w
  3270  019B  00CF               	movwf	??_Timer_Init
  3271  019C  01D0               	clrf	??_Timer_Init+1
  3272                           
  3273                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3274                           ; Switch size 1, requested type "simple"
  3275                           ; Number of cases is 1, Range of values is 0 to 0
  3276                           ; switch strategies available:
  3277                           ; Name         Instructions Cycles
  3278                           ; simple_byte            4     3 (average)
  3279                           ; direct_byte           11     8 (fixed)
  3280                           ; jumptable            260     6 (fixed)
  3281                           ;	Chosen strategy is simple_byte
  3282  019D  0850               	movf	??_Timer_Init+1,w
  3283  019E  3A00               	xorlw	0	; case 0
  3284  019F  1903               	skipnz
  3285  01A0  29A2               	goto	l6445
  3286  01A1  2992               	goto	l5345
  3287  01A2                     l6445:
  3288                           
  3289                           ; Switch size 1, requested type "simple"
  3290                           ; Number of cases is 3, Range of values is 0 to 2
  3291                           ; switch strategies available:
  3292                           ; Name         Instructions Cycles
  3293                           ; simple_byte           10     6 (average)
  3294                           ; direct_byte           17     8 (fixed)
  3295                           ; jumptable            260     6 (fixed)
  3296                           ;	Chosen strategy is simple_byte
  3297  01A2  084F               	movf	??_Timer_Init,w
  3298  01A3  3A00               	xorlw	0	; case 0
  3299  01A4  1903               	skipnz
  3300  01A5  288A               	goto	l5283
  3301  01A6  3A01               	xorlw	1	; case 1
  3302  01A7  1903               	skipnz
  3303  01A8  2945               	goto	l5329
  3304  01A9  3A03               	xorlw	3	; case 2
  3305  01AA  1903               	skipnz
  3306  01AB  2957               	goto	l5331
  3307  01AC  2992               	goto	l5345
  3308  01AD                     l5351:
  3309                           
  3310                           ;Timer.c: 104: return ret_error;
  3311  01AD  0851               	movf	Timer_Init@ret_error,w
  3312  01AE                     l549:
  3313  01AE  0008               	return
  3314  01AF                     __end_of_Timer_Init:
  3315                           
  3316                           	psect	text8
  3317  0789                     __ptext8:	
  3318 ;; *************** function _SOS_Create_Task *****************
  3319 ;; Defined at:
  3320 ;;		line 112 in file "SOS.c"
  3321 ;; Parameters:    Size  Location     Type
  3322 ;;  Function_Con    1    wreg     PTR FTN()void 
  3323 ;;		 -> Task3(1), Task2(1), Task1(1), 
  3324 ;;  u8_Preodicit    1    7[BANK0 ] unsigned char 
  3325 ;;  u8_function_    1    8[BANK0 ] unsigned char 
  3326 ;;  u16_Time_del    2    9[BANK0 ] unsigned int 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  Function_Con    1   11[BANK0 ] PTR FTN()void 
  3329 ;;		 -> Task3(1), Task2(1), Task1(1), 
  3330 ;;  ret             1   12[BANK0 ] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  1    wreg      unsigned char 
  3333 ;; Registers used:
  3334 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3340 ;;      Params:         0       4       0       0       0
  3341 ;;      Locals:         0       2       0       0       0
  3342 ;;      Temps:          0       0       0       0       0
  3343 ;;      Totals:         0       6       0       0       0
  3344 ;;Total ram usage:        6 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; Hardware stack levels required when called:    6
  3347 ;; This function calls:
  3348 ;;		___bmul
  3349 ;; This function is called by:
  3350 ;;		_system_init
  3351 ;; This function uses a non-reentrant model
  3352 ;;
  3353                           
  3354                           
  3355                           ;psect for function _SOS_Create_Task
  3356  0789                     _SOS_Create_Task:
  3357                           
  3358                           ;incstack = 0
  3359                           ; Regs used in _SOS_Create_Task: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3360                           ;SOS_Create_Task@Function_Consumer stored from wreg
  3361  0789  1283               	bcf	3,5	;RP0=0, select bank0
  3362  078A  1303               	bcf	3,6	;RP1=0, select bank0
  3363  078B  00D2               	movwf	SOS_Create_Task@Function_Consumer
  3364  078C                     l4249:
  3365                           
  3366                           ;SOS.c: 112: ERROR_STATUS SOS_Create_Task(ptr_to_Fun Function_Consumer,uint8_t u8_Preodi
      +                          city,;SOS.c: 113:                              uint8_t u8_function_index,uint16_t u16_Ti
      +                          me_delay);SOS.c: 114: {uint8_t ret=0;
  3367  078C  01D3               	clrf	SOS_Create_Task@ret
  3368  078D                     l4251:
  3369                           
  3370                           ;SOS.c: 115:   u8Excution_to_be_done++;
  3371  078D  3001               	movlw	1
  3372  078E  00FF               	movwf	btemp+1
  3373  078F  087F               	movf	btemp+1,w
  3374  0790  07B5               	addwf	_u8Excution_to_be_done,f	;volatile
  3375  0791                     l4253:
  3376                           
  3377                           ;SOS.c: 121:  if(u8_Is_Intialized == 1)
  3378  0791  0337               	decf	_u8_Is_Intialized,w
  3379  0792  1D03               	btfss	3,2
  3380  0793  2F95               	goto	u1671
  3381  0794  2F96               	goto	u1670
  3382  0795                     u1671:
  3383  0795  2FE0               	goto	l4257
  3384  0796                     u1670:
  3385  0796                     l4255:
  3386                           
  3387                           ;SOS.c: 122:  {;SOS.c: 124:   (Buffer_Array[u8_function_index]).Fuction_consumer=Functio
      +                          n_Consumer;
  3388  0796  3007               	movlw	7
  3389  0797  00FF               	movwf	btemp+1
  3390  0798  087F               	movf	btemp+1,w
  3391  0799  00CB               	movwf	___bmul@multiplicand
  3392  079A  084F               	movf	SOS_Create_Task@u8_function_index,w
  3393  079B  120A  158A  2201  120A  118A  	fcall	___bmul
  3394  07A0  3EA0               	addlw	(low (_Buffer_Array| 0))& (0+255)
  3395  07A1  0084               	movwf	4
  3396  07A2  1283               	bcf	3,5	;RP0=0, select bank0
  3397  07A3  1303               	bcf	3,6	;RP1=0, select bank0
  3398  07A4  0852               	movf	SOS_Create_Task@Function_Consumer,w
  3399  07A5  00FF               	movwf	btemp+1
  3400  07A6  087F               	movf	btemp+1,w
  3401  07A7  1383               	bcf	3,7	;select IRP bank1
  3402  07A8  0080               	movwf	0
  3403                           
  3404                           ;SOS.c: 125:   (Buffer_Array[u8_function_index]).preodic=u8_Preodicity;
  3405  07A9  3007               	movlw	7
  3406  07AA  00FF               	movwf	btemp+1
  3407  07AB  087F               	movf	btemp+1,w
  3408  07AC  00CB               	movwf	___bmul@multiplicand
  3409  07AD  084F               	movf	SOS_Create_Task@u8_function_index,w
  3410  07AE  120A  158A  2201  120A  118A  	fcall	___bmul
  3411  07B3  3EA4               	addlw	(low ((_Buffer_Array| 0+4)))& (0+255)
  3412  07B4  0084               	movwf	4
  3413  07B5  1283               	bcf	3,5	;RP0=0, select bank0
  3414  07B6  1303               	bcf	3,6	;RP1=0, select bank0
  3415  07B7  084E               	movf	SOS_Create_Task@u8_Preodicity,w
  3416  07B8  00FF               	movwf	btemp+1
  3417  07B9  087F               	movf	btemp+1,w
  3418  07BA  1383               	bcf	3,7	;select IRP bank1
  3419  07BB  0080               	movwf	0
  3420                           
  3421                           ;SOS.c: 126:   (Buffer_Array[u8_function_index]).u16_time_delay=u16_Time_delay;
  3422  07BC  3007               	movlw	7
  3423  07BD  00FF               	movwf	btemp+1
  3424  07BE  087F               	movf	btemp+1,w
  3425  07BF  00CB               	movwf	___bmul@multiplicand
  3426  07C0  084F               	movf	SOS_Create_Task@u8_function_index,w
  3427  07C1  120A  158A  2201  120A  118A  	fcall	___bmul
  3428  07C6  3EA2               	addlw	(low ((_Buffer_Array| 0+2)))& (0+255)
  3429  07C7  0084               	movwf	4
  3430  07C8  1283               	bcf	3,5	;RP0=0, select bank0
  3431  07C9  1303               	bcf	3,6	;RP1=0, select bank0
  3432  07CA  0850               	movf	SOS_Create_Task@u16_Time_delay,w
  3433  07CB  1383               	bcf	3,7	;select IRP bank1
  3434  07CC  0080               	movwf	0
  3435  07CD  0A84               	incf	4,f
  3436  07CE  0851               	movf	SOS_Create_Task@u16_Time_delay+1,w
  3437  07CF  0080               	movwf	0
  3438                           
  3439                           ;SOS.c: 127:   (Buffer_Array[u8_function_index]).u8_flag_is_stopped=1;
  3440  07D0  3007               	movlw	7
  3441  07D1  00FF               	movwf	btemp+1
  3442  07D2  087F               	movf	btemp+1,w
  3443  07D3  00CB               	movwf	___bmul@multiplicand
  3444  07D4  084F               	movf	SOS_Create_Task@u8_function_index,w
  3445  07D5  120A  158A  2201  120A  118A  	fcall	___bmul
  3446  07DA  3EA1               	addlw	(low ((_Buffer_Array| 0+1)))& (0+255)
  3447  07DB  0084               	movwf	4
  3448  07DC  1383               	bcf	3,7	;select IRP bank1
  3449  07DD  0180               	clrf	0
  3450  07DE  0A80               	incf	0,f
  3451                           
  3452                           ;SOS.c: 130:  }
  3453  07DF  2FEF               	goto	l4263
  3454  07E0                     l4257:
  3455  07E0  3002               	movlw	2
  3456  07E1  0237               	subwf	_u8_Is_Intialized,w
  3457  07E2  1C03               	skipc
  3458  07E3  2FE5               	goto	u1681
  3459  07E4  2FE6               	goto	u1680
  3460  07E5                     u1681:
  3461  07E5  2FEB               	goto	l4261
  3462  07E6                     u1680:
  3463  07E6                     l4259:
  3464  07E6  300A               	movlw	10
  3465  07E7  00FF               	movwf	btemp+1
  3466  07E8  087F               	movf	btemp+1,w
  3467  07E9  07D3               	addwf	SOS_Create_Task@ret,f
  3468  07EA  2FEF               	goto	l4263
  3469  07EB                     l4261:
  3470                           
  3471                           ;SOS.c: 132:   ret+=12;
  3472  07EB  300C               	movlw	12
  3473  07EC  00FF               	movwf	btemp+1
  3474  07ED  087F               	movf	btemp+1,w
  3475  07EE  07D3               	addwf	SOS_Create_Task@ret,f
  3476  07EF                     l4263:
  3477                           
  3478                           ;SOS.c: 135:  return ret;
  3479  07EF  1283               	bcf	3,5	;RP0=0, select bank0
  3480  07F0  1303               	bcf	3,6	;RP1=0, select bank0
  3481  07F1  0853               	movf	SOS_Create_Task@ret,w
  3482  07F2                     l472:
  3483  07F2  0008               	return
  3484  07F3                     __end_of_SOS_Create_Task:
  3485                           
  3486                           	psect	text9
  3487  0DC0                     __ptext9:	
  3488 ;; *************** function _I2C_Master_Init *****************
  3489 ;; Defined at:
  3490 ;;		line 8 in file "i2c_EEPROM.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  baud            4   18[BANK0 ] const unsigned long 
  3493 ;; Auto vars:     Size  Location     Type
  3494 ;;		None
  3495 ;; Return value:  Size  Location     Type
  3496 ;;                  1    wreg      void 
  3497 ;; Registers used:
  3498 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  3499 ;; Tracked objects:
  3500 ;;		On entry : 0/0
  3501 ;;		On exit  : 0/0
  3502 ;;		Unchanged: 0/0
  3503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3504 ;;      Params:         0       4       0       0       0
  3505 ;;      Locals:         0       0       0       0       0
  3506 ;;      Temps:          0       0       0       4       0
  3507 ;;      Totals:         0       4       0       4       0
  3508 ;;Total ram usage:        8 bytes
  3509 ;; Hardware stack levels used:    1
  3510 ;; Hardware stack levels required when called:    6
  3511 ;; This function calls:
  3512 ;;		___lldiv
  3513 ;; This function is called by:
  3514 ;;		_system_init
  3515 ;;		_nvm_Write
  3516 ;; This function uses a non-reentrant model
  3517 ;;
  3518                           
  3519                           
  3520                           ;psect for function _I2C_Master_Init
  3521  0DC0                     _I2C_Master_Init:
  3522  0DC0                     l5507:	
  3523                           ;incstack = 0
  3524                           ; Regs used in _I2C_Master_Init: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  3525                           
  3526                           
  3527                           ;i2c_EEPROM.c: 8: void I2C_Master_Init(const unsigned long baud);i2c_EEPROM.c: 9: {;i2c_
      +                          EEPROM.c: 10:   SSPCON = 0b00101000;
  3528  0DC0  3028               	movlw	40
  3529  0DC1  1283               	bcf	3,5	;RP0=0, select bank0
  3530  0DC2  1303               	bcf	3,6	;RP1=0, select bank0
  3531  0DC3  0094               	movwf	20	;volatile
  3532  0DC4                     l5509:
  3533                           
  3534                           ;i2c_EEPROM.c: 11:   SSPCON2 = 0;
  3535  0DC4  1683               	bsf	3,5	;RP0=1, select bank1
  3536  0DC5  1303               	bcf	3,6	;RP1=0, select bank1
  3537  0DC6  0191               	clrf	17	;volatile
  3538  0DC7                     l5511:
  3539                           
  3540                           ;i2c_EEPROM.c: 12:   SSPADD = (8000000/(4*baud))-1;
  3541  0DC7  1283               	bcf	3,5	;RP0=0, select bank0
  3542  0DC8  1303               	bcf	3,6	;RP1=0, select bank0
  3543  0DC9  0859               	movf	I2C_Master_Init@baud,w
  3544  0DCA  1683               	bsf	3,5	;RP0=1, select bank3
  3545  0DCB  1703               	bsf	3,6	;RP1=1, select bank3
  3546  0DCC  00AE               	movwf	??_I2C_Master_Init^(0+384)
  3547  0DCD  1283               	bcf	3,5	;RP0=0, select bank0
  3548  0DCE  1303               	bcf	3,6	;RP1=0, select bank0
  3549  0DCF  085A               	movf	I2C_Master_Init@baud+1,w
  3550  0DD0  1683               	bsf	3,5	;RP0=1, select bank3
  3551  0DD1  1703               	bsf	3,6	;RP1=1, select bank3
  3552  0DD2  00AF               	movwf	(??_I2C_Master_Init^(0+384)+1)
  3553  0DD3  1283               	bcf	3,5	;RP0=0, select bank0
  3554  0DD4  1303               	bcf	3,6	;RP1=0, select bank0
  3555  0DD5  085B               	movf	I2C_Master_Init@baud+2,w
  3556  0DD6  1683               	bsf	3,5	;RP0=1, select bank3
  3557  0DD7  1703               	bsf	3,6	;RP1=1, select bank3
  3558  0DD8  00B0               	movwf	(??_I2C_Master_Init^(0+384)+2)
  3559  0DD9  1283               	bcf	3,5	;RP0=0, select bank0
  3560  0DDA  1303               	bcf	3,6	;RP1=0, select bank0
  3561  0DDB  085C               	movf	I2C_Master_Init@baud+3,w
  3562  0DDC  1683               	bsf	3,5	;RP0=1, select bank3
  3563  0DDD  1703               	bsf	3,6	;RP1=1, select bank3
  3564  0DDE  00B1               	movwf	(??_I2C_Master_Init^(0+384)+3)
  3565  0DDF  3002               	movlw	2
  3566  0DE0                     u2005:
  3567  0DE0  1003               	clrc
  3568  0DE1  0DAE               	rlf	??_I2C_Master_Init^(0+384),f
  3569  0DE2  0DAF               	rlf	(??_I2C_Master_Init^(0+384)+1),f
  3570  0DE3  0DB0               	rlf	(??_I2C_Master_Init^(0+384)+2),f
  3571  0DE4  0DB1               	rlf	(??_I2C_Master_Init^(0+384)+3),f
  3572  0DE5                     u2000:
  3573  0DE5  3EFF               	addlw	-1
  3574  0DE6  1D03               	skipz
  3575  0DE7  2DE0               	goto	u2005
  3576  0DE8  0831               	movf	(??_I2C_Master_Init+3)^(0+384),w
  3577  0DE9  1283               	bcf	3,5	;RP0=0, select bank0
  3578  0DEA  1303               	bcf	3,6	;RP1=0, select bank0
  3579  0DEB  00CE               	movwf	___lldiv@divisor+3
  3580  0DEC  1683               	bsf	3,5	;RP0=1, select bank3
  3581  0DED  1703               	bsf	3,6	;RP1=1, select bank3
  3582  0DEE  0830               	movf	(??_I2C_Master_Init+2)^(0+384),w
  3583  0DEF  1283               	bcf	3,5	;RP0=0, select bank0
  3584  0DF0  1303               	bcf	3,6	;RP1=0, select bank0
  3585  0DF1  00CD               	movwf	___lldiv@divisor+2
  3586  0DF2  1683               	bsf	3,5	;RP0=1, select bank3
  3587  0DF3  1703               	bsf	3,6	;RP1=1, select bank3
  3588  0DF4  082F               	movf	(??_I2C_Master_Init+1)^(0+384),w
  3589  0DF5  1283               	bcf	3,5	;RP0=0, select bank0
  3590  0DF6  1303               	bcf	3,6	;RP1=0, select bank0
  3591  0DF7  00CC               	movwf	___lldiv@divisor+1
  3592  0DF8  1683               	bsf	3,5	;RP0=1, select bank3
  3593  0DF9  1703               	bsf	3,6	;RP1=1, select bank3
  3594  0DFA  082E               	movf	??_I2C_Master_Init^(0+384),w
  3595  0DFB  1283               	bcf	3,5	;RP0=0, select bank0
  3596  0DFC  1303               	bcf	3,6	;RP1=0, select bank0
  3597  0DFD  00CB               	movwf	___lldiv@divisor
  3598  0DFE  3000               	movlw	0
  3599  0DFF  00D2               	movwf	___lldiv@dividend+3
  3600  0E00  307A               	movlw	122
  3601  0E01  00D1               	movwf	___lldiv@dividend+2
  3602  0E02  3012               	movlw	18
  3603  0E03  00D0               	movwf	___lldiv@dividend+1
  3604  0E04  3000               	movlw	0
  3605  0E05  00CF               	movwf	___lldiv@dividend
  3606  0E06  120A  158A  272F  120A  158A  	fcall	___lldiv
  3607  0E0B  1283               	bcf	3,5	;RP0=0, select bank0
  3608  0E0C  1303               	bcf	3,6	;RP1=0, select bank0
  3609  0E0D  084B               	movf	?___lldiv,w
  3610  0E0E  3EFF               	addlw	255
  3611  0E0F  1683               	bsf	3,5	;RP0=1, select bank1
  3612  0E10  1303               	bcf	3,6	;RP1=0, select bank1
  3613  0E11  0093               	movwf	19	;volatile
  3614  0E12                     l5513:
  3615                           
  3616                           ;i2c_EEPROM.c: 13:   SSPSTAT = 0;
  3617  0E12  0194               	clrf	20	;volatile
  3618  0E13                     l5515:
  3619                           
  3620                           ;i2c_EEPROM.c: 14:   TRISC |= 3 ;
  3621  0E13  3003               	movlw	3
  3622  0E14  00FF               	movwf	btemp+1
  3623  0E15  087F               	movf	btemp+1,w
  3624  0E16  0487               	iorwf	7,f	;volatile
  3625  0E17                     l5517:
  3626                           
  3627                           ;i2c_EEPROM.c: 15:   TRISC |= 4 ;
  3628  0E17  1507               	bsf	7,2	;volatile
  3629  0E18                     l241:
  3630  0E18  0008               	return
  3631  0E19                     __end_of_I2C_Master_Init:
  3632                           
  3633                           	psect	text10
  3634  0F2F                     __ptext10:	
  3635 ;; *************** function ___lldiv *****************
  3636 ;; Defined at:
  3637 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\__lldiv.c"
  3638 ;; Parameters:    Size  Location     Type
  3639 ;;  divisor         4    4[BANK0 ] unsigned long 
  3640 ;;  dividend        4    8[BANK0 ] unsigned long 
  3641 ;; Auto vars:     Size  Location     Type
  3642 ;;  quotient        4   13[BANK0 ] unsigned long 
  3643 ;;  counter         1   17[BANK0 ] unsigned char 
  3644 ;; Return value:  Size  Location     Type
  3645 ;;                  4    4[BANK0 ] unsigned long 
  3646 ;; Registers used:
  3647 ;;		wreg, status,2, status,0, btemp+1
  3648 ;; Tracked objects:
  3649 ;;		On entry : 0/0
  3650 ;;		On exit  : 0/0
  3651 ;;		Unchanged: 0/0
  3652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3653 ;;      Params:         0       8       0       0       0
  3654 ;;      Locals:         0       5       0       0       0
  3655 ;;      Temps:          0       1       0       0       0
  3656 ;;      Totals:         0      14       0       0       0
  3657 ;;Total ram usage:       14 bytes
  3658 ;; Hardware stack levels used:    1
  3659 ;; Hardware stack levels required when called:    5
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_I2C_Master_Init
  3664 ;; This function uses a non-reentrant model
  3665 ;;
  3666                           
  3667                           
  3668                           ;psect for function ___lldiv
  3669  0F2F                     ___lldiv:
  3670  0F2F                     l4073:	
  3671                           ;incstack = 0
  3672                           ; Regs used in ___lldiv: [wreg+status,2+status,0+btemp+1]
  3673                           
  3674  0F2F  3000               	movlw	0
  3675  0F30  1283               	bcf	3,5	;RP0=0, select bank0
  3676  0F31  1303               	bcf	3,6	;RP1=0, select bank0
  3677  0F32  00D7               	movwf	___lldiv@quotient+3
  3678  0F33  3000               	movlw	0
  3679  0F34  00D6               	movwf	___lldiv@quotient+2
  3680  0F35  3000               	movlw	0
  3681  0F36  00D5               	movwf	___lldiv@quotient+1
  3682  0F37  3000               	movlw	0
  3683  0F38  00D4               	movwf	___lldiv@quotient
  3684  0F39  084E               	movf	___lldiv@divisor+3,w
  3685  0F3A  044D               	iorwf	___lldiv@divisor+2,w
  3686  0F3B  044C               	iorwf	___lldiv@divisor+1,w
  3687  0F3C  044B               	iorwf	___lldiv@divisor,w
  3688  0F3D  1903               	skipnz
  3689  0F3E  2F40               	goto	u1551
  3690  0F3F  2F41               	goto	u1550
  3691  0F40                     u1551:
  3692  0F40  2F8E               	goto	l4095
  3693  0F41                     u1550:
  3694  0F41                     l4075:
  3695  0F41  01D8               	clrf	___lldiv@counter
  3696  0F42  0AD8               	incf	___lldiv@counter,f
  3697  0F43  2F51               	goto	l4081
  3698  0F44                     l4077:
  3699  0F44  3001               	movlw	1
  3700  0F45  00D3               	movwf	??___lldiv
  3701  0F46                     u1565:
  3702  0F46  1003               	clrc
  3703  0F47  0DCB               	rlf	___lldiv@divisor,f
  3704  0F48  0DCC               	rlf	___lldiv@divisor+1,f
  3705  0F49  0DCD               	rlf	___lldiv@divisor+2,f
  3706  0F4A  0DCE               	rlf	___lldiv@divisor+3,f
  3707  0F4B  0BD3               	decfsz	??___lldiv,f
  3708  0F4C  2F46               	goto	u1565
  3709  0F4D                     l4079:
  3710  0F4D  3001               	movlw	1
  3711  0F4E  00FF               	movwf	btemp+1
  3712  0F4F  087F               	movf	btemp+1,w
  3713  0F50  07D8               	addwf	___lldiv@counter,f
  3714  0F51                     l4081:
  3715  0F51  1FCE               	btfss	___lldiv@divisor+3,7
  3716  0F52  2F54               	goto	u1571
  3717  0F53  2F55               	goto	u1570
  3718  0F54                     u1571:
  3719  0F54  2F44               	goto	l4077
  3720  0F55                     u1570:
  3721  0F55                     l4083:
  3722  0F55  3001               	movlw	1
  3723  0F56  00D3               	movwf	??___lldiv
  3724  0F57                     u1585:
  3725  0F57  1003               	clrc
  3726  0F58  0DD4               	rlf	___lldiv@quotient,f
  3727  0F59  0DD5               	rlf	___lldiv@quotient+1,f
  3728  0F5A  0DD6               	rlf	___lldiv@quotient+2,f
  3729  0F5B  0DD7               	rlf	___lldiv@quotient+3,f
  3730  0F5C  0BD3               	decfsz	??___lldiv,f
  3731  0F5D  2F57               	goto	u1585
  3732  0F5E                     l4085:
  3733  0F5E  084E               	movf	___lldiv@divisor+3,w
  3734  0F5F  0252               	subwf	___lldiv@dividend+3,w
  3735  0F60  1D03               	skipz
  3736  0F61  2F6C               	goto	u1595
  3737  0F62  084D               	movf	___lldiv@divisor+2,w
  3738  0F63  0251               	subwf	___lldiv@dividend+2,w
  3739  0F64  1D03               	skipz
  3740  0F65  2F6C               	goto	u1595
  3741  0F66  084C               	movf	___lldiv@divisor+1,w
  3742  0F67  0250               	subwf	___lldiv@dividend+1,w
  3743  0F68  1D03               	skipz
  3744  0F69  2F6C               	goto	u1595
  3745  0F6A  084B               	movf	___lldiv@divisor,w
  3746  0F6B  024F               	subwf	___lldiv@dividend,w
  3747  0F6C                     u1595:
  3748  0F6C  1C03               	skipc
  3749  0F6D  2F6F               	goto	u1591
  3750  0F6E  2F70               	goto	u1590
  3751  0F6F                     u1591:
  3752  0F6F  2F7F               	goto	l4091
  3753  0F70                     u1590:
  3754  0F70                     l4087:
  3755  0F70  084B               	movf	___lldiv@divisor,w
  3756  0F71  02CF               	subwf	___lldiv@dividend,f
  3757  0F72  084C               	movf	___lldiv@divisor+1,w
  3758  0F73  1C03               	skipc
  3759  0F74  0F4C               	incfsz	___lldiv@divisor+1,w
  3760  0F75  02D0               	subwf	___lldiv@dividend+1,f
  3761  0F76  084D               	movf	___lldiv@divisor+2,w
  3762  0F77  1C03               	skipc
  3763  0F78  0F4D               	incfsz	___lldiv@divisor+2,w
  3764  0F79  02D1               	subwf	___lldiv@dividend+2,f
  3765  0F7A  084E               	movf	___lldiv@divisor+3,w
  3766  0F7B  1C03               	skipc
  3767  0F7C  0F4E               	incfsz	___lldiv@divisor+3,w
  3768  0F7D  02D2               	subwf	___lldiv@dividend+3,f
  3769  0F7E                     l4089:
  3770  0F7E  1454               	bsf	___lldiv@quotient,0
  3771  0F7F                     l4091:
  3772  0F7F  3001               	movlw	1
  3773  0F80                     u1605:
  3774  0F80  1003               	clrc
  3775  0F81  0CCE               	rrf	___lldiv@divisor+3,f
  3776  0F82  0CCD               	rrf	___lldiv@divisor+2,f
  3777  0F83  0CCC               	rrf	___lldiv@divisor+1,f
  3778  0F84  0CCB               	rrf	___lldiv@divisor,f
  3779  0F85  3EFF               	addlw	-1
  3780  0F86  1D03               	skipz
  3781  0F87  2F80               	goto	u1605
  3782  0F88                     l4093:
  3783  0F88  3001               	movlw	1
  3784  0F89  02D8               	subwf	___lldiv@counter,f
  3785  0F8A  1D03               	btfss	3,2
  3786  0F8B  2F8D               	goto	u1611
  3787  0F8C  2F8E               	goto	u1610
  3788  0F8D                     u1611:
  3789  0F8D  2F55               	goto	l4083
  3790  0F8E                     u1610:
  3791  0F8E                     l4095:
  3792  0F8E  0857               	movf	___lldiv@quotient+3,w
  3793  0F8F  00CE               	movwf	?___lldiv+3
  3794  0F90  0856               	movf	___lldiv@quotient+2,w
  3795  0F91  00CD               	movwf	?___lldiv+2
  3796  0F92  0855               	movf	___lldiv@quotient+1,w
  3797  0F93  00CC               	movwf	?___lldiv+1
  3798  0F94  0854               	movf	___lldiv@quotient,w
  3799  0F95  00CB               	movwf	?___lldiv
  3800  0F96                     l857:
  3801  0F96  0008               	return
  3802  0F97                     __end_of___lldiv:
  3803                           
  3804                           	psect	text11
  3805  0609                     __ptext11:	
  3806 ;; *************** function _ADC_INIT *****************
  3807 ;; Defined at:
  3808 ;;		line 4 in file "ADC.c"
  3809 ;; Parameters:    Size  Location     Type
  3810 ;;  ADC_info        1    wreg     PTR struct ADC_Cfg_s
  3811 ;;		 -> ADC_Cnfiguration(5), 
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;  ADC_info        1   11[BANK0 ] PTR struct ADC_Cfg_s
  3814 ;;		 -> ADC_Cnfiguration(5), 
  3815 ;;  ret_error       1   10[BANK0 ] unsigned char 
  3816 ;; Return value:  Size  Location     Type
  3817 ;;                  1    wreg      unsigned char 
  3818 ;; Registers used:
  3819 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3820 ;; Tracked objects:
  3821 ;;		On entry : 0/0
  3822 ;;		On exit  : 0/0
  3823 ;;		Unchanged: 0/0
  3824 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3825 ;;      Params:         0       0       0       0       0
  3826 ;;      Locals:         0       2       0       0       0
  3827 ;;      Temps:          0       2       0       0       0
  3828 ;;      Totals:         0       4       0       0       0
  3829 ;;Total ram usage:        4 bytes
  3830 ;; Hardware stack levels used:    1
  3831 ;; Hardware stack levels required when called:    7
  3832 ;; This function calls:
  3833 ;;		_special_int_disable
  3834 ;;		_special_int_enable
  3835 ;; This function is called by:
  3836 ;;		_system_init
  3837 ;;		_Temp_sensor_init
  3838 ;; This function uses a non-reentrant model
  3839 ;;
  3840                           
  3841                           
  3842                           ;psect for function _ADC_INIT
  3843  0609                     _ADC_INIT:
  3844                           
  3845                           ;incstack = 0
  3846 ;; hardware stack exceeded
  3847                           ; Regs used in _ADC_INIT: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3848                           ;ADC_INIT@ADC_info stored from wreg
  3849  0609  1283               	bcf	3,5	;RP0=0, select bank0
  3850  060A  1303               	bcf	3,6	;RP1=0, select bank0
  3851  060B  00D2               	movwf	ADC_INIT@ADC_info
  3852  060C                     l4117:
  3853                           
  3854                           ;ADC.c: 4: ERROR_STATUS ADC_INIT(ADC_Cfg_s *ADC_info);ADC.c: 5: {;ADC.c: 6:     uint8_t 
      +                          ret_error=0;
  3855  060C  01D1               	clrf	ADC_INIT@ret_error
  3856  060D                     l4119:
  3857                           
  3858                           ;ADC.c: 8:     if((ADC_info -> u8_Prescaler ) <= 3)
  3859  060D  0A52               	incf	ADC_INIT@ADC_info,w
  3860  060E  0084               	movwf	4
  3861  060F  3004               	movlw	4
  3862  0610  1383               	bcf	3,7	;select IRP bank0
  3863  0611  0200               	subwf	0,w
  3864  0612  1803               	skipnc
  3865  0613  2E15               	goto	u1621
  3866  0614  2E16               	goto	u1620
  3867  0615                     u1621:
  3868  0615  2E35               	goto	l4127
  3869  0616                     u1620:
  3870  0616                     l4121:
  3871                           
  3872                           ;ADC.c: 9:     {;ADC.c: 10:         *((reg_type8_t)(0x001F)) |= (ADC_info -> u8_Channel_
      +                          Number)|(ADC_info -> clock_configuration )|0x01;
  3873  0616  0852               	movf	ADC_INIT@ADC_info,w
  3874  0617  3E02               	addlw	2
  3875  0618  0084               	movwf	4
  3876  0619  0800               	movf	0,w
  3877  061A  00CF               	movwf	??_ADC_INIT
  3878  061B  0852               	movf	ADC_INIT@ADC_info,w
  3879  061C  0084               	movwf	4
  3880  061D  0800               	movf	0,w
  3881  061E  044F               	iorwf	??_ADC_INIT,w
  3882  061F  3801               	iorlw	1
  3883  0620  00FF               	movwf	btemp+1
  3884  0621  087F               	movf	btemp+1,w
  3885  0622  049F               	iorwf	31,f	;volatile
  3886  0623                     l4123:
  3887                           
  3888                           ;ADC.c: 11:         *((reg_type8_t)(0x009F)) &= (~0x40);
  3889  0623  30BF               	movlw	191
  3890  0624  00FF               	movwf	btemp+1
  3891  0625  087F               	movf	btemp+1,w
  3892  0626  1683               	bsf	3,5	;RP0=1, select bank1
  3893  0627  1303               	bcf	3,6	;RP1=0, select bank1
  3894  0628  059F               	andwf	31,f	;volatile
  3895  0629                     l4125:
  3896                           
  3897                           ;ADC.c: 12:         *((reg_type8_t)(0x009F)) |=(ADC_info -> u8_ten_bit_arrangment);
  3898  0629  1283               	bcf	3,5	;RP0=0, select bank0
  3899  062A  1303               	bcf	3,6	;RP1=0, select bank0
  3900  062B  0852               	movf	ADC_INIT@ADC_info,w
  3901  062C  3E03               	addlw	3
  3902  062D  0084               	movwf	4
  3903  062E  0800               	movf	0,w
  3904  062F  00FF               	movwf	btemp+1
  3905  0630  087F               	movf	btemp+1,w
  3906  0631  1683               	bsf	3,5	;RP0=1, select bank1
  3907  0632  1303               	bcf	3,6	;RP1=0, select bank1
  3908  0633  049F               	iorwf	31,f	;volatile
  3909                           
  3910                           ;ADC.c: 13:     }else if(((ADC_info -> u8_Prescaler ) > 3 )
  3911  0634  2E79               	goto	l4143
  3912  0635                     l4127:
  3913  0635  0A52               	incf	ADC_INIT@ADC_info,w
  3914  0636  0084               	movwf	4
  3915  0637  3004               	movlw	4
  3916  0638  0200               	subwf	0,w
  3917  0639  1C03               	skipc
  3918  063A  2E3C               	goto	u1631
  3919  063B  2E3D               	goto	u1630
  3920  063C                     u1631:
  3921  063C  2E5D               	goto	l4133
  3922  063D                     u1630:
  3923  063D                     l4129:
  3924  063D  0A52               	incf	ADC_INIT@ADC_info,w
  3925  063E  0084               	movwf	4
  3926  063F  3008               	movlw	8
  3927  0640  0200               	subwf	0,w
  3928  0641  1803               	skipnc
  3929  0642  2E44               	goto	u1641
  3930  0643  2E45               	goto	u1640
  3931  0644                     u1641:
  3932  0644  2E5D               	goto	l4133
  3933  0645                     u1640:
  3934  0645                     l4131:
  3935                           
  3936                           ;ADC.c: 15:   {;ADC.c: 16:          *((reg_type8_t)(0x001F)) |= (ADC_info -> u8_Channel_
      +                          Number)|(ADC_info -> clock_configuration )|0x01;
  3937  0645  0852               	movf	ADC_INIT@ADC_info,w
  3938  0646  3E02               	addlw	2
  3939  0647  0084               	movwf	4
  3940  0648  0800               	movf	0,w
  3941  0649  00CF               	movwf	??_ADC_INIT
  3942  064A  0852               	movf	ADC_INIT@ADC_info,w
  3943  064B  0084               	movwf	4
  3944  064C  0800               	movf	0,w
  3945  064D  044F               	iorwf	??_ADC_INIT,w
  3946  064E  3801               	iorlw	1
  3947  064F  00FF               	movwf	btemp+1
  3948  0650  087F               	movf	btemp+1,w
  3949  0651  049F               	iorwf	31,f	;volatile
  3950                           
  3951                           ;ADC.c: 17:       *((reg_type8_t)(0x009F)) |= 0x40 | (ADC_info -> u8_ten_bit_arrangment)
      +                          ;
  3952  0652  0852               	movf	ADC_INIT@ADC_info,w
  3953  0653  3E03               	addlw	3
  3954  0654  0084               	movwf	4
  3955  0655  0800               	movf	0,w
  3956  0656  3840               	iorlw	64
  3957  0657  00FF               	movwf	btemp+1
  3958  0658  087F               	movf	btemp+1,w
  3959  0659  1683               	bsf	3,5	;RP0=1, select bank1
  3960  065A  1303               	bcf	3,6	;RP1=0, select bank1
  3961  065B  049F               	iorwf	31,f	;volatile
  3962                           
  3963                           ;ADC.c: 19:          }else{ret_error += 1 + 30;}
  3964  065C  2E79               	goto	l4143
  3965  065D                     l4133:
  3966  065D  301F               	movlw	31
  3967  065E  00FF               	movwf	btemp+1
  3968  065F  087F               	movf	btemp+1,w
  3969  0660  07D1               	addwf	ADC_INIT@ret_error,f
  3970  0661  2E79               	goto	l4143
  3971  0662                     l4135:
  3972                           
  3973                           ;ADC.c: 24:         ret_error=special_int_enable(0x40);
  3974  0662  3040               	movlw	64
  3975  0663  120A  118A  2710  120A  118A  	fcall	_special_int_enable
  3976  0668  00FF               	movwf	btemp+1
  3977  0669  087F               	movf	btemp+1,w
  3978  066A  1283               	bcf	3,5	;RP0=0, select bank0
  3979  066B  1303               	bcf	3,6	;RP1=0, select bank0
  3980  066C  00D1               	movwf	ADC_INIT@ret_error
  3981  066D                     l4137:
  3982                           
  3983                           ;ADC.c: 25:       ADC_INT = adc_interrupt_routine;
  3984  066D  3001               	movlw	(low (fp__adc_interrupt_routine-i1fpbase))& (0+255)
  3985  066E  00FF               	movwf	btemp+1
  3986  066F  087F               	movf	btemp+1,w
  3987  0670  00C3               	movwf	_ADC_INT
  3988                           
  3989                           ;ADC.c: 26:         break;
  3990  0671  2E8D               	goto	l4145
  3991  0672                     l4139:
  3992                           
  3993                           ;ADC.c: 28:         special_int_disable(0x40);
  3994  0672  3040               	movlw	64
  3995  0673  120A  158A  2490  120A  118A  	fcall	_special_int_disable
  3996                           
  3997                           ;ADC.c: 30:     break;
  3998  0678  2E8D               	goto	l4145
  3999  0679                     l4143:
  4000  0679  1283               	bcf	3,5	;RP0=0, select bank0
  4001  067A  0852               	movf	ADC_INIT@ADC_info,w
  4002  067B  3E04               	addlw	4
  4003  067C  0084               	movwf	4
  4004  067D  0800               	movf	0,w
  4005  067E  00CF               	movwf	??_ADC_INIT
  4006  067F  01D0               	clrf	??_ADC_INIT+1
  4007                           
  4008                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4009                           ; Switch size 1, requested type "simple"
  4010                           ; Number of cases is 1, Range of values is 0 to 0
  4011                           ; switch strategies available:
  4012                           ; Name         Instructions Cycles
  4013                           ; simple_byte            4     3 (average)
  4014                           ; direct_byte           11     8 (fixed)
  4015                           ; jumptable            260     6 (fixed)
  4016                           ;	Chosen strategy is simple_byte
  4017  0680  0850               	movf	??_ADC_INIT+1,w
  4018  0681  3A00               	xorlw	0	; case 0
  4019  0682  1903               	skipnz
  4020  0683  2E85               	goto	l6447
  4021  0684  2E8D               	goto	l4145
  4022  0685                     l6447:
  4023                           
  4024                           ; Switch size 1, requested type "simple"
  4025                           ; Number of cases is 2, Range of values is 64 to 191
  4026                           ; switch strategies available:
  4027                           ; Name         Instructions Cycles
  4028                           ; simple_byte            7     4 (average)
  4029                           ; jumptable            263     9 (fixed)
  4030                           ;	Chosen strategy is simple_byte
  4031  0685  084F               	movf	??_ADC_INIT,w
  4032  0686  3A40               	xorlw	64	; case 64
  4033  0687  1903               	skipnz
  4034  0688  2E62               	goto	l4135
  4035  0689  3AFF               	xorlw	255	; case 191
  4036  068A  1903               	skipnz
  4037  068B  2E72               	goto	l4139
  4038  068C  2E8D               	goto	l4145
  4039  068D                     l4145:
  4040                           
  4041                           ;ADC.c: 35:     return ret_error;
  4042  068D  1283               	bcf	3,5	;RP0=0, select bank0
  4043  068E  1303               	bcf	3,6	;RP1=0, select bank0
  4044  068F  0851               	movf	ADC_INIT@ret_error,w
  4045  0690                     l25:
  4046  0690  0008               	return
  4047  0691                     __end_of_ADC_INIT:
  4048                           
  4049                           	psect	text12
  4050  0710                     __ptext12:	
  4051 ;; *************** function _special_int_enable *****************
  4052 ;; Defined at:
  4053 ;;		line 35 in file "interrupts.c"
  4054 ;; Parameters:    Size  Location     Type
  4055 ;;  u8_interrupt    1    wreg     unsigned char 
  4056 ;; Auto vars:     Size  Location     Type
  4057 ;;  u8_interrupt    1    6[BANK0 ] unsigned char 
  4058 ;;  ret_error       1    7[BANK0 ] unsigned char 
  4059 ;; Return value:  Size  Location     Type
  4060 ;;                  1    wreg      unsigned char 
  4061 ;; Registers used:
  4062 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4063 ;; Tracked objects:
  4064 ;;		On entry : 0/0
  4065 ;;		On exit  : 0/0
  4066 ;;		Unchanged: 0/0
  4067 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4068 ;;      Params:         0       0       0       0       0
  4069 ;;      Locals:         0       2       0       0       0
  4070 ;;      Temps:          0       2       0       0       0
  4071 ;;      Totals:         0       4       0       0       0
  4072 ;;Total ram usage:        4 bytes
  4073 ;; Hardware stack levels used:    1
  4074 ;; Hardware stack levels required when called:    6
  4075 ;; This function calls:
  4076 ;;		_global_int_enable
  4077 ;; This function is called by:
  4078 ;;		_ADC_INIT
  4079 ;;		_Timer_Init
  4080 ;; This function uses a non-reentrant model
  4081 ;;
  4082                           
  4083                           
  4084                           ;psect for function _special_int_enable
  4085  0710                     _special_int_enable:
  4086                           
  4087                           ;incstack = 0
  4088 ;; hardware stack exceeded
  4089                           ; Regs used in _special_int_enable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4090                           ;special_int_enable@u8_interrupt_prepherals stored from wreg
  4091  0710  1283               	bcf	3,5	;RP0=0, select bank0
  4092  0711  1303               	bcf	3,6	;RP1=0, select bank0
  4093  0712  00CD               	movwf	special_int_enable@u8_interrupt_prepherals
  4094  0713                     l3269:
  4095                           
  4096                           ;interrupts.c: 35: ERROR_STATUS special_int_enable(uint8_t u8_interrupt_prepherals);inte
      +                          rrupts.c: 36: {;interrupts.c: 37:     uint8_t ret_error = 0;
  4097  0713  01CE               	clrf	special_int_enable@ret_error
  4098                           
  4099                           ;interrupts.c: 38: switch (u8_interrupt_prepherals) {
  4100  0714  2F6D               	goto	l3305
  4101  0715                     l3271:
  4102                           
  4103                           ;interrupts.c: 40:  *((reg_type8_t)(0x000B)) |=0xA0;
  4104  0715  30A0               	movlw	160
  4105  0716  00FF               	movwf	btemp+1
  4106  0717  087F               	movf	btemp+1,w
  4107  0718  048B               	iorwf	11,f	;volatile
  4108  0719                     l3273:
  4109                           
  4110                           ;interrupts.c: 41:         if(u8global_int_enabled == 0)
  4111  0719  0840               	movf	_u8global_int_enabled,w
  4112  071A  1D03               	btfss	3,2
  4113  071B  2F1D               	goto	u1031
  4114  071C  2F1E               	goto	u1030
  4115  071D                     u1031:
  4116  071D  2F1F               	goto	l133
  4117  071E                     u1030:
  4118  071E                     l3275:
  4119                           
  4120                           ;interrupts.c: 42:         *((reg_type8_t)(0x000B)) |=0x80;
  4121  071E  178B               	bsf	11,7	;volatile
  4122  071F                     l133:
  4123                           
  4124                           ;interrupts.c: 43:         u8global_int_enabled=1;
  4125  071F  01C0               	clrf	_u8global_int_enabled
  4126  0720  0AC0               	incf	_u8global_int_enabled,f
  4127                           
  4128                           ;interrupts.c: 44:  break;
  4129  0721  2F86               	goto	l3307
  4130  0722                     l3277:
  4131                           
  4132                           ;interrupts.c: 46:    global_int_enable();
  4133  0722  120A  158A  2133  120A  118A  	fcall	_global_int_enable
  4134  0727                     l3279:
  4135                           
  4136                           ;interrupts.c: 47:               *((reg_type8_t)(0x008C)) |= 0x01;
  4137  0727  1683               	bsf	3,5	;RP0=1, select bank1
  4138  0728  1303               	bcf	3,6	;RP1=0, select bank1
  4139  0729  140C               	bsf	12,0	;volatile
  4140  072A                     l3281:
  4141                           
  4142                           ;interrupts.c: 48:         if(u8prepheral_int_enabled == 0)
  4143  072A  1283               	bcf	3,5	;RP0=0, select bank0
  4144  072B  1303               	bcf	3,6	;RP1=0, select bank0
  4145  072C  083F               	movf	_u8prepheral_int_enabled,w
  4146  072D  1D03               	btfss	3,2
  4147  072E  2F30               	goto	u1041
  4148  072F  2F31               	goto	u1040
  4149  0730                     u1041:
  4150  0730  2F32               	goto	l136
  4151  0731                     u1040:
  4152  0731                     l3283:
  4153                           
  4154                           ;interrupts.c: 49:         *((reg_type8_t)(0x000B)) |= 0x40;
  4155  0731  170B               	bsf	11,6	;volatile
  4156  0732                     l136:
  4157                           
  4158                           ;interrupts.c: 50:             u8prepheral_int_enabled=1;
  4159  0732  01BF               	clrf	_u8prepheral_int_enabled
  4160  0733  0ABF               	incf	_u8prepheral_int_enabled,f
  4161                           
  4162                           ;interrupts.c: 54:  break;
  4163  0734  2F86               	goto	l3307
  4164  0735                     l3285:
  4165                           
  4166                           ;interrupts.c: 56:   global_int_enable();
  4167  0735  120A  158A  2133  120A  118A  	fcall	_global_int_enable
  4168  073A                     l3287:
  4169                           
  4170                           ;interrupts.c: 58:          if(u8prepheral_int_enabled == 0)
  4171  073A  1283               	bcf	3,5	;RP0=0, select bank0
  4172  073B  1303               	bcf	3,6	;RP1=0, select bank0
  4173  073C  083F               	movf	_u8prepheral_int_enabled,w
  4174  073D  1D03               	btfss	3,2
  4175  073E  2F40               	goto	u1051
  4176  073F  2F41               	goto	u1050
  4177  0740                     u1051:
  4178  0740  2F42               	goto	l138
  4179  0741                     u1050:
  4180  0741                     l3289:
  4181                           
  4182                           ;interrupts.c: 59:         *((reg_type8_t)(0x000B)) |= 0x40;
  4183  0741  170B               	bsf	11,6	;volatile
  4184  0742                     l138:
  4185                           
  4186                           ;interrupts.c: 60:          u8prepheral_int_enabled=1;
  4187  0742  01BF               	clrf	_u8prepheral_int_enabled
  4188  0743  0ABF               	incf	_u8prepheral_int_enabled,f
  4189                           
  4190                           ;interrupts.c: 62:       *((reg_type8_t)(0x008C)) |= 0x02;
  4191  0744  1683               	bsf	3,5	;RP0=1, select bank1
  4192  0745  1303               	bcf	3,6	;RP1=0, select bank1
  4193  0746  148C               	bsf	12,1	;volatile
  4194                           
  4195                           ;interrupts.c: 64:  break;
  4196  0747  2F86               	goto	l3307
  4197  0748                     l3291:
  4198                           
  4199                           ;interrupts.c: 66:      global_int_enable();
  4200  0748  120A  158A  2133  120A  118A  	fcall	_global_int_enable
  4201  074D                     l3293:
  4202                           
  4203                           ;interrupts.c: 68:                  if(u8prepheral_int_enabled == 0)
  4204  074D  1283               	bcf	3,5	;RP0=0, select bank0
  4205  074E  1303               	bcf	3,6	;RP1=0, select bank0
  4206  074F  083F               	movf	_u8prepheral_int_enabled,w
  4207  0750  1D03               	btfss	3,2
  4208  0751  2F53               	goto	u1061
  4209  0752  2F54               	goto	u1060
  4210  0753                     u1061:
  4211  0753  2F32               	goto	l136
  4212  0754                     u1060:
  4213  0754  2F31               	goto	l3283
  4214  0755                     l3297:
  4215                           
  4216                           ;interrupts.c: 74:   global_int_enable();
  4217  0755  120A  158A  2133  120A  118A  	fcall	_global_int_enable
  4218  075A                     l3299:
  4219                           
  4220                           ;interrupts.c: 77:       if(u8prepheral_int_enabled == 0)
  4221  075A  1283               	bcf	3,5	;RP0=0, select bank0
  4222  075B  1303               	bcf	3,6	;RP1=0, select bank0
  4223  075C  083F               	movf	_u8prepheral_int_enabled,w
  4224  075D  1D03               	btfss	3,2
  4225  075E  2F60               	goto	u1071
  4226  075F  2F61               	goto	u1070
  4227  0760                     u1071:
  4228  0760  2F62               	goto	l142
  4229  0761                     u1070:
  4230  0761                     l3301:
  4231                           
  4232                           ;interrupts.c: 78:      *((reg_type8_t)(0x000B)) |= 0x40;
  4233  0761  170B               	bsf	11,6	;volatile
  4234  0762                     l142:
  4235                           
  4236                           ;interrupts.c: 79:       u8prepheral_int_enabled=1;
  4237  0762  01BF               	clrf	_u8prepheral_int_enabled
  4238  0763  0ABF               	incf	_u8prepheral_int_enabled,f
  4239                           
  4240                           ;interrupts.c: 81:       *((reg_type8_t)(0x008C)) |= 0x40;
  4241  0764  1683               	bsf	3,5	;RP0=1, select bank1
  4242  0765  1303               	bcf	3,6	;RP1=0, select bank1
  4243  0766  170C               	bsf	12,6	;volatile
  4244                           
  4245                           ;interrupts.c: 82:   break;
  4246  0767  2F86               	goto	l3307
  4247  0768                     l3303:
  4248                           
  4249                           ;interrupts.c: 84:     ret_error += 1 + 28;
  4250  0768  301D               	movlw	29
  4251  0769  00FF               	movwf	btemp+1
  4252  076A  087F               	movf	btemp+1,w
  4253  076B  07CE               	addwf	special_int_enable@ret_error,f
  4254                           
  4255                           ;interrupts.c: 86: }
  4256  076C  2F86               	goto	l3307
  4257  076D                     l3305:
  4258  076D  084D               	movf	special_int_enable@u8_interrupt_prepherals,w
  4259  076E  00CB               	movwf	??_special_int_enable
  4260  076F  01CC               	clrf	??_special_int_enable+1
  4261                           
  4262                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4263                           ; Switch size 1, requested type "simple"
  4264                           ; Number of cases is 1, Range of values is 0 to 0
  4265                           ; switch strategies available:
  4266                           ; Name         Instructions Cycles
  4267                           ; simple_byte            4     3 (average)
  4268                           ; direct_byte           11     8 (fixed)
  4269                           ; jumptable            260     6 (fixed)
  4270                           ;	Chosen strategy is simple_byte
  4271  0770  084C               	movf	??_special_int_enable+1,w
  4272  0771  3A00               	xorlw	0	; case 0
  4273  0772  1903               	skipnz
  4274  0773  2F75               	goto	l6449
  4275  0774  2F68               	goto	l3303
  4276  0775                     l6449:
  4277                           
  4278                           ; Switch size 1, requested type "simple"
  4279                           ; Number of cases is 5, Range of values is 0 to 64
  4280                           ; switch strategies available:
  4281                           ; Name         Instructions Cycles
  4282                           ; simple_byte           16     9 (average)
  4283                           ; direct_byte          203     8 (fixed)
  4284                           ; jumptable            260     6 (fixed)
  4285                           ;	Chosen strategy is simple_byte
  4286  0775  084B               	movf	??_special_int_enable,w
  4287  0776  3A00               	xorlw	0	; case 0
  4288  0777  1903               	skipnz
  4289  0778  2F15               	goto	l3271
  4290  0779  3A01               	xorlw	1	; case 1
  4291  077A  1903               	skipnz
  4292  077B  2F22               	goto	l3277
  4293  077C  3A03               	xorlw	3	; case 2
  4294  077D  1903               	skipnz
  4295  077E  2F35               	goto	l3285
  4296  077F  3A01               	xorlw	1	; case 3
  4297  0780  1903               	skipnz
  4298  0781  2F48               	goto	l3291
  4299  0782  3A43               	xorlw	67	; case 64
  4300  0783  1903               	skipnz
  4301  0784  2F55               	goto	l3297
  4302  0785  2F68               	goto	l3303
  4303  0786                     l3307:
  4304                           
  4305                           ;interrupts.c: 87: return ret_error;
  4306  0786  1283               	bcf	3,5	;RP0=0, select bank0
  4307  0787  084E               	movf	special_int_enable@ret_error,w
  4308  0788                     l144:
  4309  0788  0008               	return
  4310  0789                     __end_of_special_int_enable:
  4311                           
  4312                           	psect	text13
  4313  0933                     __ptext13:	
  4314 ;; *************** function _global_int_enable *****************
  4315 ;; Defined at:
  4316 ;;		line 169 in file "interrupts.c"
  4317 ;; Parameters:    Size  Location     Type
  4318 ;;		None
  4319 ;; Auto vars:     Size  Location     Type
  4320 ;;		None
  4321 ;; Return value:  Size  Location     Type
  4322 ;;                  1    wreg      void 
  4323 ;; Registers used:
  4324 ;;		wreg, status,2, status,0
  4325 ;; Tracked objects:
  4326 ;;		On entry : 0/0
  4327 ;;		On exit  : 0/0
  4328 ;;		Unchanged: 0/0
  4329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4330 ;;      Params:         0       0       0       0       0
  4331 ;;      Locals:         0       0       0       0       0
  4332 ;;      Temps:          0       0       0       0       0
  4333 ;;      Totals:         0       0       0       0       0
  4334 ;;Total ram usage:        0 bytes
  4335 ;; Hardware stack levels used:    1
  4336 ;; Hardware stack levels required when called:    5
  4337 ;; This function calls:
  4338 ;;		Nothing
  4339 ;; This function is called by:
  4340 ;;		_special_int_enable
  4341 ;; This function uses a non-reentrant model
  4342 ;;
  4343                           
  4344                           
  4345                           ;psect for function _global_int_enable
  4346  0933                     _global_int_enable:
  4347  0933                     l3261:	
  4348                           ;incstack = 0
  4349 ;; hardware stack exceeded
  4350                           ; Regs used in _global_int_enable: [wreg+status,2+status,0]
  4351                           
  4352                           
  4353                           ;interrupts.c: 171: if(u8global_int_enabled == 0)
  4354  0933  1283               	bcf	3,5	;RP0=0, select bank0
  4355  0934  1303               	bcf	3,6	;RP1=0, select bank0
  4356  0935  0840               	movf	_u8global_int_enabled,w
  4357  0936  1D03               	btfss	3,2
  4358  0937  2939               	goto	u1001
  4359  0938  293A               	goto	u1000
  4360  0939                     u1001:
  4361  0939  293B               	goto	l180
  4362  093A                     u1000:
  4363  093A                     l3263:
  4364                           
  4365                           ;interrupts.c: 172:      *((reg_type8_t)(0x000B)) |=0x80;
  4366  093A  178B               	bsf	11,7	;volatile
  4367  093B                     l180:
  4368                           
  4369                           ;interrupts.c: 173:      u8global_int_enabled=1;
  4370  093B  01C0               	clrf	_u8global_int_enabled
  4371  093C  0AC0               	incf	_u8global_int_enabled,f
  4372  093D                     l181:
  4373  093D  0008               	return
  4374  093E                     __end_of_global_int_enable:
  4375                           
  4376                           	psect	text14
  4377  0C90                     __ptext14:	
  4378 ;; *************** function _special_int_disable *****************
  4379 ;; Defined at:
  4380 ;;		line 89 in file "interrupts.c"
  4381 ;; Parameters:    Size  Location     Type
  4382 ;;  u8_interrupt    1    wreg     unsigned char 
  4383 ;; Auto vars:     Size  Location     Type
  4384 ;;  u8_interrupt    1    6[BANK0 ] unsigned char 
  4385 ;;  ret_error       1    7[BANK0 ] unsigned char 
  4386 ;; Return value:  Size  Location     Type
  4387 ;;                  1    wreg      unsigned char 
  4388 ;; Registers used:
  4389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4390 ;; Tracked objects:
  4391 ;;		On entry : 0/0
  4392 ;;		On exit  : 0/0
  4393 ;;		Unchanged: 0/0
  4394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4395 ;;      Params:         0       0       0       0       0
  4396 ;;      Locals:         0       2       0       0       0
  4397 ;;      Temps:          0       2       0       0       0
  4398 ;;      Totals:         0       4       0       0       0
  4399 ;;Total ram usage:        4 bytes
  4400 ;; Hardware stack levels used:    1
  4401 ;; Hardware stack levels required when called:    5
  4402 ;; This function calls:
  4403 ;;		Nothing
  4404 ;; This function is called by:
  4405 ;;		_ADC_INIT
  4406 ;;		_Timer_Init
  4407 ;; This function uses a non-reentrant model
  4408 ;;
  4409                           
  4410                           
  4411                           ;psect for function _special_int_disable
  4412  0C90                     _special_int_disable:
  4413                           
  4414                           ;incstack = 0
  4415 ;; hardware stack exceeded
  4416                           ; Regs used in _special_int_disable: [wreg-fsr0h+status,2+status,0+btemp+1]
  4417                           ;special_int_disable@u8_interrupt_prepherals stored from wreg
  4418  0C90  1283               	bcf	3,5	;RP0=0, select bank0
  4419  0C91  1303               	bcf	3,6	;RP1=0, select bank0
  4420  0C92  00CD               	movwf	special_int_disable@u8_interrupt_prepherals
  4421  0C93                     l3315:
  4422                           
  4423                           ;interrupts.c: 89: ERROR_STATUS special_int_disable(uint8_t u8_interrupt_prepherals);int
      +                          errupts.c: 90: { uint8_t ret_error = 0;
  4424  0C93  01CE               	clrf	special_int_disable@ret_error
  4425                           
  4426                           ;interrupts.c: 92:     switch (u8_interrupt_prepherals) {
  4427  0C94  2CB4               	goto	l3327
  4428  0C95                     l3317:
  4429                           
  4430                           ;interrupts.c: 94:  *((reg_type8_t)(0x000B)) &= 0xDF;
  4431  0C95  30DF               	movlw	223
  4432  0C96  00FF               	movwf	btemp+1
  4433  0C97  087F               	movf	btemp+1,w
  4434  0C98  058B               	andwf	11,f	;volatile
  4435                           
  4436                           ;interrupts.c: 95:  break;
  4437  0C99  2CCD               	goto	l3329
  4438  0C9A                     l3319:
  4439                           
  4440                           ;interrupts.c: 97:         *((reg_type8_t)(0x008C)) &= 0xFE;
  4441  0C9A  30FE               	movlw	254
  4442  0C9B  00FF               	movwf	btemp+1
  4443  0C9C  087F               	movf	btemp+1,w
  4444  0C9D  1683               	bsf	3,5	;RP0=1, select bank1
  4445  0C9E  1303               	bcf	3,6	;RP1=0, select bank1
  4446  0C9F  058C               	andwf	12,f	;volatile
  4447                           
  4448                           ;interrupts.c: 98:  break;
  4449  0CA0  2CCD               	goto	l3329
  4450  0CA1                     l3321:
  4451                           
  4452                           ;interrupts.c: 100:         *((reg_type8_t)(0x008C)) &= 0xFD;
  4453  0CA1  30FD               	movlw	253
  4454  0CA2  00FF               	movwf	btemp+1
  4455  0CA3  087F               	movf	btemp+1,w
  4456  0CA4  1683               	bsf	3,5	;RP0=1, select bank1
  4457  0CA5  1303               	bcf	3,6	;RP1=0, select bank1
  4458  0CA6  058C               	andwf	12,f	;volatile
  4459                           
  4460                           ;interrupts.c: 101:  break;
  4461  0CA7  2CCD               	goto	l3329
  4462  0CA8                     l3323:
  4463                           
  4464                           ;interrupts.c: 105:         *((reg_type8_t)(0x008C)) &= (~0x40);
  4465  0CA8  30BF               	movlw	191
  4466  0CA9  00FF               	movwf	btemp+1
  4467  0CAA  087F               	movf	btemp+1,w
  4468  0CAB  1683               	bsf	3,5	;RP0=1, select bank1
  4469  0CAC  1303               	bcf	3,6	;RP1=0, select bank1
  4470  0CAD  058C               	andwf	12,f	;volatile
  4471  0CAE                     l154:	
  4472                           ;interrupts.c: 106:         default:
  4473                           
  4474                           
  4475                           ;interrupts.c: 107:     ret_error += 1 + 28;
  4476  0CAE  301D               	movlw	29
  4477  0CAF  00FF               	movwf	btemp+1
  4478  0CB0  087F               	movf	btemp+1,w
  4479  0CB1  1283               	bcf	3,5	;RP0=0, select bank0
  4480  0CB2  07CE               	addwf	special_int_disable@ret_error,f
  4481                           
  4482                           ;interrupts.c: 108:     break;
  4483  0CB3  2CCD               	goto	l3329
  4484  0CB4                     l3327:
  4485  0CB4  084D               	movf	special_int_disable@u8_interrupt_prepherals,w
  4486  0CB5  00CB               	movwf	??_special_int_disable
  4487  0CB6  01CC               	clrf	??_special_int_disable+1
  4488                           
  4489                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4490                           ; Switch size 1, requested type "simple"
  4491                           ; Number of cases is 1, Range of values is 0 to 0
  4492                           ; switch strategies available:
  4493                           ; Name         Instructions Cycles
  4494                           ; simple_byte            4     3 (average)
  4495                           ; direct_byte           11     8 (fixed)
  4496                           ; jumptable            260     6 (fixed)
  4497                           ;	Chosen strategy is simple_byte
  4498  0CB7  084C               	movf	??_special_int_disable+1,w
  4499  0CB8  3A00               	xorlw	0	; case 0
  4500  0CB9  1903               	skipnz
  4501  0CBA  2CBC               	goto	l6451
  4502  0CBB  2CAE               	goto	l154
  4503  0CBC                     l6451:
  4504                           
  4505                           ; Switch size 1, requested type "simple"
  4506                           ; Number of cases is 5, Range of values is 0 to 64
  4507                           ; switch strategies available:
  4508                           ; Name         Instructions Cycles
  4509                           ; simple_byte           16     9 (average)
  4510                           ; direct_byte          203     8 (fixed)
  4511                           ; jumptable            260     6 (fixed)
  4512                           ;	Chosen strategy is simple_byte
  4513  0CBC  084B               	movf	??_special_int_disable,w
  4514  0CBD  3A00               	xorlw	0	; case 0
  4515  0CBE  1903               	skipnz
  4516  0CBF  2C95               	goto	l3317
  4517  0CC0  3A01               	xorlw	1	; case 1
  4518  0CC1  1903               	skipnz
  4519  0CC2  2C9A               	goto	l3319
  4520  0CC3  3A03               	xorlw	3	; case 2
  4521  0CC4  1903               	skipnz
  4522  0CC5  2CA1               	goto	l3321
  4523  0CC6  3A01               	xorlw	1	; case 3
  4524  0CC7  1903               	skipnz
  4525  0CC8  2CCD               	goto	l3329
  4526  0CC9  3A43               	xorlw	67	; case 64
  4527  0CCA  1903               	skipnz
  4528  0CCB  2CA8               	goto	l3323
  4529  0CCC  2CAE               	goto	l154
  4530  0CCD                     l3329:
  4531                           
  4532                           ;interrupts.c: 111: return ret_error;
  4533  0CCD  1283               	bcf	3,5	;RP0=0, select bank0
  4534  0CCE  084E               	movf	special_int_disable@ret_error,w
  4535  0CCF                     l155:
  4536  0CCF  0008               	return
  4537  0CD0                     __end_of_special_int_disable:
  4538                           
  4539                           	psect	text15
  4540  02C5                     __ptext15:	
  4541 ;; *************** function _SOS_Run *****************
  4542 ;; Defined at:
  4543 ;;		line 138 in file "SOS.c"
  4544 ;; Parameters:    Size  Location     Type
  4545 ;;		None
  4546 ;; Auto vars:     Size  Location     Type
  4547 ;;  ret             1    0        unsigned char 
  4548 ;; Return value:  Size  Location     Type
  4549 ;;                  1    wreg      unsigned char 
  4550 ;; Registers used:
  4551 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4552 ;; Tracked objects:
  4553 ;;		On entry : 0/0
  4554 ;;		On exit  : 0/0
  4555 ;;		Unchanged: 0/0
  4556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4557 ;;      Params:         0       0       0       0       0
  4558 ;;      Locals:         0       1       0       0       0
  4559 ;;      Temps:          0       0       0       4       0
  4560 ;;      Totals:         0       1       0       4       0
  4561 ;;Total ram usage:        5 bytes
  4562 ;; Hardware stack levels used:    1
  4563 ;; Hardware stack levels required when called:    9
  4564 ;; This function calls:
  4565 ;;		_Task1
  4566 ;;		_Task2
  4567 ;;		_Task3
  4568 ;;		___bmul
  4569 ;; This function is called by:
  4570 ;;		_main
  4571 ;; This function uses a non-reentrant model
  4572 ;;
  4573                           
  4574                           
  4575                           ;psect for function _SOS_Run
  4576  02C5                     _SOS_Run:
  4577  02C5                     l5573:	
  4578                           ;incstack = 0
  4579 ;; hardware stack exceeded
  4580                           ; Regs used in _SOS_Run: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4581                           
  4582  02C5                     l5575:
  4583                           
  4584                           ;SOS.c: 150:   {;SOS.c: 151: if (u8Excution_to_be_done)
  4585  02C5  1283               	bcf	3,5	;RP0=0, select bank0
  4586  02C6  1303               	bcf	3,6	;RP1=0, select bank0
  4587  02C7  0835               	movf	_u8Excution_to_be_done,w	;volatile
  4588  02C8  1903               	btfsc	3,2
  4589  02C9  2ACB               	goto	u2021
  4590  02CA  2ACC               	goto	u2020
  4591  02CB                     u2021:
  4592  02CB  2B82               	goto	l483
  4593  02CC                     u2020:
  4594  02CC                     l5577:
  4595                           
  4596                           ;SOS.c: 152: { u8Excution_to_be_done=0;
  4597  02CC  01B5               	clrf	_u8Excution_to_be_done	;volatile
  4598                           
  4599                           ;SOS.c: 154:   for (u8_FUN_index=0;u8_FUN_index<3;u8_FUN_index++)
  4600  02CD  01B6               	clrf	_u8_FUN_index
  4601  02CE                     l5583:
  4602                           
  4603                           ;SOS.c: 155:    {;SOS.c: 165:                     if((Buffer_Array[u8_FUN_index]).u8_fla
      +                          g_is_stopped==0){ret=0;}
  4604  02CE  3007               	movlw	7
  4605  02CF  00FF               	movwf	btemp+1
  4606  02D0  087F               	movf	btemp+1,w
  4607  02D1  00CB               	movwf	___bmul@multiplicand
  4608  02D2  0836               	movf	_u8_FUN_index,w
  4609  02D3  120A  158A  2201  120A  118A  	fcall	___bmul
  4610  02D8  3EA1               	addlw	(low ((_Buffer_Array| 0+1)))& (0+255)
  4611  02D9  0084               	movwf	4
  4612  02DA  1383               	bcf	3,7	;select IRP bank1
  4613  02DB  0800               	movf	0,w
  4614  02DC  1D03               	btfss	3,2
  4615  02DD  2ADF               	goto	u2031
  4616  02DE  2AE0               	goto	u2030
  4617  02DF                     u2031:
  4618  02DF  2AE1               	goto	l5587
  4619  02E0                     u2030:
  4620  02E0                     l5585:
  4621  02E0  2B76               	goto	l5593
  4622  02E1                     l5587:
  4623                           
  4624                           ;SOS.c: 173:  ((Buffer_Array[u8_FUN_index]).u16_Counter)++;
  4625  02E1  3007               	movlw	7
  4626  02E2  00FF               	movwf	btemp+1
  4627  02E3  087F               	movf	btemp+1,w
  4628  02E4  1283               	bcf	3,5	;RP0=0, select bank0
  4629  02E5  1303               	bcf	3,6	;RP1=0, select bank0
  4630  02E6  00CB               	movwf	___bmul@multiplicand
  4631  02E7  0836               	movf	_u8_FUN_index,w
  4632  02E8  120A  158A  2201  120A  118A  	fcall	___bmul
  4633  02ED  3EA5               	addlw	(low ((_Buffer_Array| 0+5)))& (0+255)
  4634  02EE  0084               	movwf	4
  4635  02EF  3001               	movlw	1
  4636  02F0  1383               	bcf	3,7	;select IRP bank1
  4637  02F1  0780               	addwf	0,f
  4638  02F2  0A84               	incf	4,f
  4639  02F3  1803               	skipnc
  4640  02F4  0A80               	incf	0,f
  4641                           
  4642                           ;SOS.c: 178:  if(((Buffer_Array[u8_FUN_index]).u16_time_delay) == ((Buffer_Array[u8_FUN_
      +                          index]).u16_Counter) )
  4643  02F5  3007               	movlw	7
  4644  02F6  00FF               	movwf	btemp+1
  4645  02F7  087F               	movf	btemp+1,w
  4646  02F8  1283               	bcf	3,5	;RP0=0, select bank0
  4647  02F9  1303               	bcf	3,6	;RP1=0, select bank0
  4648  02FA  00CB               	movwf	___bmul@multiplicand
  4649  02FB  0836               	movf	_u8_FUN_index,w
  4650  02FC  120A  158A  2201  120A  118A  	fcall	___bmul
  4651  0301  3EA5               	addlw	(low ((_Buffer_Array| 0+5)))& (0+255)
  4652  0302  0084               	movwf	4
  4653  0303  1383               	bcf	3,7	;select IRP bank1
  4654  0304  0800               	movf	0,w
  4655  0305  1683               	bsf	3,5	;RP0=1, select bank3
  4656  0306  1703               	bsf	3,6	;RP1=1, select bank3
  4657  0307  00AE               	movwf	??_SOS_Run^(0+384)
  4658  0308  0A84               	incf	4,f
  4659  0309  0800               	movf	0,w
  4660  030A  00AF               	movwf	(??_SOS_Run^(0+384)+1)
  4661  030B  3007               	movlw	7
  4662  030C  00FF               	movwf	btemp+1
  4663  030D  087F               	movf	btemp+1,w
  4664  030E  1283               	bcf	3,5	;RP0=0, select bank0
  4665  030F  1303               	bcf	3,6	;RP1=0, select bank0
  4666  0310  00CB               	movwf	___bmul@multiplicand
  4667  0311  0836               	movf	_u8_FUN_index,w
  4668  0312  120A  158A  2201  120A  118A  	fcall	___bmul
  4669  0317  3EA2               	addlw	(low ((_Buffer_Array| 0+2)))& (0+255)
  4670  0318  0084               	movwf	4
  4671  0319  1383               	bcf	3,7	;select IRP bank1
  4672  031A  0800               	movf	0,w
  4673  031B  1683               	bsf	3,5	;RP0=1, select bank3
  4674  031C  1703               	bsf	3,6	;RP1=1, select bank3
  4675  031D  00B0               	movwf	(??_SOS_Run+2)^(0+384)
  4676  031E  0A84               	incf	4,f
  4677  031F  0800               	movf	0,w
  4678  0320  00B1               	movwf	((??_SOS_Run+2)^(0+384)+1)
  4679  0321  082F               	movf	(??_SOS_Run+1)^(0+384),w
  4680  0322  0631               	xorwf	(??_SOS_Run+3)^(0+384),w
  4681  0323  1D03               	skipz
  4682  0324  2B27               	goto	u2045
  4683  0325  082E               	movf	??_SOS_Run^(0+384),w
  4684  0326  0630               	xorwf	(??_SOS_Run+2)^(0+384),w
  4685  0327                     u2045:
  4686  0327  1D03               	skipz
  4687  0328  2B2A               	goto	u2041
  4688  0329  2B2B               	goto	u2040
  4689  032A                     u2041:
  4690  032A  2B52               	goto	l481
  4691  032B                     u2040:
  4692  032B                     l5589:
  4693                           
  4694                           ;SOS.c: 179:  {;SOS.c: 180:   ((Buffer_Array[u8_FUN_index]).Fuction_consumer)();
  4695  032B  3007               	movlw	7
  4696  032C  00FF               	movwf	btemp+1
  4697  032D  087F               	movf	btemp+1,w
  4698  032E  1283               	bcf	3,5	;RP0=0, select bank0
  4699  032F  1303               	bcf	3,6	;RP1=0, select bank0
  4700  0330  00CB               	movwf	___bmul@multiplicand
  4701  0331  0836               	movf	_u8_FUN_index,w
  4702  0332  120A  158A  2201  120A  118A  	fcall	___bmul
  4703  0337  3EA0               	addlw	(low (_Buffer_Array| 0))& (0+255)
  4704  0338  0084               	movwf	4
  4705  0339  1383               	bcf	3,7	;select IRP bank1
  4706  033A  0800               	movf	0,w
  4707  033B  120A  118A  205C  120A  118A  	fcall	fptable
  4708                           
  4709                           ;SOS.c: 184:   (Buffer_Array[u8_FUN_index]).u16_Counter=0;
  4710  0340  3007               	movlw	7
  4711  0341  00FF               	movwf	btemp+1
  4712  0342  087F               	movf	btemp+1,w
  4713  0343  1283               	bcf	3,5	;RP0=0, select bank0
  4714  0344  1303               	bcf	3,6	;RP1=0, select bank0
  4715  0345  00CB               	movwf	___bmul@multiplicand
  4716  0346  0836               	movf	_u8_FUN_index,w
  4717  0347  120A  158A  2201  120A  118A  	fcall	___bmul
  4718  034C  3EA5               	addlw	(low ((_Buffer_Array| 0+5)))& (0+255)
  4719  034D  0084               	movwf	4
  4720  034E  1383               	bcf	3,7	;select IRP bank1
  4721  034F  0180               	clrf	0
  4722  0350  0A84               	incf	4,f
  4723  0351  0180               	clrf	0
  4724  0352                     l481:	
  4725                           ;SOS.c: 186:  }
  4726                           
  4727                           
  4728                           ;SOS.c: 192:  if((Buffer_Array[u8_FUN_index]).preodic==0)
  4729  0352  3007               	movlw	7
  4730  0353  00FF               	movwf	btemp+1
  4731  0354  087F               	movf	btemp+1,w
  4732  0355  1283               	bcf	3,5	;RP0=0, select bank0
  4733  0356  1303               	bcf	3,6	;RP1=0, select bank0
  4734  0357  00CB               	movwf	___bmul@multiplicand
  4735  0358  0836               	movf	_u8_FUN_index,w
  4736  0359  120A  158A  2201  120A  118A  	fcall	___bmul
  4737  035E  3EA4               	addlw	(low ((_Buffer_Array| 0+4)))& (0+255)
  4738  035F  0084               	movwf	4
  4739  0360  1383               	bcf	3,7	;select IRP bank1
  4740  0361  0800               	movf	0,w
  4741  0362  1D03               	btfss	3,2
  4742  0363  2B65               	goto	u2051
  4743  0364  2B66               	goto	u2050
  4744  0365                     u2051:
  4745  0365  2B76               	goto	l5593
  4746  0366                     u2050:
  4747  0366                     l5591:
  4748                           
  4749                           ;SOS.c: 193:  {;SOS.c: 197:   (Buffer_Array[u8_FUN_index]).u8_flag_is_stopped=0;
  4750  0366  3007               	movlw	7
  4751  0367  00FF               	movwf	btemp+1
  4752  0368  087F               	movf	btemp+1,w
  4753  0369  1283               	bcf	3,5	;RP0=0, select bank0
  4754  036A  1303               	bcf	3,6	;RP1=0, select bank0
  4755  036B  00CB               	movwf	___bmul@multiplicand
  4756  036C  0836               	movf	_u8_FUN_index,w
  4757  036D  120A  158A  2201  120A  118A  	fcall	___bmul
  4758  0372  3EA1               	addlw	(low ((_Buffer_Array| 0+1)))& (0+255)
  4759  0373  0084               	movwf	4
  4760  0374  1383               	bcf	3,7	;select IRP bank1
  4761  0375  0180               	clrf	0
  4762  0376                     l5593:
  4763                           
  4764                           ;SOS.c: 202:  }
  4765  0376  3001               	movlw	1
  4766  0377  00FF               	movwf	btemp+1
  4767  0378  087F               	movf	btemp+1,w
  4768  0379  1283               	bcf	3,5	;RP0=0, select bank0
  4769  037A  1303               	bcf	3,6	;RP1=0, select bank0
  4770  037B  07B6               	addwf	_u8_FUN_index,f
  4771  037C                     l5595:
  4772  037C  3003               	movlw	3
  4773  037D  0236               	subwf	_u8_FUN_index,w
  4774  037E  1C03               	skipc
  4775  037F  2B81               	goto	u2061
  4776  0380  2B82               	goto	u2060
  4777  0381                     u2061:
  4778  0381  2ACE               	goto	l5583
  4779  0382                     u2060:
  4780  0382                     l483:
  4781  0382  0008               	return
  4782  0383                     __end_of_SOS_Run:
  4783                           
  4784                           	psect	text16
  4785  0A01                     __ptext16:	
  4786 ;; *************** function ___bmul *****************
  4787 ;; Defined at:
  4788 ;;		line 4 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\Umul8.c"
  4789 ;; Parameters:    Size  Location     Type
  4790 ;;  multiplier      1    wreg     unsigned char 
  4791 ;;  multiplicand    1    4[BANK0 ] unsigned char 
  4792 ;; Auto vars:     Size  Location     Type
  4793 ;;  multiplier      1    6[BANK0 ] unsigned char 
  4794 ;;  product         1    5[BANK0 ] unsigned char 
  4795 ;; Return value:  Size  Location     Type
  4796 ;;                  1    wreg      unsigned char 
  4797 ;; Registers used:
  4798 ;;		wreg, status,2, status,0, btemp+1
  4799 ;; Tracked objects:
  4800 ;;		On entry : 0/0
  4801 ;;		On exit  : 0/0
  4802 ;;		Unchanged: 0/0
  4803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4804 ;;      Params:         0       1       0       0       0
  4805 ;;      Locals:         0       2       0       0       0
  4806 ;;      Temps:          0       0       0       0       0
  4807 ;;      Totals:         0       3       0       0       0
  4808 ;;Total ram usage:        3 bytes
  4809 ;; Hardware stack levels used:    1
  4810 ;; Hardware stack levels required when called:    5
  4811 ;; This function calls:
  4812 ;;		Nothing
  4813 ;; This function is called by:
  4814 ;;		_SOS_Create_Task
  4815 ;;		_SOS_Run
  4816 ;;		_TMU_Stop_Timer
  4817 ;; This function uses a non-reentrant model
  4818 ;;
  4819                           
  4820                           
  4821                           ;psect for function ___bmul
  4822  0A01                     ___bmul:
  4823                           
  4824                           ;incstack = 0
  4825                           ; Regs used in ___bmul: [wreg+status,2+status,0+btemp+1]
  4826                           ;___bmul@multiplier stored from wreg
  4827  0A01  1283               	bcf	3,5	;RP0=0, select bank0
  4828  0A02  1303               	bcf	3,6	;RP1=0, select bank0
  4829  0A03  00CD               	movwf	___bmul@multiplier
  4830  0A04                     l4057:
  4831  0A04  01CC               	clrf	___bmul@product
  4832  0A05                     l4059:
  4833  0A05  1C4D               	btfss	___bmul@multiplier,0
  4834  0A06  2A08               	goto	u1531
  4835  0A07  2A09               	goto	u1530
  4836  0A08                     u1531:
  4837  0A08  2A0D               	goto	l4063
  4838  0A09                     u1530:
  4839  0A09                     l4061:
  4840  0A09  084B               	movf	___bmul@multiplicand,w
  4841  0A0A  00FF               	movwf	btemp+1
  4842  0A0B  087F               	movf	btemp+1,w
  4843  0A0C  07CC               	addwf	___bmul@product,f
  4844  0A0D                     l4063:
  4845  0A0D  1003               	clrc
  4846  0A0E  0DCB               	rlf	___bmul@multiplicand,f
  4847  0A0F                     l4065:
  4848  0A0F  1003               	clrc
  4849  0A10  0CCD               	rrf	___bmul@multiplier,f
  4850  0A11                     l4067:
  4851  0A11  084D               	movf	___bmul@multiplier,w
  4852  0A12  1D03               	btfss	3,2
  4853  0A13  2A15               	goto	u1541
  4854  0A14  2A16               	goto	u1540
  4855  0A15                     u1541:
  4856  0A15  2A05               	goto	l4059
  4857  0A16                     u1540:
  4858  0A16                     l4069:
  4859  0A16  084C               	movf	___bmul@product,w
  4860  0A17                     l847:
  4861  0A17  0008               	return
  4862  0A18                     __end_of___bmul:
  4863                           
  4864                           	psect	text17
  4865  0C13                     __ptext17:	
  4866 ;; *************** function _Task2 *****************
  4867 ;; Defined at:
  4868 ;;		line 46 in file "tasks1.c"
  4869 ;; Parameters:    Size  Location     Type
  4870 ;;		None
  4871 ;; Auto vars:     Size  Location     Type
  4872 ;;  ret             1    0        unsigned char 
  4873 ;; Return value:  Size  Location     Type
  4874 ;;                  1    wreg      void 
  4875 ;; Registers used:
  4876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4877 ;; Tracked objects:
  4878 ;;		On entry : 0/0
  4879 ;;		On exit  : 0/0
  4880 ;;		Unchanged: 0/0
  4881 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4882 ;;      Params:         0       0       0       0       0
  4883 ;;      Locals:         0       1       0       0       0
  4884 ;;      Temps:          0       2       0       0       0
  4885 ;;      Totals:         0       3       0       0       0
  4886 ;;Total ram usage:        3 bytes
  4887 ;; Hardware stack levels used:    1
  4888 ;; Hardware stack levels required when called:    8
  4889 ;; This function calls:
  4890 ;;		_ADC_READ
  4891 ;;		_EEPROM_Read
  4892 ;;		_EEPROM_Write
  4893 ;;		_sevenSegWrite
  4894 ;; This function is called by:
  4895 ;;		_system_init
  4896 ;;		_SOS_Run
  4897 ;; This function uses a non-reentrant model
  4898 ;;
  4899                           
  4900                           
  4901                           ;psect for function _Task2
  4902  0C13                     _Task2:
  4903  0C13                     l4291:	
  4904                           ;incstack = 0
  4905 ;; hardware stack exceeded
  4906                           ; Regs used in _Task2: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4907                           
  4908                           
  4909                           ;tasks1.c: 55: EE_Data=adc_data;
  4910  0C13  1283               	bcf	3,5	;RP0=0, select bank0
  4911  0C14  1303               	bcf	3,6	;RP1=0, select bank0
  4912  0C15  01AF               	clrf	Task2@EE_Data
  4913  0C16                     l4293:
  4914  0C16  120A  158A  239B  120A  158A  	fcall	_ADC_READ
  4915  0C1B  1283               	bcf	3,5	;RP0=0, select bank0
  4916  0C1C  1303               	bcf	3,6	;RP1=0, select bank0
  4917  0C1D  0855               	movf	?_ADC_READ,w
  4918  0C1E  120A  158A  26D1  120A  158A  	fcall	_sevenSegWrite
  4919  0C23                     l4295:
  4920                           
  4921                           ;tasks1.c: 59:  EEPROM_Write(EE_Address, EE_Data);
  4922  0C23  3020               	movlw	32
  4923  0C24  1283               	bcf	3,5	;RP0=0, select bank0
  4924  0C25  1303               	bcf	3,6	;RP1=0, select bank0
  4925  0C26  00CC               	movwf	EEPROM_Write@add
  4926  0C27  3000               	movlw	0
  4927  0C28  00CD               	movwf	EEPROM_Write@add+1
  4928  0C29  01CE               	clrf	EEPROM_Write@data
  4929  0C2A  120A  158A  22C6  120A  158A  	fcall	_EEPROM_Write
  4930  0C2F                     l4297:
  4931                           
  4932                           ;tasks1.c: 60: last_temp_reading= EEPROM_Read(EE_Address);
  4933  0C2F  3020               	movlw	32
  4934  0C30  1283               	bcf	3,5	;RP0=0, select bank0
  4935  0C31  1303               	bcf	3,6	;RP1=0, select bank0
  4936  0C32  00CC               	movwf	EEPROM_Read@add
  4937  0C33  3000               	movlw	0
  4938  0C34  00CD               	movwf	EEPROM_Read@add+1
  4939  0C35  120A  158A  23D6  120A  158A  	fcall	_EEPROM_Read
  4940  0C3A  1283               	bcf	3,5	;RP0=0, select bank0
  4941  0C3B  1303               	bcf	3,6	;RP1=0, select bank0
  4942  0C3C  00D8               	movwf	??_Task2
  4943  0C3D  01D9               	clrf	??_Task2+1
  4944  0C3E  0858               	movf	??_Task2,w
  4945  0C3F  00A8               	movwf	_last_temp_reading
  4946  0C40  0859               	movf	??_Task2+1,w
  4947  0C41  00A9               	movwf	_last_temp_reading+1
  4948  0C42                     l4299:
  4949                           
  4950                           ;tasks1.c: 61: last_Ten_readings[readings_counter]=adc_data;
  4951  0C42  082E               	movf	Task2@readings_counter,w
  4952  0C43  00D8               	movwf	??_Task2
  4953  0C44  0758               	addwf	??_Task2,w
  4954  0C45  3E90               	addlw	(low (_last_Ten_readings| (0+256)))& (0+255)
  4955  0C46  0084               	movwf	4
  4956  0C47  1783               	bsf	3,7	;select IRP bank3
  4957  0C48  0180               	clrf	0
  4958  0C49  0A84               	incf	4,f
  4959  0C4A  0180               	clrf	0
  4960  0C4B                     l4301:
  4961                           
  4962                           ;tasks1.c: 62:  readings_counter++;
  4963  0C4B  3001               	movlw	1
  4964  0C4C  00FF               	movwf	btemp+1
  4965  0C4D  087F               	movf	btemp+1,w
  4966  0C4E  07AE               	addwf	Task2@readings_counter,f
  4967  0C4F                     l732:
  4968  0C4F  0008               	return
  4969  0C50                     __end_of_Task2:
  4970                           
  4971                           	psect	text18
  4972  0D1A                     __ptext18:	
  4973 ;; *************** function _Task1 *****************
  4974 ;; Defined at:
  4975 ;;		line 6 in file "tasks1.c"
  4976 ;; Parameters:    Size  Location     Type
  4977 ;;		None
  4978 ;; Auto vars:     Size  Location     Type
  4979 ;;		None
  4980 ;; Return value:  Size  Location     Type
  4981 ;;                  1    wreg      void 
  4982 ;; Registers used:
  4983 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4984 ;; Tracked objects:
  4985 ;;		On entry : 0/0
  4986 ;;		On exit  : 0/0
  4987 ;;		Unchanged: 0/0
  4988 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4989 ;;      Params:         0       0       0       0       0
  4990 ;;      Locals:         0       0       0       0       0
  4991 ;;      Temps:          0       0       0       0       0
  4992 ;;      Totals:         0       0       0       0       0
  4993 ;;Total ram usage:        0 bytes
  4994 ;; Hardware stack levels used:    1
  4995 ;; Hardware stack levels required when called:    7
  4996 ;; This function calls:
  4997 ;;		_pushButtonGetStatus
  4998 ;; This function is called by:
  4999 ;;		_system_init
  5000 ;;		_SOS_Run
  5001 ;; This function uses a non-reentrant model
  5002 ;;
  5003                           
  5004                           
  5005                           ;psect for function _Task1
  5006  0D1A                     _Task1:
  5007  0D1A                     l4267:	
  5008                           ;incstack = 0
  5009 ;; hardware stack exceeded
  5010                           ; Regs used in _Task1: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5011                           
  5012                           
  5013                           ;tasks1.c: 8:   static uint8_t u8_Counter1=0;;tasks1.c: 9:   static uint8_t u8_Counter=0
      +                          ;;tasks1.c: 11:   static uint8_t u8_Counter2=0;;tasks1.c: 12:  if (pushButtonGetStatus(B
      +                          TN_0))
  5014  0D1A  3000               	movlw	0
  5015  0D1B  120A  118A  2691  120A  158A  	fcall	_pushButtonGetStatus
  5016  0D20  3A00               	xorlw	0
  5017  0D21  1903               	skipnz
  5018  0D22  2D24               	goto	u1691
  5019  0D23  2D25               	goto	u1690
  5020  0D24                     u1691:
  5021  0D24  2D2B               	goto	l4271
  5022  0D25                     u1690:
  5023  0D25                     l4269:
  5024                           
  5025                           ;tasks1.c: 13:  {;tasks1.c: 14:   u8_Counter++;
  5026  0D25  3001               	movlw	1
  5027  0D26  00FF               	movwf	btemp+1
  5028  0D27  087F               	movf	btemp+1,w
  5029  0D28  1283               	bcf	3,5	;RP0=0, select bank0
  5030  0D29  1303               	bcf	3,6	;RP1=0, select bank0
  5031  0D2A  07B1               	addwf	Task1@u8_Counter,f
  5032  0D2B                     l4271:
  5033                           
  5034                           ;tasks1.c: 16:  if (u8_Counter > 10)
  5035  0D2B  300B               	movlw	11
  5036  0D2C  1283               	bcf	3,5	;RP0=0, select bank0
  5037  0D2D  1303               	bcf	3,6	;RP1=0, select bank0
  5038  0D2E  0231               	subwf	Task1@u8_Counter,w
  5039  0D2F  1C03               	skipc
  5040  0D30  2D32               	goto	u1701
  5041  0D31  2D33               	goto	u1700
  5042  0D32                     u1701:
  5043  0D32  2D34               	goto	l4275
  5044  0D33                     u1700:
  5045  0D33                     l4273:
  5046                           
  5047                           ;tasks1.c: 17:  {;tasks1.c: 19:             u8_Counter=0;
  5048  0D33  01B1               	clrf	Task1@u8_Counter
  5049  0D34                     l4275:
  5050                           
  5051                           ;tasks1.c: 22:  if (pushButtonGetStatus(BTN_1))
  5052  0D34  3001               	movlw	1
  5053  0D35  120A  118A  2691  120A  158A  	fcall	_pushButtonGetStatus
  5054  0D3A  3A00               	xorlw	0
  5055  0D3B  1903               	skipnz
  5056  0D3C  2D3E               	goto	u1711
  5057  0D3D  2D3F               	goto	u1710
  5058  0D3E                     u1711:
  5059  0D3E  2D45               	goto	l4279
  5060  0D3F                     u1710:
  5061  0D3F                     l4277:
  5062                           
  5063                           ;tasks1.c: 23:  {;tasks1.c: 24:   u8_Counter1++;
  5064  0D3F  3001               	movlw	1
  5065  0D40  00FF               	movwf	btemp+1
  5066  0D41  087F               	movf	btemp+1,w
  5067  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  5068  0D43  1303               	bcf	3,6	;RP1=0, select bank0
  5069  0D44  07B2               	addwf	Task1@u8_Counter1,f
  5070  0D45                     l4279:
  5071                           
  5072                           ;tasks1.c: 27:  if (u8_Counter1 > 10)
  5073  0D45  300B               	movlw	11
  5074  0D46  1283               	bcf	3,5	;RP0=0, select bank0
  5075  0D47  1303               	bcf	3,6	;RP1=0, select bank0
  5076  0D48  0232               	subwf	Task1@u8_Counter1,w
  5077  0D49  1C03               	skipc
  5078  0D4A  2D4C               	goto	u1721
  5079  0D4B  2D4D               	goto	u1720
  5080  0D4C                     u1721:
  5081  0D4C  2D4E               	goto	l4283
  5082  0D4D                     u1720:
  5083  0D4D                     l4281:
  5084                           
  5085                           ;tasks1.c: 28:  {;tasks1.c: 30:   u8_Counter1=0;
  5086  0D4D  01B2               	clrf	Task1@u8_Counter1
  5087  0D4E                     l4283:
  5088                           
  5089                           ;tasks1.c: 32:         if (pushButtonGetStatus(BTN_2))
  5090  0D4E  3002               	movlw	2
  5091  0D4F  120A  118A  2691  120A  158A  	fcall	_pushButtonGetStatus
  5092  0D54  3A00               	xorlw	0
  5093  0D55  1903               	skipnz
  5094  0D56  2D58               	goto	u1731
  5095  0D57  2D59               	goto	u1730
  5096  0D58                     u1731:
  5097  0D58  2D5F               	goto	l4287
  5098  0D59                     u1730:
  5099  0D59                     l4285:
  5100                           
  5101                           ;tasks1.c: 33:  {;tasks1.c: 34:   u8_Counter2++;
  5102  0D59  3001               	movlw	1
  5103  0D5A  00FF               	movwf	btemp+1
  5104  0D5B  087F               	movf	btemp+1,w
  5105  0D5C  1283               	bcf	3,5	;RP0=0, select bank0
  5106  0D5D  1303               	bcf	3,6	;RP1=0, select bank0
  5107  0D5E  07B0               	addwf	Task1@u8_Counter2,f
  5108  0D5F                     l4287:
  5109                           
  5110                           ;tasks1.c: 36:  if (u8_Counter2 > 10)
  5111  0D5F  300B               	movlw	11
  5112  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  5113  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  5114  0D62  0230               	subwf	Task1@u8_Counter2,w
  5115  0D63  1C03               	skipc
  5116  0D64  2D66               	goto	u1741
  5117  0D65  2D67               	goto	u1740
  5118  0D66                     u1741:
  5119  0D66  2D68               	goto	l721
  5120  0D67                     u1740:
  5121  0D67                     l4289:
  5122                           
  5123                           ;tasks1.c: 37:  {;tasks1.c: 39:             u8_Counter2=0;
  5124  0D67  01B0               	clrf	Task1@u8_Counter2
  5125  0D68                     l721:
  5126  0D68  0008               	return
  5127  0D69                     __end_of_Task1:
  5128                           
  5129                           	psect	text19
  5130  0003                     __ptext19:	
  5131 ;; *************** function _Task3 *****************
  5132 ;; Defined at:
  5133 ;;		line 66 in file "tasks1.c"
  5134 ;; Parameters:    Size  Location     Type
  5135 ;;		None
  5136 ;; Auto vars:     Size  Location     Type
  5137 ;;		None
  5138 ;; Return value:  Size  Location     Type
  5139 ;;                  1    wreg      void 
  5140 ;; Registers used:
  5141 ;;		None
  5142 ;; Tracked objects:
  5143 ;;		On entry : 0/0
  5144 ;;		On exit  : 0/0
  5145 ;;		Unchanged: 0/0
  5146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5147 ;;      Params:         0       0       0       0       0
  5148 ;;      Locals:         0       0       0       0       0
  5149 ;;      Temps:          0       0       0       0       0
  5150 ;;      Totals:         0       0       0       0       0
  5151 ;;Total ram usage:        0 bytes
  5152 ;; Hardware stack levels used:    1
  5153 ;; Hardware stack levels required when called:    5
  5154 ;; This function calls:
  5155 ;;		Nothing
  5156 ;; This function is called by:
  5157 ;;		_system_init
  5158 ;;		_SOS_Run
  5159 ;; This function uses a non-reentrant model
  5160 ;;
  5161                           
  5162                           
  5163                           ;psect for function _Task3
  5164  0003                     _Task3:
  5165  0003                     l735:	
  5166                           ;incstack = 0
  5167                           ; Regs used in _Task3: []
  5168                           
  5169  0003  0008               	return
  5170  0004                     __end_of_Task3:
  5171                           
  5172                           	psect	text20
  5173  0ED1                     __ptext20:	
  5174 ;; *************** function _sevenSegWrite *****************
  5175 ;; Defined at:
  5176 ;;		line 87 in file "seven_segment.c"
  5177 ;; Parameters:    Size  Location     Type
  5178 ;;  u8_number       1    wreg     unsigned char 
  5179 ;; Auto vars:     Size  Location     Type
  5180 ;;  u8_number       1   15[BANK0 ] unsigned char 
  5181 ;;  ret             1   14[BANK0 ] unsigned char 
  5182 ;; Return value:  Size  Location     Type
  5183 ;;                  1    wreg      unsigned char 
  5184 ;; Registers used:
  5185 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5186 ;; Tracked objects:
  5187 ;;		On entry : 0/0
  5188 ;;		On exit  : 0/0
  5189 ;;		Unchanged: 0/0
  5190 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5191 ;;      Params:         0       0       0       0       0
  5192 ;;      Locals:         0       2       0       0       0
  5193 ;;      Temps:          0       2       0       0       0
  5194 ;;      Totals:         0       4       0       0       0
  5195 ;;Total ram usage:        4 bytes
  5196 ;; Hardware stack levels used:    1
  5197 ;; Hardware stack levels required when called:    6
  5198 ;; This function calls:
  5199 ;;		_Timer_Start
  5200 ;;		___awdiv
  5201 ;;		___awmod
  5202 ;; This function is called by:
  5203 ;;		_Task2
  5204 ;; This function uses a non-reentrant model
  5205 ;;
  5206                           
  5207                           
  5208                           ;psect for function _sevenSegWrite
  5209  0ED1                     _sevenSegWrite:
  5210                           
  5211                           ;incstack = 0
  5212 ;; hardware stack exceeded
  5213                           ; Regs used in _sevenSegWrite: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5214                           ;sevenSegWrite@u8_number stored from wreg
  5215  0ED1  1283               	bcf	3,5	;RP0=0, select bank0
  5216  0ED2  1303               	bcf	3,6	;RP1=0, select bank0
  5217  0ED3  00D6               	movwf	sevenSegWrite@u8_number
  5218  0ED4                     l3943:
  5219                           
  5220                           ;seven_segment.c: 87: ERROR_STATUS sevenSegWrite( uint8_t u8_number);seven_segment.c: 88
      +                          : {;seven_segment.c: 89: uint8_t ret=0;
  5221  0ED4  01D5               	clrf	sevenSegWrite@ret
  5222  0ED5                     l3945:
  5223                           
  5224                           ;seven_segment.c: 90: if(u8_number < 99 && u8_number >= 10 ){
  5225  0ED5  3063               	movlw	99
  5226  0ED6  0256               	subwf	sevenSegWrite@u8_number,w
  5227  0ED7  1803               	skipnc
  5228  0ED8  2EDA               	goto	u1431
  5229  0ED9  2EDB               	goto	u1430
  5230  0EDA                     u1431:
  5231  0EDA  2F12               	goto	l3953
  5232  0EDB                     u1430:
  5233  0EDB                     l3947:
  5234  0EDB  300A               	movlw	10
  5235  0EDC  0256               	subwf	sevenSegWrite@u8_number,w
  5236  0EDD  1C03               	skipc
  5237  0EDE  2EE0               	goto	u1441
  5238  0EDF  2EE1               	goto	u1440
  5239  0EE0                     u1441:
  5240  0EE0  2F12               	goto	l3953
  5241  0EE1                     u1440:
  5242  0EE1                     l3949:
  5243                           
  5244                           ;seven_segment.c: 91:  arr_display[0] = (u8_number / 10);
  5245  0EE1  300A               	movlw	10
  5246  0EE2  00CB               	movwf	___awdiv@divisor
  5247  0EE3  3000               	movlw	0
  5248  0EE4  00CC               	movwf	___awdiv@divisor+1
  5249  0EE5  0856               	movf	sevenSegWrite@u8_number,w
  5250  0EE6  00D3               	movwf	??_sevenSegWrite
  5251  0EE7  01D4               	clrf	??_sevenSegWrite+1
  5252  0EE8  0853               	movf	??_sevenSegWrite,w
  5253  0EE9  00CD               	movwf	___awdiv@dividend
  5254  0EEA  0854               	movf	??_sevenSegWrite+1,w
  5255  0EEB  00CE               	movwf	___awdiv@dividend+1
  5256  0EEC  120A  158A  2797  120A  158A  	fcall	___awdiv
  5257  0EF1  1283               	bcf	3,5	;RP0=0, select bank0
  5258  0EF2  1303               	bcf	3,6	;RP1=0, select bank0
  5259  0EF3  084B               	movf	?___awdiv,w
  5260  0EF4  00FF               	movwf	btemp+1
  5261  0EF5  087F               	movf	btemp+1,w
  5262  0EF6  00AA               	movwf	_arr_display
  5263                           
  5264                           ;seven_segment.c: 92:     u8_number%=10;
  5265  0EF7  300A               	movlw	10
  5266  0EF8  00CB               	movwf	___awmod@divisor
  5267  0EF9  3000               	movlw	0
  5268  0EFA  00CC               	movwf	___awmod@divisor+1
  5269  0EFB  0856               	movf	sevenSegWrite@u8_number,w
  5270  0EFC  00D3               	movwf	??_sevenSegWrite
  5271  0EFD  01D4               	clrf	??_sevenSegWrite+1
  5272  0EFE  0853               	movf	??_sevenSegWrite,w
  5273  0EFF  00CD               	movwf	___awmod@dividend
  5274  0F00  0854               	movf	??_sevenSegWrite+1,w
  5275  0F01  00CE               	movwf	___awmod@dividend+1
  5276  0F02  120A  158A  2619  120A  158A  	fcall	___awmod
  5277  0F07  1283               	bcf	3,5	;RP0=0, select bank0
  5278  0F08  1303               	bcf	3,6	;RP1=0, select bank0
  5279  0F09  084B               	movf	?___awmod,w
  5280  0F0A  00FF               	movwf	btemp+1
  5281  0F0B  087F               	movf	btemp+1,w
  5282  0F0C  00D6               	movwf	sevenSegWrite@u8_number
  5283  0F0D                     l3951:
  5284                           
  5285                           ;seven_segment.c: 93:     arr_display[1] = u8_number;
  5286  0F0D  0856               	movf	sevenSegWrite@u8_number,w
  5287  0F0E  00FF               	movwf	btemp+1
  5288  0F0F  087F               	movf	btemp+1,w
  5289  0F10  00AB               	movwf	_arr_display+1
  5290                           
  5291                           ;seven_segment.c: 94: }else if(u8_number < 10)
  5292  0F11  2F1E               	goto	l3961
  5293  0F12                     l3953:
  5294  0F12  300A               	movlw	10
  5295  0F13  0256               	subwf	sevenSegWrite@u8_number,w
  5296  0F14  1803               	skipnc
  5297  0F15  2F17               	goto	u1451
  5298  0F16  2F18               	goto	u1450
  5299  0F17                     u1451:
  5300  0F17  2F1A               	goto	l3959
  5301  0F18                     u1450:
  5302  0F18                     l3955:
  5303                           
  5304                           ;seven_segment.c: 95: {;seven_segment.c: 96: arr_display[0] = 0;
  5305  0F18  01AA               	clrf	_arr_display
  5306  0F19  2F0D               	goto	l3951
  5307  0F1A                     l3959:
  5308                           
  5309                           ;seven_segment.c: 99:     ret += 1;
  5310  0F1A  3001               	movlw	1
  5311  0F1B  00FF               	movwf	btemp+1
  5312  0F1C  087F               	movf	btemp+1,w
  5313  0F1D  07D5               	addwf	sevenSegWrite@ret,f
  5314  0F1E                     l3961:
  5315                           
  5316                           ;seven_segment.c: 101:  ret=Timer_Start(0,100);
  5317  0F1E  3064               	movlw	100
  5318  0F1F  00CB               	movwf	Timer_Start@Timer_Count
  5319  0F20  3000               	movlw	0
  5320  0F21  00CC               	movwf	Timer_Start@Timer_Count+1
  5321  0F22  3000               	movlw	0
  5322  0F23  120A  158A  232D  120A  158A  	fcall	_Timer_Start
  5323  0F28  00FF               	movwf	btemp+1
  5324  0F29  087F               	movf	btemp+1,w
  5325  0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  5326  0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  5327  0F2C  00D5               	movwf	sevenSegWrite@ret
  5328  0F2D                     l3963:
  5329                           
  5330                           ;seven_segment.c: 102: return ret;
  5331  0F2D  0855               	movf	sevenSegWrite@ret,w
  5332  0F2E                     l93:
  5333  0F2E  0008               	return
  5334  0F2F                     __end_of_sevenSegWrite:
  5335                           
  5336                           	psect	text21
  5337  0E19                     __ptext21:	
  5338 ;; *************** function ___awmod *****************
  5339 ;; Defined at:
  5340 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awmod.c"
  5341 ;; Parameters:    Size  Location     Type
  5342 ;;  divisor         2    4[BANK0 ] int 
  5343 ;;  dividend        2    6[BANK0 ] int 
  5344 ;; Auto vars:     Size  Location     Type
  5345 ;;  sign            1    9[BANK0 ] unsigned char 
  5346 ;;  counter         1    8[BANK0 ] unsigned char 
  5347 ;; Return value:  Size  Location     Type
  5348 ;;                  2    4[BANK0 ] int 
  5349 ;; Registers used:
  5350 ;;		wreg, status,2, status,0, btemp+1
  5351 ;; Tracked objects:
  5352 ;;		On entry : 0/0
  5353 ;;		On exit  : 0/0
  5354 ;;		Unchanged: 0/0
  5355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5356 ;;      Params:         0       4       0       0       0
  5357 ;;      Locals:         0       2       0       0       0
  5358 ;;      Temps:          0       0       0       0       0
  5359 ;;      Totals:         0       6       0       0       0
  5360 ;;Total ram usage:        6 bytes
  5361 ;; Hardware stack levels used:    1
  5362 ;; Hardware stack levels required when called:    5
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_sevenSegWrite
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           
  5371                           ;psect for function ___awmod
  5372  0E19                     ___awmod:
  5373  0E19                     l3565:	
  5374                           ;incstack = 0
  5375 ;; hardware stack exceeded
  5376                           ; Regs used in ___awmod: [wreg+status,2+status,0+btemp+1]
  5377                           
  5378  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  5379  0E1A  1303               	bcf	3,6	;RP1=0, select bank0
  5380  0E1B  01D0               	clrf	___awmod@sign
  5381  0E1C                     l3567:
  5382  0E1C  1FCE               	btfss	___awmod@dividend+1,7
  5383  0E1D  2E1F               	goto	u1281
  5384  0E1E  2E20               	goto	u1280
  5385  0E1F                     u1281:
  5386  0E1F  2E27               	goto	l3573
  5387  0E20                     u1280:
  5388  0E20                     l3569:
  5389  0E20  09CD               	comf	___awmod@dividend,f
  5390  0E21  09CE               	comf	___awmod@dividend+1,f
  5391  0E22  0ACD               	incf	___awmod@dividend,f
  5392  0E23  1903               	skipnz
  5393  0E24  0ACE               	incf	___awmod@dividend+1,f
  5394  0E25                     l3571:
  5395  0E25  01D0               	clrf	___awmod@sign
  5396  0E26  0AD0               	incf	___awmod@sign,f
  5397  0E27                     l3573:
  5398  0E27  1FCC               	btfss	___awmod@divisor+1,7
  5399  0E28  2E2A               	goto	u1291
  5400  0E29  2E2B               	goto	u1290
  5401  0E2A                     u1291:
  5402  0E2A  2E30               	goto	l3577
  5403  0E2B                     u1290:
  5404  0E2B                     l3575:
  5405  0E2B  09CB               	comf	___awmod@divisor,f
  5406  0E2C  09CC               	comf	___awmod@divisor+1,f
  5407  0E2D  0ACB               	incf	___awmod@divisor,f
  5408  0E2E  1903               	skipnz
  5409  0E2F  0ACC               	incf	___awmod@divisor+1,f
  5410  0E30                     l3577:
  5411  0E30  084B               	movf	___awmod@divisor,w
  5412  0E31  044C               	iorwf	___awmod@divisor+1,w
  5413  0E32  1903               	btfsc	3,2
  5414  0E33  2E35               	goto	u1301
  5415  0E34  2E36               	goto	u1300
  5416  0E35                     u1301:
  5417  0E35  2E65               	goto	l3595
  5418  0E36                     u1300:
  5419  0E36                     l3579:
  5420  0E36  01CF               	clrf	___awmod@counter
  5421  0E37  0ACF               	incf	___awmod@counter,f
  5422  0E38  2E44               	goto	l3585
  5423  0E39                     l3581:
  5424  0E39  3001               	movlw	1
  5425  0E3A                     u1315:
  5426  0E3A  1003               	clrc
  5427  0E3B  0DCB               	rlf	___awmod@divisor,f
  5428  0E3C  0DCC               	rlf	___awmod@divisor+1,f
  5429  0E3D  3EFF               	addlw	-1
  5430  0E3E  1D03               	skipz
  5431  0E3F  2E3A               	goto	u1315
  5432  0E40                     l3583:
  5433  0E40  3001               	movlw	1
  5434  0E41  00FF               	movwf	btemp+1
  5435  0E42  087F               	movf	btemp+1,w
  5436  0E43  07CF               	addwf	___awmod@counter,f
  5437  0E44                     l3585:
  5438  0E44  1FCC               	btfss	___awmod@divisor+1,7
  5439  0E45  2E47               	goto	u1321
  5440  0E46  2E48               	goto	u1320
  5441  0E47                     u1321:
  5442  0E47  2E39               	goto	l3581
  5443  0E48                     u1320:
  5444  0E48                     l3587:
  5445  0E48  084C               	movf	___awmod@divisor+1,w
  5446  0E49  024E               	subwf	___awmod@dividend+1,w
  5447  0E4A  1D03               	skipz
  5448  0E4B  2E4E               	goto	u1335
  5449  0E4C  084B               	movf	___awmod@divisor,w
  5450  0E4D  024D               	subwf	___awmod@dividend,w
  5451  0E4E                     u1335:
  5452  0E4E  1C03               	skipc
  5453  0E4F  2E51               	goto	u1331
  5454  0E50  2E52               	goto	u1330
  5455  0E51                     u1331:
  5456  0E51  2E58               	goto	l3591
  5457  0E52                     u1330:
  5458  0E52                     l3589:
  5459  0E52  084B               	movf	___awmod@divisor,w
  5460  0E53  02CD               	subwf	___awmod@dividend,f
  5461  0E54  084C               	movf	___awmod@divisor+1,w
  5462  0E55  1C03               	skipc
  5463  0E56  03CE               	decf	___awmod@dividend+1,f
  5464  0E57  02CE               	subwf	___awmod@dividend+1,f
  5465  0E58                     l3591:
  5466  0E58  3001               	movlw	1
  5467  0E59                     u1345:
  5468  0E59  1003               	clrc
  5469  0E5A  0CCC               	rrf	___awmod@divisor+1,f
  5470  0E5B  0CCB               	rrf	___awmod@divisor,f
  5471  0E5C  3EFF               	addlw	-1
  5472  0E5D  1D03               	skipz
  5473  0E5E  2E59               	goto	u1345
  5474  0E5F                     l3593:
  5475  0E5F  3001               	movlw	1
  5476  0E60  02CF               	subwf	___awmod@counter,f
  5477  0E61  1D03               	btfss	3,2
  5478  0E62  2E64               	goto	u1351
  5479  0E63  2E65               	goto	u1350
  5480  0E64                     u1351:
  5481  0E64  2E48               	goto	l3587
  5482  0E65                     u1350:
  5483  0E65                     l3595:
  5484  0E65  0850               	movf	___awmod@sign,w
  5485  0E66  1903               	btfsc	3,2
  5486  0E67  2E69               	goto	u1361
  5487  0E68  2E6A               	goto	u1360
  5488  0E69                     u1361:
  5489  0E69  2E6F               	goto	l3599
  5490  0E6A                     u1360:
  5491  0E6A                     l3597:
  5492  0E6A  09CD               	comf	___awmod@dividend,f
  5493  0E6B  09CE               	comf	___awmod@dividend+1,f
  5494  0E6C  0ACD               	incf	___awmod@dividend,f
  5495  0E6D  1903               	skipnz
  5496  0E6E  0ACE               	incf	___awmod@dividend+1,f
  5497  0E6F                     l3599:
  5498  0E6F  084E               	movf	___awmod@dividend+1,w
  5499  0E70  00CC               	movwf	?___awmod+1
  5500  0E71  084D               	movf	___awmod@dividend,w
  5501  0E72  00CB               	movwf	?___awmod
  5502  0E73                     l987:
  5503  0E73  0008               	return
  5504  0E74                     __end_of___awmod:
  5505                           
  5506                           	psect	text22
  5507  0F97                     __ptext22:	
  5508 ;; *************** function ___awdiv *****************
  5509 ;; Defined at:
  5510 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c90\common\awdiv.c"
  5511 ;; Parameters:    Size  Location     Type
  5512 ;;  divisor         2    4[BANK0 ] int 
  5513 ;;  dividend        2    6[BANK0 ] int 
  5514 ;; Auto vars:     Size  Location     Type
  5515 ;;  quotient        2   10[BANK0 ] int 
  5516 ;;  sign            1    9[BANK0 ] unsigned char 
  5517 ;;  counter         1    8[BANK0 ] unsigned char 
  5518 ;; Return value:  Size  Location     Type
  5519 ;;                  2    4[BANK0 ] int 
  5520 ;; Registers used:
  5521 ;;		wreg, status,2, status,0, btemp+1
  5522 ;; Tracked objects:
  5523 ;;		On entry : 0/0
  5524 ;;		On exit  : 0/0
  5525 ;;		Unchanged: 0/0
  5526 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5527 ;;      Params:         0       4       0       0       0
  5528 ;;      Locals:         0       4       0       0       0
  5529 ;;      Temps:          0       0       0       0       0
  5530 ;;      Totals:         0       8       0       0       0
  5531 ;;Total ram usage:        8 bytes
  5532 ;; Hardware stack levels used:    1
  5533 ;; Hardware stack levels required when called:    5
  5534 ;; This function calls:
  5535 ;;		Nothing
  5536 ;; This function is called by:
  5537 ;;		_sevenSegWrite
  5538 ;; This function uses a non-reentrant model
  5539 ;;
  5540                           
  5541                           
  5542                           ;psect for function ___awdiv
  5543  0F97                     ___awdiv:
  5544  0F97                     l3521:	
  5545                           ;incstack = 0
  5546 ;; hardware stack exceeded
  5547                           ; Regs used in ___awdiv: [wreg+status,2+status,0+btemp+1]
  5548                           
  5549  0F97  1283               	bcf	3,5	;RP0=0, select bank0
  5550  0F98  1303               	bcf	3,6	;RP1=0, select bank0
  5551  0F99  01D0               	clrf	___awdiv@sign
  5552  0F9A                     l3523:
  5553  0F9A  1FCC               	btfss	___awdiv@divisor+1,7
  5554  0F9B  2F9D               	goto	u1181
  5555  0F9C  2F9E               	goto	u1180
  5556  0F9D                     u1181:
  5557  0F9D  2FA5               	goto	l3529
  5558  0F9E                     u1180:
  5559  0F9E                     l3525:
  5560  0F9E  09CB               	comf	___awdiv@divisor,f
  5561  0F9F  09CC               	comf	___awdiv@divisor+1,f
  5562  0FA0  0ACB               	incf	___awdiv@divisor,f
  5563  0FA1  1903               	skipnz
  5564  0FA2  0ACC               	incf	___awdiv@divisor+1,f
  5565  0FA3                     l3527:
  5566  0FA3  01D0               	clrf	___awdiv@sign
  5567  0FA4  0AD0               	incf	___awdiv@sign,f
  5568  0FA5                     l3529:
  5569  0FA5  1FCE               	btfss	___awdiv@dividend+1,7
  5570  0FA6  2FA8               	goto	u1191
  5571  0FA7  2FA9               	goto	u1190
  5572  0FA8                     u1191:
  5573  0FA8  2FB2               	goto	l3535
  5574  0FA9                     u1190:
  5575  0FA9                     l3531:
  5576  0FA9  09CD               	comf	___awdiv@dividend,f
  5577  0FAA  09CE               	comf	___awdiv@dividend+1,f
  5578  0FAB  0ACD               	incf	___awdiv@dividend,f
  5579  0FAC  1903               	skipnz
  5580  0FAD  0ACE               	incf	___awdiv@dividend+1,f
  5581  0FAE                     l3533:
  5582  0FAE  3001               	movlw	1
  5583  0FAF  00FF               	movwf	btemp+1
  5584  0FB0  087F               	movf	btemp+1,w
  5585  0FB1  06D0               	xorwf	___awdiv@sign,f
  5586  0FB2                     l3535:
  5587  0FB2  01D1               	clrf	___awdiv@quotient
  5588  0FB3  01D2               	clrf	___awdiv@quotient+1
  5589  0FB4                     l3537:
  5590  0FB4  084B               	movf	___awdiv@divisor,w
  5591  0FB5  044C               	iorwf	___awdiv@divisor+1,w
  5592  0FB6  1903               	btfsc	3,2
  5593  0FB7  2FB9               	goto	u1201
  5594  0FB8  2FBA               	goto	u1200
  5595  0FB9                     u1201:
  5596  0FB9  2FF1               	goto	l3557
  5597  0FBA                     u1200:
  5598  0FBA                     l3539:
  5599  0FBA  01CF               	clrf	___awdiv@counter
  5600  0FBB  0ACF               	incf	___awdiv@counter,f
  5601  0FBC  2FC8               	goto	l3545
  5602  0FBD                     l3541:
  5603  0FBD  3001               	movlw	1
  5604  0FBE                     u1215:
  5605  0FBE  1003               	clrc
  5606  0FBF  0DCB               	rlf	___awdiv@divisor,f
  5607  0FC0  0DCC               	rlf	___awdiv@divisor+1,f
  5608  0FC1  3EFF               	addlw	-1
  5609  0FC2  1D03               	skipz
  5610  0FC3  2FBE               	goto	u1215
  5611  0FC4                     l3543:
  5612  0FC4  3001               	movlw	1
  5613  0FC5  00FF               	movwf	btemp+1
  5614  0FC6  087F               	movf	btemp+1,w
  5615  0FC7  07CF               	addwf	___awdiv@counter,f
  5616  0FC8                     l3545:
  5617  0FC8  1FCC               	btfss	___awdiv@divisor+1,7
  5618  0FC9  2FCB               	goto	u1221
  5619  0FCA  2FCC               	goto	u1220
  5620  0FCB                     u1221:
  5621  0FCB  2FBD               	goto	l3541
  5622  0FCC                     u1220:
  5623  0FCC                     l3547:
  5624  0FCC  3001               	movlw	1
  5625  0FCD                     u1235:
  5626  0FCD  1003               	clrc
  5627  0FCE  0DD1               	rlf	___awdiv@quotient,f
  5628  0FCF  0DD2               	rlf	___awdiv@quotient+1,f
  5629  0FD0  3EFF               	addlw	-1
  5630  0FD1  1D03               	skipz
  5631  0FD2  2FCD               	goto	u1235
  5632  0FD3  084C               	movf	___awdiv@divisor+1,w
  5633  0FD4  024E               	subwf	___awdiv@dividend+1,w
  5634  0FD5  1D03               	skipz
  5635  0FD6  2FD9               	goto	u1245
  5636  0FD7  084B               	movf	___awdiv@divisor,w
  5637  0FD8  024D               	subwf	___awdiv@dividend,w
  5638  0FD9                     u1245:
  5639  0FD9  1C03               	skipc
  5640  0FDA  2FDC               	goto	u1241
  5641  0FDB  2FDD               	goto	u1240
  5642  0FDC                     u1241:
  5643  0FDC  2FE4               	goto	l3553
  5644  0FDD                     u1240:
  5645  0FDD                     l3549:
  5646  0FDD  084B               	movf	___awdiv@divisor,w
  5647  0FDE  02CD               	subwf	___awdiv@dividend,f
  5648  0FDF  084C               	movf	___awdiv@divisor+1,w
  5649  0FE0  1C03               	skipc
  5650  0FE1  03CE               	decf	___awdiv@dividend+1,f
  5651  0FE2  02CE               	subwf	___awdiv@dividend+1,f
  5652  0FE3                     l3551:
  5653  0FE3  1451               	bsf	___awdiv@quotient,0
  5654  0FE4                     l3553:
  5655  0FE4  3001               	movlw	1
  5656  0FE5                     u1255:
  5657  0FE5  1003               	clrc
  5658  0FE6  0CCC               	rrf	___awdiv@divisor+1,f
  5659  0FE7  0CCB               	rrf	___awdiv@divisor,f
  5660  0FE8  3EFF               	addlw	-1
  5661  0FE9  1D03               	skipz
  5662  0FEA  2FE5               	goto	u1255
  5663  0FEB                     l3555:
  5664  0FEB  3001               	movlw	1
  5665  0FEC  02CF               	subwf	___awdiv@counter,f
  5666  0FED  1D03               	btfss	3,2
  5667  0FEE  2FF0               	goto	u1261
  5668  0FEF  2FF1               	goto	u1260
  5669  0FF0                     u1261:
  5670  0FF0  2FCC               	goto	l3547
  5671  0FF1                     u1260:
  5672  0FF1                     l3557:
  5673  0FF1  0850               	movf	___awdiv@sign,w
  5674  0FF2  1903               	btfsc	3,2
  5675  0FF3  2FF5               	goto	u1271
  5676  0FF4  2FF6               	goto	u1270
  5677  0FF5                     u1271:
  5678  0FF5  2FFB               	goto	l3561
  5679  0FF6                     u1270:
  5680  0FF6                     l3559:
  5681  0FF6  09D1               	comf	___awdiv@quotient,f
  5682  0FF7  09D2               	comf	___awdiv@quotient+1,f
  5683  0FF8  0AD1               	incf	___awdiv@quotient,f
  5684  0FF9  1903               	skipnz
  5685  0FFA  0AD2               	incf	___awdiv@quotient+1,f
  5686  0FFB                     l3561:
  5687  0FFB  0852               	movf	___awdiv@quotient+1,w
  5688  0FFC  00CC               	movwf	?___awdiv+1
  5689  0FFD  0851               	movf	___awdiv@quotient,w
  5690  0FFE  00CB               	movwf	?___awdiv
  5691  0FFF                     l974:
  5692  0FFF  0008               	return
  5693  1000                     __end_of___awdiv:
  5694                           
  5695                           	psect	text23
  5696  0B2D                     __ptext23:	
  5697 ;; *************** function _Timer_Start *****************
  5698 ;; Defined at:
  5699 ;;		line 148 in file "Timer.c"
  5700 ;; Parameters:    Size  Location     Type
  5701 ;;  Timer_CH_NO     1    wreg     unsigned char 
  5702 ;;  Timer_Count     2    4[BANK0 ] unsigned int 
  5703 ;; Auto vars:     Size  Location     Type
  5704 ;;  Timer_CH_NO     1    8[BANK0 ] unsigned char 
  5705 ;;  ret_error       1    9[BANK0 ] unsigned char 
  5706 ;; Return value:  Size  Location     Type
  5707 ;;                  1    wreg      unsigned char 
  5708 ;; Registers used:
  5709 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  5710 ;; Tracked objects:
  5711 ;;		On entry : 0/0
  5712 ;;		On exit  : 0/0
  5713 ;;		Unchanged: 0/0
  5714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5715 ;;      Params:         0       2       0       0       0
  5716 ;;      Locals:         0       2       0       0       0
  5717 ;;      Temps:          0       2       0       0       0
  5718 ;;      Totals:         0       6       0       0       0
  5719 ;;Total ram usage:        6 bytes
  5720 ;; Hardware stack levels used:    1
  5721 ;; Hardware stack levels required when called:    5
  5722 ;; This function calls:
  5723 ;;		Nothing
  5724 ;; This function is called by:
  5725 ;;		_sevenSegWrite
  5726 ;;		_SOS_Init
  5727 ;;		_system_init
  5728 ;; This function uses a non-reentrant model
  5729 ;;
  5730                           
  5731                           
  5732                           ;psect for function _Timer_Start
  5733  0B2D                     _Timer_Start:
  5734                           
  5735                           ;incstack = 0
  5736                           ; Regs used in _Timer_Start: [wreg-fsr0h+status,2+status,0+btemp+1]
  5737                           ;Timer_Start@Timer_CH_NO stored from wreg
  5738  0B2D  1283               	bcf	3,5	;RP0=0, select bank0
  5739  0B2E  1303               	bcf	3,6	;RP1=0, select bank0
  5740  0B2F  00CF               	movwf	Timer_Start@Timer_CH_NO
  5741  0B30                     l3433:
  5742                           
  5743                           ;Timer.c: 148: ERROR_STATUS Timer_Start(uint8_t Timer_CH_NO, uint16_t Timer_Count);Timer
      +                          .c: 149: {;Timer.c: 150:   uint8_t ret_error = 0;
  5744  0B30  01D0               	clrf	Timer_Start@ret_error
  5745                           
  5746                           ;Timer.c: 151:   switch (Timer_CH_NO) {
  5747  0B31  2B4C               	goto	l3447
  5748  0B32                     l3435:
  5749                           
  5750                           ;Timer.c: 155:   *((reg_type8_t)(0x0081)) = Prescaler0;
  5751  0B32  085E               	movf	_Prescaler0,w
  5752  0B33  00FF               	movwf	btemp+1
  5753  0B34  087F               	movf	btemp+1,w
  5754  0B35  1683               	bsf	3,5	;RP0=1, select bank1
  5755  0B36  1303               	bcf	3,6	;RP1=0, select bank1
  5756  0B37  0081               	movwf	1	;volatile
  5757                           
  5758                           ;Timer.c: 161:     break;
  5759  0B38  2B5F               	goto	l3449
  5760  0B39                     l3437:
  5761                           
  5762                           ;Timer.c: 167:     *((reg_type8_t)(0x0010)) = Prescaler1;
  5763  0B39  0834               	movf	_Prescaler1,w
  5764  0B3A  00FF               	movwf	btemp+1
  5765  0B3B  087F               	movf	btemp+1,w
  5766  0B3C  0090               	movwf	16	;volatile
  5767  0B3D                     l3439:
  5768                           
  5769                           ;Timer.c: 168:     *((reg_type8_t)(0x0010)) |=0x01;
  5770  0B3D  1410               	bsf	16,0	;volatile
  5771                           
  5772                           ;Timer.c: 172:     break;
  5773  0B3E  2B5F               	goto	l3449
  5774  0B3F                     l566:	
  5775                           ;Timer.c: 174:     case 2:
  5776                           
  5777                           
  5778                           ;Timer.c: 175:     *((reg_type8_t)(0x0012)) |= 0x04;
  5779  0B3F  1512               	bsf	18,2	;volatile
  5780  0B40                     l3441:
  5781                           
  5782                           ;Timer.c: 176:     *((reg_type8_t)(0x0092)) = Timer_Count;
  5783  0B40  084B               	movf	Timer_Start@Timer_Count,w
  5784  0B41  00FF               	movwf	btemp+1
  5785  0B42  087F               	movf	btemp+1,w
  5786  0B43  1683               	bsf	3,5	;RP0=1, select bank1
  5787  0B44  1303               	bcf	3,6	;RP1=0, select bank1
  5788  0B45  0092               	movwf	18	;volatile
  5789                           
  5790                           ;Timer.c: 177:     break;
  5791  0B46  2B5F               	goto	l3449
  5792  0B47                     l3443:
  5793                           
  5794                           ;Timer.c: 179:     ret_error += 1 +26;
  5795  0B47  301B               	movlw	27
  5796  0B48  00FF               	movwf	btemp+1
  5797  0B49  087F               	movf	btemp+1,w
  5798  0B4A  07D0               	addwf	Timer_Start@ret_error,f
  5799                           
  5800                           ;Timer.c: 180:     break;
  5801  0B4B  2B5F               	goto	l3449
  5802  0B4C                     l3447:
  5803  0B4C  084F               	movf	Timer_Start@Timer_CH_NO,w
  5804  0B4D  00CD               	movwf	??_Timer_Start
  5805  0B4E  01CE               	clrf	??_Timer_Start+1
  5806                           
  5807                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  5808                           ; Switch size 1, requested type "simple"
  5809                           ; Number of cases is 1, Range of values is 0 to 0
  5810                           ; switch strategies available:
  5811                           ; Name         Instructions Cycles
  5812                           ; simple_byte            4     3 (average)
  5813                           ; direct_byte           11     8 (fixed)
  5814                           ; jumptable            260     6 (fixed)
  5815                           ;	Chosen strategy is simple_byte
  5816  0B4F  084E               	movf	??_Timer_Start+1,w
  5817  0B50  3A00               	xorlw	0	; case 0
  5818  0B51  1903               	skipnz
  5819  0B52  2B54               	goto	l6453
  5820  0B53  2B47               	goto	l3443
  5821  0B54                     l6453:
  5822                           
  5823                           ; Switch size 1, requested type "simple"
  5824                           ; Number of cases is 3, Range of values is 0 to 2
  5825                           ; switch strategies available:
  5826                           ; Name         Instructions Cycles
  5827                           ; simple_byte           10     6 (average)
  5828                           ; direct_byte           17     8 (fixed)
  5829                           ; jumptable            260     6 (fixed)
  5830                           ;	Chosen strategy is simple_byte
  5831  0B54  084D               	movf	??_Timer_Start,w
  5832  0B55  3A00               	xorlw	0	; case 0
  5833  0B56  1903               	skipnz
  5834  0B57  2B32               	goto	l3435
  5835  0B58  3A01               	xorlw	1	; case 1
  5836  0B59  1903               	skipnz
  5837  0B5A  2B39               	goto	l3437
  5838  0B5B  3A03               	xorlw	3	; case 2
  5839  0B5C  1903               	skipnz
  5840  0B5D  2B3F               	goto	l566
  5841  0B5E  2B47               	goto	l3443
  5842  0B5F                     l3449:
  5843                           
  5844                           ;Timer.c: 184:   return ret_error;
  5845  0B5F  1283               	bcf	3,5	;RP0=0, select bank0
  5846  0B60  0850               	movf	Timer_Start@ret_error,w
  5847  0B61                     l568:
  5848  0B61  0008               	return
  5849  0B62                     __end_of_Timer_Start:
  5850                           
  5851                           	psect	text24
  5852  0AC6                     __ptext24:	
  5853 ;; *************** function _EEPROM_Write *****************
  5854 ;; Defined at:
  5855 ;;		line 72 in file "i2c_EEPROM.c"
  5856 ;; Parameters:    Size  Location     Type
  5857 ;;  add             2    5[BANK0 ] unsigned int 
  5858 ;;  data            1    7[BANK0 ] unsigned char 
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;		None
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5870 ;;      Params:         0       3       0       0       0
  5871 ;;      Locals:         0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0
  5873 ;;      Totals:         0       3       0       0       0
  5874 ;;Total ram usage:        3 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    7
  5877 ;; This function calls:
  5878 ;;		_I2C_Master_RepeatedStart
  5879 ;;		_I2C_Master_Start
  5880 ;;		_I2C_Master_Stop
  5881 ;;		_I2C_Master_Write
  5882 ;; This function is called by:
  5883 ;;		_Task2
  5884 ;;		_nvm_Write
  5885 ;; This function uses a non-reentrant model
  5886 ;;
  5887                           
  5888                           
  5889                           ;psect for function _EEPROM_Write
  5890  0AC6                     _EEPROM_Write:
  5891  0AC6                     l4027:	
  5892                           ;incstack = 0
  5893 ;; hardware stack exceeded
  5894                           ; Regs used in _EEPROM_Write: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5895                           
  5896                           
  5897                           ;i2c_EEPROM.c: 72: void EEPROM_Write(unsigned int add, unsigned char data);i2c_EEPROM.c:
      +                           73: {;i2c_EEPROM.c: 74:   I2C_Master_Start();
  5898  0AC6  120A  158A  2158  120A  158A  	fcall	_I2C_Master_Start
  5899  0ACB                     l4029:
  5900                           
  5901                           ;i2c_EEPROM.c: 76:   if(I2C_Master_Write(0xA0))
  5902  0ACB  30A0               	movlw	160
  5903  0ACC  120A  158A  21D3  120A  158A  	fcall	_I2C_Master_Write
  5904  0AD1  3A00               	xorlw	0
  5905  0AD2  1903               	skipnz
  5906  0AD3  2AD5               	goto	u1521
  5907  0AD4  2AD6               	goto	u1520
  5908  0AD5                     u1521:
  5909  0AD5  2ADB               	goto	l4033
  5910  0AD6                     u1520:
  5911  0AD6                     l4031:
  5912                           
  5913                           ;i2c_EEPROM.c: 77:     I2C_Master_RepeatedStart();
  5914  0AD6  120A  158A  214A  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5915  0ADB                     l4033:
  5916                           
  5917                           ;i2c_EEPROM.c: 79:   I2C_Master_Write(add>>8);
  5918  0ADB  1283               	bcf	3,5	;RP0=0, select bank0
  5919  0ADC  1303               	bcf	3,6	;RP1=0, select bank0
  5920  0ADD  084D               	movf	EEPROM_Write@add+1,w
  5921  0ADE  120A  158A  21D3  120A  158A  	fcall	_I2C_Master_Write
  5922  0AE3                     l4035:
  5923                           
  5924                           ;i2c_EEPROM.c: 80:   I2C_Master_Write((unsigned char)add);
  5925  0AE3  1283               	bcf	3,5	;RP0=0, select bank0
  5926  0AE4  1303               	bcf	3,6	;RP1=0, select bank0
  5927  0AE5  084C               	movf	EEPROM_Write@add,w
  5928  0AE6  120A  158A  21D3  120A  158A  	fcall	_I2C_Master_Write
  5929  0AEB                     l4037:
  5930                           
  5931                           ;i2c_EEPROM.c: 81:   I2C_Master_Write(data);
  5932  0AEB  1283               	bcf	3,5	;RP0=0, select bank0
  5933  0AEC  1303               	bcf	3,6	;RP1=0, select bank0
  5934  0AED  084E               	movf	EEPROM_Write@data,w
  5935  0AEE  120A  158A  21D3  120A  158A  	fcall	_I2C_Master_Write
  5936  0AF3                     l4039:
  5937                           
  5938                           ;i2c_EEPROM.c: 82:   I2C_Master_Stop();
  5939  0AF3  120A  158A  2166  120A  158A  	fcall	_I2C_Master_Stop
  5940  0AF8                     l278:
  5941  0AF8  0008               	return
  5942  0AF9                     __end_of_EEPROM_Write:
  5943                           
  5944                           	psect	text25
  5945  0BD6                     __ptext25:	
  5946 ;; *************** function _EEPROM_Read *****************
  5947 ;; Defined at:
  5948 ;;		line 100 in file "i2c_EEPROM.c"
  5949 ;; Parameters:    Size  Location     Type
  5950 ;;  add             2    5[BANK0 ] unsigned int 
  5951 ;; Auto vars:     Size  Location     Type
  5952 ;;  Data            1    7[BANK0 ] unsigned char 
  5953 ;; Return value:  Size  Location     Type
  5954 ;;                  1    wreg      unsigned char 
  5955 ;; Registers used:
  5956 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  5957 ;; Tracked objects:
  5958 ;;		On entry : 0/0
  5959 ;;		On exit  : 0/0
  5960 ;;		Unchanged: 0/0
  5961 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  5962 ;;      Params:         0       2       0       0       0
  5963 ;;      Locals:         0       1       0       0       0
  5964 ;;      Temps:          0       0       0       0       0
  5965 ;;      Totals:         0       3       0       0       0
  5966 ;;Total ram usage:        3 bytes
  5967 ;; Hardware stack levels used:    1
  5968 ;; Hardware stack levels required when called:    7
  5969 ;; This function calls:
  5970 ;;		_I2C_Master_RepeatedStart
  5971 ;;		_I2C_Master_Start
  5972 ;;		_I2C_Master_Stop
  5973 ;;		_I2C_Master_Write
  5974 ;;		_I2C_NACK
  5975 ;;		_I2C_Read_Byte
  5976 ;; This function is called by:
  5977 ;;		_Task2
  5978 ;;		_nvm_Read
  5979 ;; This function uses a non-reentrant model
  5980 ;;
  5981                           
  5982                           
  5983                           ;psect for function _EEPROM_Read
  5984  0BD6                     _EEPROM_Read:
  5985  0BD6                     l4041:	
  5986                           ;incstack = 0
  5987 ;; hardware stack exceeded
  5988                           ; Regs used in _EEPROM_Read: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  5989                           
  5990                           
  5991                           ;i2c_EEPROM.c: 100: unsigned char EEPROM_Read(unsigned int add);i2c_EEPROM.c: 101: {;i2c
      +                          _EEPROM.c: 102:   unsigned char Data;;i2c_EEPROM.c: 103:   I2C_Master_Start();
  5992  0BD6  120A  158A  2158  120A  158A  	fcall	_I2C_Master_Start
  5993                           
  5994                           ;i2c_EEPROM.c: 106:     I2C_Master_RepeatedStart();
  5995  0BDB  120A  158A  214A  120A  158A  	fcall	_I2C_Master_RepeatedStart
  5996  0BE0                     l4043:
  5997                           
  5998                           ;i2c_EEPROM.c: 107:   I2C_Master_Write(add>>8);
  5999  0BE0  1283               	bcf	3,5	;RP0=0, select bank0
  6000  0BE1  1303               	bcf	3,6	;RP1=0, select bank0
  6001  0BE2  084D               	movf	EEPROM_Read@add+1,w
  6002  0BE3  120A  158A  21D3  120A  158A  	fcall	_I2C_Master_Write
  6003  0BE8                     l4045:
  6004                           
  6005                           ;i2c_EEPROM.c: 108:   I2C_Master_Write((unsigned char)add);
  6006  0BE8  1283               	bcf	3,5	;RP0=0, select bank0
  6007  0BE9  1303               	bcf	3,6	;RP1=0, select bank0
  6008  0BEA  084C               	movf	EEPROM_Read@add,w
  6009  0BEB  120A  158A  21D3  120A  158A  	fcall	_I2C_Master_Write
  6010                           
  6011                           ;i2c_EEPROM.c: 109:   I2C_Master_RepeatedStart();
  6012  0BF0  120A  158A  214A  120A  158A  	fcall	_I2C_Master_RepeatedStart
  6013  0BF5                     l4047:
  6014                           
  6015                           ;i2c_EEPROM.c: 110:   I2C_Master_Write(0xA1);
  6016  0BF5  30A1               	movlw	161
  6017  0BF6  120A  158A  21D3  120A  158A  	fcall	_I2C_Master_Write
  6018  0BFB                     l4049:
  6019                           
  6020                           ;i2c_EEPROM.c: 111:   Data = I2C_Read_Byte();
  6021  0BFB  120A  158A  21EA  120A  158A  	fcall	_I2C_Read_Byte
  6022  0C00  00FF               	movwf	btemp+1
  6023  0C01  087F               	movf	btemp+1,w
  6024  0C02  1283               	bcf	3,5	;RP0=0, select bank0
  6025  0C03  1303               	bcf	3,6	;RP1=0, select bank0
  6026  0C04  00CE               	movwf	EEPROM_Read@Data
  6027                           
  6028                           ;i2c_EEPROM.c: 112:   I2C_NACK();
  6029  0C05  120A  158A  213E  120A  158A  	fcall	_I2C_NACK
  6030  0C0A                     l4051:
  6031                           
  6032                           ;i2c_EEPROM.c: 113:   I2C_Master_Stop();
  6033  0C0A  120A  158A  2166  120A  158A  	fcall	_I2C_Master_Stop
  6034  0C0F                     l4053:
  6035                           
  6036                           ;i2c_EEPROM.c: 114:   return Data;
  6037  0C0F  1283               	bcf	3,5	;RP0=0, select bank0
  6038  0C10  1303               	bcf	3,6	;RP1=0, select bank0
  6039  0C11  084E               	movf	EEPROM_Read@Data,w
  6040  0C12                     l290:
  6041  0C12  0008               	return
  6042  0C13                     __end_of_EEPROM_Read:
  6043                           
  6044                           	psect	text26
  6045  09EA                     __ptext26:	
  6046 ;; *************** function _I2C_Read_Byte *****************
  6047 ;; Defined at:
  6048 ;;		line 45 in file "i2c_EEPROM.c"
  6049 ;; Parameters:    Size  Location     Type
  6050 ;;		None
  6051 ;; Auto vars:     Size  Location     Type
  6052 ;;		None
  6053 ;; Return value:  Size  Location     Type
  6054 ;;                  1    wreg      unsigned char 
  6055 ;; Registers used:
  6056 ;;		wreg, status,2, status,0, pclath, cstack
  6057 ;; Tracked objects:
  6058 ;;		On entry : 0/0
  6059 ;;		On exit  : 0/0
  6060 ;;		Unchanged: 0/0
  6061 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6062 ;;      Params:         0       0       0       0       0
  6063 ;;      Locals:         0       0       0       0       0
  6064 ;;      Temps:          0       0       0       0       0
  6065 ;;      Totals:         0       0       0       0       0
  6066 ;;Total ram usage:        0 bytes
  6067 ;; Hardware stack levels used:    1
  6068 ;; Hardware stack levels required when called:    6
  6069 ;; This function calls:
  6070 ;;		_I2C_Master_Wait
  6071 ;; This function is called by:
  6072 ;;		_EEPROM_Read
  6073 ;;		_EEPROM_Read_Page
  6074 ;; This function uses a non-reentrant model
  6075 ;;
  6076                           
  6077                           
  6078                           ;psect for function _I2C_Read_Byte
  6079  09EA                     _I2C_Read_Byte:
  6080  09EA                     l3505:	
  6081                           ;incstack = 0
  6082 ;; hardware stack exceeded
  6083                           ; Regs used in _I2C_Read_Byte: [wreg+status,2+status,0+pclath+cstack]
  6084                           
  6085                           
  6086                           ;i2c_EEPROM.c: 48:   I2C_Master_Wait();
  6087  09EA  120A  118A  27F3  120A  158A  	fcall	_I2C_Master_Wait
  6088  09EF                     l3507:
  6089                           
  6090                           ;i2c_EEPROM.c: 49:   RCEN = 1;
  6091  09EF  1683               	bsf	3,5	;RP0=1, select bank1
  6092  09F0  1303               	bcf	3,6	;RP1=0, select bank1
  6093  09F1  1591               	bsf	17,3	;volatile
  6094  09F2                     l265:	
  6095                           ;i2c_EEPROM.c: 50:   while(!SSPIF);
  6096                           
  6097  09F2  1283               	bcf	3,5	;RP0=0, select bank0
  6098  09F3  1D8C               	btfss	12,3	;volatile
  6099  09F4  29F6               	goto	u1171
  6100  09F5  29F7               	goto	u1170
  6101  09F6                     u1171:
  6102  09F6  29F2               	goto	l265
  6103  09F7                     u1170:
  6104  09F7                     l267:
  6105                           
  6106                           ;i2c_EEPROM.c: 51:   SSPIF = 0;
  6107  09F7  118C               	bcf	12,3	;volatile
  6108  09F8                     l3509:
  6109                           
  6110                           ;i2c_EEPROM.c: 52:   I2C_Master_Wait();
  6111  09F8  120A  118A  27F3  120A  158A  	fcall	_I2C_Master_Wait
  6112  09FD                     l3511:
  6113                           
  6114                           ;i2c_EEPROM.c: 53:   return SSPBUF;
  6115  09FD  1283               	bcf	3,5	;RP0=0, select bank0
  6116  09FE  1303               	bcf	3,6	;RP1=0, select bank0
  6117  09FF  0813               	movf	19,w	;volatile
  6118  0A00                     l268:
  6119  0A00  0008               	return
  6120  0A01                     __end_of_I2C_Read_Byte:
  6121                           
  6122                           	psect	text27
  6123  093E                     __ptext27:	
  6124 ;; *************** function _I2C_NACK *****************
  6125 ;; Defined at:
  6126 ;;		line 61 in file "i2c_EEPROM.c"
  6127 ;; Parameters:    Size  Location     Type
  6128 ;;		None
  6129 ;; Auto vars:     Size  Location     Type
  6130 ;;		None
  6131 ;; Return value:  Size  Location     Type
  6132 ;;                  1    wreg      void 
  6133 ;; Registers used:
  6134 ;;		wreg, status,2, status,0, pclath, cstack
  6135 ;; Tracked objects:
  6136 ;;		On entry : 0/0
  6137 ;;		On exit  : 0/0
  6138 ;;		Unchanged: 0/0
  6139 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6140 ;;      Params:         0       0       0       0       0
  6141 ;;      Locals:         0       0       0       0       0
  6142 ;;      Temps:          0       0       0       0       0
  6143 ;;      Totals:         0       0       0       0       0
  6144 ;;Total ram usage:        0 bytes
  6145 ;; Hardware stack levels used:    1
  6146 ;; Hardware stack levels required when called:    6
  6147 ;; This function calls:
  6148 ;;		_I2C_Master_Wait
  6149 ;; This function is called by:
  6150 ;;		_EEPROM_Read
  6151 ;; This function uses a non-reentrant model
  6152 ;;
  6153                           
  6154                           
  6155                           ;psect for function _I2C_NACK
  6156  093E                     _I2C_NACK:
  6157  093E                     l3515:	
  6158                           ;incstack = 0
  6159 ;; hardware stack exceeded
  6160                           ; Regs used in _I2C_NACK: [wreg+status,2+status,0+pclath+cstack]
  6161                           
  6162                           
  6163                           ;i2c_EEPROM.c: 63:   ACKDT = 1;
  6164  093E  1683               	bsf	3,5	;RP0=1, select bank1
  6165  093F  1303               	bcf	3,6	;RP1=0, select bank1
  6166  0940  1691               	bsf	17,5	;volatile
  6167  0941                     l3517:
  6168                           
  6169                           ;i2c_EEPROM.c: 64:   I2C_Master_Wait();
  6170  0941  120A  118A  27F3  120A  158A  	fcall	_I2C_Master_Wait
  6171  0946                     l3519:
  6172                           
  6173                           ;i2c_EEPROM.c: 65:   ACKEN = 1;
  6174  0946  1683               	bsf	3,5	;RP0=1, select bank1
  6175  0947  1303               	bcf	3,6	;RP1=0, select bank1
  6176  0948  1611               	bsf	17,4	;volatile
  6177  0949                     l274:
  6178  0949  0008               	return
  6179  094A                     __end_of_I2C_NACK:
  6180                           
  6181                           	psect	text28
  6182  09D3                     __ptext28:	
  6183 ;; *************** function _I2C_Master_Write *****************
  6184 ;; Defined at:
  6185 ;;		line 37 in file "i2c_EEPROM.c"
  6186 ;; Parameters:    Size  Location     Type
  6187 ;;  data            1    wreg     unsigned char 
  6188 ;; Auto vars:     Size  Location     Type
  6189 ;;  data            1    4[BANK0 ] unsigned char 
  6190 ;; Return value:  Size  Location     Type
  6191 ;;                  1    wreg      unsigned char 
  6192 ;; Registers used:
  6193 ;;		wreg, status,2, status,0, pclath, cstack
  6194 ;; Tracked objects:
  6195 ;;		On entry : 0/0
  6196 ;;		On exit  : 0/0
  6197 ;;		Unchanged: 0/0
  6198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6199 ;;      Params:         0       0       0       0       0
  6200 ;;      Locals:         0       1       0       0       0
  6201 ;;      Temps:          0       0       0       0       0
  6202 ;;      Totals:         0       1       0       0       0
  6203 ;;Total ram usage:        1 bytes
  6204 ;; Hardware stack levels used:    1
  6205 ;; Hardware stack levels required when called:    6
  6206 ;; This function calls:
  6207 ;;		_I2C_Master_Wait
  6208 ;; This function is called by:
  6209 ;;		_EEPROM_Write
  6210 ;;		_EEPROM_Read
  6211 ;;		_EEPROM_Write_Page
  6212 ;;		_EEPROM_Read_Page
  6213 ;; This function uses a non-reentrant model
  6214 ;;
  6215                           
  6216                           
  6217                           ;psect for function _I2C_Master_Write
  6218  09D3                     _I2C_Master_Write:
  6219                           
  6220                           ;incstack = 0
  6221 ;; hardware stack exceeded
  6222                           ; Regs used in _I2C_Master_Write: [wreg+status,2+status,0+pclath+cstack]
  6223                           ;I2C_Master_Write@data stored from wreg
  6224  09D3  1283               	bcf	3,5	;RP0=0, select bank0
  6225  09D4  1303               	bcf	3,6	;RP1=0, select bank0
  6226  09D5  00CB               	movwf	I2C_Master_Write@data
  6227  09D6                     l3497:
  6228                           
  6229                           ;i2c_EEPROM.c: 37: unsigned char I2C_Master_Write(unsigned char data);i2c_EEPROM.c: 38: 
      +                          {;i2c_EEPROM.c: 39:   I2C_Master_Wait();
  6230  09D6  120A  118A  27F3  120A  158A  	fcall	_I2C_Master_Wait
  6231  09DB                     l3499:
  6232                           
  6233                           ;i2c_EEPROM.c: 40:   SSPBUF = data;
  6234  09DB  1283               	bcf	3,5	;RP0=0, select bank0
  6235  09DC  1303               	bcf	3,6	;RP1=0, select bank0
  6236  09DD  084B               	movf	I2C_Master_Write@data,w
  6237  09DE  0093               	movwf	19	;volatile
  6238  09DF                     l259:	
  6239                           ;i2c_EEPROM.c: 41:   while(!SSPIF);
  6240                           
  6241  09DF  1D8C               	btfss	12,3	;volatile
  6242  09E0  29E2               	goto	u1161
  6243  09E1  29E3               	goto	u1160
  6244  09E2                     u1161:
  6245  09E2  29DF               	goto	l259
  6246  09E3                     u1160:
  6247  09E3                     l261:
  6248                           
  6249                           ;i2c_EEPROM.c: 42:   SSPIF = 0;
  6250  09E3  118C               	bcf	12,3	;volatile
  6251  09E4                     l3501:
  6252                           
  6253                           ;i2c_EEPROM.c: 43:   return ACKSTAT;
  6254  09E4  3000               	movlw	0
  6255  09E5  1683               	bsf	3,5	;RP0=1, select bank1
  6256  09E6  1303               	bcf	3,6	;RP1=0, select bank1
  6257  09E7  1B11               	btfsc	17,6	;volatile
  6258  09E8  3001               	movlw	1
  6259  09E9                     l262:
  6260  09E9  0008               	return
  6261  09EA                     __end_of_I2C_Master_Write:
  6262                           
  6263                           	psect	text29
  6264  0966                     __ptext29:	
  6265 ;; *************** function _I2C_Master_Stop *****************
  6266 ;; Defined at:
  6267 ;;		line 31 in file "i2c_EEPROM.c"
  6268 ;; Parameters:    Size  Location     Type
  6269 ;;		None
  6270 ;; Auto vars:     Size  Location     Type
  6271 ;;		None
  6272 ;; Return value:  Size  Location     Type
  6273 ;;                  1    wreg      void 
  6274 ;; Registers used:
  6275 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6276 ;; Tracked objects:
  6277 ;;		On entry : 0/0
  6278 ;;		On exit  : 0/0
  6279 ;;		Unchanged: 0/0
  6280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6281 ;;      Params:         0       0       0       0       0
  6282 ;;      Locals:         0       0       0       0       0
  6283 ;;      Temps:          0       0       0       0       0
  6284 ;;      Totals:         0       0       0       0       0
  6285 ;;Total ram usage:        0 bytes
  6286 ;; Hardware stack levels used:    1
  6287 ;; Hardware stack levels required when called:    6
  6288 ;; This function calls:
  6289 ;;		_I2C_Master_Wait
  6290 ;; This function is called by:
  6291 ;;		_EEPROM_Write
  6292 ;;		_EEPROM_Read
  6293 ;;		_EEPROM_Write_Page
  6294 ;;		_EEPROM_Read_Page
  6295 ;; This function uses a non-reentrant model
  6296 ;;
  6297                           
  6298                           
  6299                           ;psect for function _I2C_Master_Stop
  6300  0966                     _I2C_Master_Stop:
  6301  0966                     l3493:	
  6302                           ;incstack = 0
  6303 ;; hardware stack exceeded
  6304                           ; Regs used in _I2C_Master_Stop: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6305                           
  6306                           
  6307                           ;i2c_EEPROM.c: 33:   I2C_Master_Wait();
  6308  0966  120A  118A  27F3  120A  158A  	fcall	_I2C_Master_Wait
  6309  096B                     l3495:
  6310                           
  6311                           ;i2c_EEPROM.c: 34:   SSPCON2|=PEN ;
  6312  096B  3000               	movlw	0
  6313  096C  1683               	bsf	3,5	;RP0=1, select bank1
  6314  096D  1303               	bcf	3,6	;RP1=0, select bank1
  6315  096E  1911               	btfsc	17,2	;volatile
  6316  096F  3001               	movlw	1
  6317  0970  00FF               	movwf	btemp+1
  6318  0971  087F               	movf	btemp+1,w
  6319  0972  0491               	iorwf	17,f	;volatile
  6320  0973                     l256:
  6321  0973  0008               	return
  6322  0974                     __end_of_I2C_Master_Stop:
  6323                           
  6324                           	psect	text30
  6325  0958                     __ptext30:	
  6326 ;; *************** function _I2C_Master_Start *****************
  6327 ;; Defined at:
  6328 ;;		line 21 in file "i2c_EEPROM.c"
  6329 ;; Parameters:    Size  Location     Type
  6330 ;;		None
  6331 ;; Auto vars:     Size  Location     Type
  6332 ;;		None
  6333 ;; Return value:  Size  Location     Type
  6334 ;;                  1    wreg      void 
  6335 ;; Registers used:
  6336 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6337 ;; Tracked objects:
  6338 ;;		On entry : 0/0
  6339 ;;		On exit  : 0/0
  6340 ;;		Unchanged: 0/0
  6341 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6342 ;;      Params:         0       0       0       0       0
  6343 ;;      Locals:         0       0       0       0       0
  6344 ;;      Temps:          0       0       0       0       0
  6345 ;;      Totals:         0       0       0       0       0
  6346 ;;Total ram usage:        0 bytes
  6347 ;; Hardware stack levels used:    1
  6348 ;; Hardware stack levels required when called:    6
  6349 ;; This function calls:
  6350 ;;		_I2C_Master_Wait
  6351 ;; This function is called by:
  6352 ;;		_EEPROM_Write
  6353 ;;		_EEPROM_Read
  6354 ;;		_EEPROM_Write_Page
  6355 ;;		_EEPROM_Read_Page
  6356 ;; This function uses a non-reentrant model
  6357 ;;
  6358                           
  6359                           
  6360                           ;psect for function _I2C_Master_Start
  6361  0958                     _I2C_Master_Start:
  6362  0958                     l3485:	
  6363                           ;incstack = 0
  6364 ;; hardware stack exceeded
  6365                           ; Regs used in _I2C_Master_Start: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6366                           
  6367                           
  6368                           ;i2c_EEPROM.c: 23:   I2C_Master_Wait();
  6369  0958  120A  118A  27F3  120A  158A  	fcall	_I2C_Master_Wait
  6370  095D                     l3487:
  6371                           
  6372                           ;i2c_EEPROM.c: 24:   SSPCON2|=SEN ;
  6373  095D  3000               	movlw	0
  6374  095E  1683               	bsf	3,5	;RP0=1, select bank1
  6375  095F  1303               	bcf	3,6	;RP1=0, select bank1
  6376  0960  1811               	btfsc	17,0	;volatile
  6377  0961  3001               	movlw	1
  6378  0962  00FF               	movwf	btemp+1
  6379  0963  087F               	movf	btemp+1,w
  6380  0964  0491               	iorwf	17,f	;volatile
  6381  0965                     l250:
  6382  0965  0008               	return
  6383  0966                     __end_of_I2C_Master_Start:
  6384                           
  6385                           	psect	text31
  6386  094A                     __ptext31:	
  6387 ;; *************** function _I2C_Master_RepeatedStart *****************
  6388 ;; Defined at:
  6389 ;;		line 26 in file "i2c_EEPROM.c"
  6390 ;; Parameters:    Size  Location     Type
  6391 ;;		None
  6392 ;; Auto vars:     Size  Location     Type
  6393 ;;		None
  6394 ;; Return value:  Size  Location     Type
  6395 ;;                  1    wreg      void 
  6396 ;; Registers used:
  6397 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6398 ;; Tracked objects:
  6399 ;;		On entry : 0/0
  6400 ;;		On exit  : 0/0
  6401 ;;		Unchanged: 0/0
  6402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6403 ;;      Params:         0       0       0       0       0
  6404 ;;      Locals:         0       0       0       0       0
  6405 ;;      Temps:          0       0       0       0       0
  6406 ;;      Totals:         0       0       0       0       0
  6407 ;;Total ram usage:        0 bytes
  6408 ;; Hardware stack levels used:    1
  6409 ;; Hardware stack levels required when called:    6
  6410 ;; This function calls:
  6411 ;;		_I2C_Master_Wait
  6412 ;; This function is called by:
  6413 ;;		_EEPROM_Write
  6414 ;;		_EEPROM_Read
  6415 ;;		_EEPROM_Write_Page
  6416 ;;		_EEPROM_Read_Page
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           
  6421                           ;psect for function _I2C_Master_RepeatedStart
  6422  094A                     _I2C_Master_RepeatedStart:
  6423  094A                     l3489:	
  6424                           ;incstack = 0
  6425 ;; hardware stack exceeded
  6426                           ; Regs used in _I2C_Master_RepeatedStart: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6427                           
  6428                           
  6429                           ;i2c_EEPROM.c: 28:   I2C_Master_Wait();
  6430  094A  120A  118A  27F3  120A  158A  	fcall	_I2C_Master_Wait
  6431  094F                     l3491:
  6432                           
  6433                           ;i2c_EEPROM.c: 29:   SSPCON2 |=RSEN ;
  6434  094F  3000               	movlw	0
  6435  0950  1683               	bsf	3,5	;RP0=1, select bank1
  6436  0951  1303               	bcf	3,6	;RP1=0, select bank1
  6437  0952  1891               	btfsc	17,1	;volatile
  6438  0953  3001               	movlw	1
  6439  0954  00FF               	movwf	btemp+1
  6440  0955  087F               	movf	btemp+1,w
  6441  0956  0491               	iorwf	17,f	;volatile
  6442  0957                     l253:
  6443  0957  0008               	return
  6444  0958                     __end_of_I2C_Master_RepeatedStart:
  6445                           
  6446                           	psect	text32
  6447  07F3                     __ptext32:	
  6448 ;; *************** function _I2C_Master_Wait *****************
  6449 ;; Defined at:
  6450 ;;		line 17 in file "i2c_EEPROM.c"
  6451 ;; Parameters:    Size  Location     Type
  6452 ;;		None
  6453 ;; Auto vars:     Size  Location     Type
  6454 ;;		None
  6455 ;; Return value:  Size  Location     Type
  6456 ;;                  1    wreg      void 
  6457 ;; Registers used:
  6458 ;;		wreg, status,2
  6459 ;; Tracked objects:
  6460 ;;		On entry : 0/0
  6461 ;;		On exit  : 0/0
  6462 ;;		Unchanged: 0/0
  6463 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6464 ;;      Params:         0       0       0       0       0
  6465 ;;      Locals:         0       0       0       0       0
  6466 ;;      Temps:          0       0       0       0       0
  6467 ;;      Totals:         0       0       0       0       0
  6468 ;;Total ram usage:        0 bytes
  6469 ;; Hardware stack levels used:    1
  6470 ;; Hardware stack levels required when called:    5
  6471 ;; This function calls:
  6472 ;;		Nothing
  6473 ;; This function is called by:
  6474 ;;		_I2C_Master_Start
  6475 ;;		_I2C_Master_RepeatedStart
  6476 ;;		_I2C_Master_Stop
  6477 ;;		_I2C_Master_Write
  6478 ;;		_I2C_Read_Byte
  6479 ;;		_I2C_NACK
  6480 ;;		_I2C_ACK
  6481 ;; This function uses a non-reentrant model
  6482 ;;
  6483                           
  6484                           
  6485                           ;psect for function _I2C_Master_Wait
  6486  07F3                     _I2C_Master_Wait:
  6487  07F3                     l3265:	
  6488                           ;incstack = 0
  6489 ;; hardware stack exceeded
  6490                           ; Regs used in _I2C_Master_Wait: [wreg+status,2]
  6491                           
  6492  07F3                     l244:	
  6493                           ;i2c_EEPROM.c: 19:   while ((SSPSTAT & 0x04) || (SSPCON2 & 0x1F));
  6494                           
  6495  07F3  1683               	bsf	3,5	;RP0=1, select bank1
  6496  07F4  1303               	bcf	3,6	;RP1=0, select bank1
  6497  07F5  1914               	btfsc	20,2	;volatile
  6498  07F6  2FF8               	goto	u1011
  6499  07F7  2FF9               	goto	u1010
  6500  07F8                     u1011:
  6501  07F8  2FF3               	goto	l244
  6502  07F9                     u1010:
  6503  07F9                     l3267:
  6504  07F9  0811               	movf	17,w	;volatile
  6505  07FA  391F               	andlw	31
  6506  07FB  1D03               	btfss	3,2
  6507  07FC  2FFE               	goto	u1021
  6508  07FD  2FFF               	goto	u1020
  6509  07FE                     u1021:
  6510  07FE  2FF3               	goto	l244
  6511  07FF                     u1020:
  6512  07FF                     l247:
  6513  07FF  0008               	return
  6514  0800                     __end_of_I2C_Master_Wait:
  6515                           
  6516                           	psect	text33
  6517  0B9B                     __ptext33:	
  6518 ;; *************** function _ADC_READ *****************
  6519 ;; Defined at:
  6520 ;;		line 39 in file "ADC.c"
  6521 ;; Parameters:    Size  Location     Type
  6522 ;;		None
  6523 ;; Auto vars:     Size  Location     Type
  6524 ;;		None
  6525 ;; Return value:  Size  Location     Type
  6526 ;;                  2   14[BANK0 ] unsigned int 
  6527 ;; Registers used:
  6528 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
  6529 ;; Tracked objects:
  6530 ;;		On entry : 0/0
  6531 ;;		On exit  : 0/0
  6532 ;;		Unchanged: 0/0
  6533 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6534 ;;      Params:         0       2       0       0       0
  6535 ;;      Locals:         0       0       0       0       0
  6536 ;;      Temps:          0       1       0       0       0
  6537 ;;      Totals:         0       3       0       0       0
  6538 ;;Total ram usage:        3 bytes
  6539 ;; Hardware stack levels used:    1
  6540 ;; Hardware stack levels required when called:    6
  6541 ;; This function calls:
  6542 ;;		_SwDelay_ms
  6543 ;;		_SwDelay_us
  6544 ;; This function is called by:
  6545 ;;		_Task2
  6546 ;;		_Temp_sensor_read
  6547 ;; This function uses a non-reentrant model
  6548 ;;
  6549                           
  6550                           
  6551                           ;psect for function _ADC_READ
  6552  0B9B                     _ADC_READ:
  6553  0B9B                     l3699:	
  6554                           ;incstack = 0
  6555 ;; hardware stack exceeded
  6556                           ; Regs used in _ADC_READ: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  6557                           
  6558                           
  6559                           ;ADC.c: 41: SwDelay_ms(2);
  6560  0B9B  3000               	movlw	0
  6561  0B9C  1283               	bcf	3,5	;RP0=0, select bank0
  6562  0B9D  1303               	bcf	3,6	;RP1=0, select bank0
  6563  0B9E  00CE               	movwf	SwDelay_ms@n+3
  6564  0B9F  3000               	movlw	0
  6565  0BA0  00CD               	movwf	SwDelay_ms@n+2
  6566  0BA1  3000               	movlw	0
  6567  0BA2  00CC               	movwf	SwDelay_ms@n+1
  6568  0BA3  3002               	movlw	2
  6569  0BA4  00CB               	movwf	SwDelay_ms@n
  6570  0BA5  120A  158A  2450  120A  158A  	fcall	_SwDelay_ms
  6571  0BAA                     l3701:
  6572                           
  6573                           ;ADC.c: 43:     *((reg_type8_t)(0x001F)) &= 0b11000101;
  6574  0BAA  30C5               	movlw	197
  6575  0BAB  00FF               	movwf	btemp+1
  6576  0BAC  087F               	movf	btemp+1,w
  6577  0BAD  1283               	bcf	3,5	;RP0=0, select bank0
  6578  0BAE  1303               	bcf	3,6	;RP1=0, select bank0
  6579  0BAF  059F               	andwf	31,f	;volatile
  6580  0BB0                     l3703:
  6581                           
  6582                           ;ADC.c: 44:     *((reg_type8_t)(0x001F)) |= 0x00;
  6583  0BB0  081F               	movf	31,w	;volatile
  6584  0BB1                     l3705:
  6585                           
  6586                           ;ADC.c: 46: SwDelay_us(30);
  6587  0BB1  3000               	movlw	0
  6588  0BB2  00CE               	movwf	SwDelay_us@n+3
  6589  0BB3  3000               	movlw	0
  6590  0BB4  00CD               	movwf	SwDelay_us@n+2
  6591  0BB5  3000               	movlw	0
  6592  0BB6  00CC               	movwf	SwDelay_us@n+1
  6593  0BB7  301E               	movlw	30
  6594  0BB8  00CB               	movwf	SwDelay_us@n
  6595  0BB9  120A  158A  2239  120A  158A  	fcall	_SwDelay_us
  6596  0BBE                     l3707:
  6597                           
  6598                           ;ADC.c: 47: *((reg_type8_t)(0x001F)) |=0x04 ;
  6599  0BBE  1283               	bcf	3,5	;RP0=0, select bank0
  6600  0BBF  1303               	bcf	3,6	;RP1=0, select bank0
  6601  0BC0  151F               	bsf	31,2	;volatile
  6602  0BC1                     l3709:	
  6603                           ;ADC.c: 48:     while(( (*((reg_type8_t)(0x001F)) >> 0x04) & 1 ));
  6604                           
  6605  0BC1  081F               	movf	31,w	;volatile
  6606  0BC2  00D7               	movwf	??_ADC_READ
  6607  0BC3  3004               	movlw	4
  6608  0BC4                     u1385:
  6609  0BC4  1003               	clrc
  6610  0BC5  0CD7               	rrf	??_ADC_READ,f
  6611  0BC6  3EFF               	addlw	-1
  6612  0BC7  1D03               	skipz
  6613  0BC8  2BC4               	goto	u1385
  6614  0BC9  1857               	btfsc	??_ADC_READ,0
  6615  0BCA  2BCC               	goto	u1391
  6616  0BCB  2BCD               	goto	u1390
  6617  0BCC                     u1391:
  6618  0BCC  2BC1               	goto	l3709
  6619  0BCD                     u1390:
  6620  0BCD                     l3711:
  6621                           
  6622                           ;ADC.c: 50: return ((*((reg_type8_t)(0x001E)) << 8) + *((reg_type8_t)(0x009E)));
  6623  0BCD  081E               	movf	30,w	;volatile
  6624  0BCE  00D6               	movwf	?_ADC_READ+1
  6625  0BCF  1683               	bsf	3,5	;RP0=1, select bank1
  6626  0BD0  1303               	bcf	3,6	;RP1=0, select bank1
  6627  0BD1  081E               	movf	30,w	;volatile
  6628  0BD2  1283               	bcf	3,5	;RP0=0, select bank0
  6629  0BD3  1303               	bcf	3,6	;RP1=0, select bank0
  6630  0BD4  00D5               	movwf	?_ADC_READ
  6631  0BD5                     l31:
  6632  0BD5  0008               	return
  6633  0BD6                     __end_of_ADC_READ:
  6634                           
  6635                           	psect	text34
  6636  0A39                     __ptext34:	
  6637 ;; *************** function _SwDelay_us *****************
  6638 ;; Defined at:
  6639 ;;		line 37 in file "software_delay.c"
  6640 ;; Parameters:    Size  Location     Type
  6641 ;;  n               4    4[BANK0 ] unsigned long 
  6642 ;; Auto vars:     Size  Location     Type
  6643 ;;		None
  6644 ;; Return value:  Size  Location     Type
  6645 ;;                  1    wreg      void 
  6646 ;; Registers used:
  6647 ;;		wreg
  6648 ;; Tracked objects:
  6649 ;;		On entry : 0/0
  6650 ;;		On exit  : 0/0
  6651 ;;		Unchanged: 0/0
  6652 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6653 ;;      Params:         0       4       0       0       0
  6654 ;;      Locals:         0       0       0       0       0
  6655 ;;      Temps:          0       4       0       0       0
  6656 ;;      Totals:         0       8       0       0       0
  6657 ;;Total ram usage:        8 bytes
  6658 ;; Hardware stack levels used:    1
  6659 ;; Hardware stack levels required when called:    5
  6660 ;; This function calls:
  6661 ;;		Nothing
  6662 ;; This function is called by:
  6663 ;;		_ADC_READ
  6664 ;; This function uses a non-reentrant model
  6665 ;;
  6666                           
  6667                           
  6668                           ;psect for function _SwDelay_us
  6669  0A39                     _SwDelay_us:
  6670  0A39                     l3349:	
  6671                           ;incstack = 0
  6672 ;; hardware stack exceeded
  6673                           ; Regs used in _SwDelay_us: [wreg]
  6674                           
  6675                           
  6676                           ;software_delay.c: 37: void SwDelay_us(uint32_t n);software_delay.c: 38: {;software_dela
      +                          y.c: 39:  while (n)
  6677  0A39  2A56               	goto	l409
  6678  0A3A                     l3351:
  6679                           
  6680                           ;software_delay.c: 40:  {;software_delay.c: 41:   n--;
  6681  0A3A  3001               	movlw	1
  6682  0A3B  00CF               	movwf	??_SwDelay_us
  6683  0A3C  3000               	movlw	0
  6684  0A3D  00D0               	movwf	??_SwDelay_us+1
  6685  0A3E  3000               	movlw	0
  6686  0A3F  00D1               	movwf	??_SwDelay_us+2
  6687  0A40  3000               	movlw	0
  6688  0A41  00D2               	movwf	??_SwDelay_us+3
  6689  0A42  084F               	movf	??_SwDelay_us,w
  6690  0A43  02CB               	subwf	SwDelay_us@n,f
  6691  0A44  0850               	movf	??_SwDelay_us+1,w
  6692  0A45  1C03               	skipc
  6693  0A46  0F50               	incfsz	??_SwDelay_us+1,w
  6694  0A47  2A49               	goto	u1125
  6695  0A48  2A4A               	goto	u1126
  6696  0A49                     u1125:
  6697  0A49  02CC               	subwf	SwDelay_us@n+1,f
  6698  0A4A                     u1126:
  6699  0A4A  0851               	movf	??_SwDelay_us+2,w
  6700  0A4B  1C03               	skipc
  6701  0A4C  0F51               	incfsz	??_SwDelay_us+2,w
  6702  0A4D  2A4F               	goto	u1127
  6703  0A4E  2A50               	goto	u1128
  6704  0A4F                     u1127:
  6705  0A4F  02CD               	subwf	SwDelay_us@n+2,f
  6706  0A50                     u1128:
  6707  0A50  0852               	movf	??_SwDelay_us+3,w
  6708  0A51  1C03               	skipc
  6709  0A52  0F52               	incfsz	??_SwDelay_us+3,w
  6710  0A53  2A55               	goto	u1129
  6711  0A54  2A56               	goto	u1120
  6712  0A55                     u1129:
  6713  0A55  02CE               	subwf	SwDelay_us@n+3,f
  6714  0A56                     u1120:
  6715  0A56                     l409:	
  6716                           ;software_delay.c: 42:  }
  6717                           
  6718                           
  6719                           ;software_delay.c: 39:  while (n)
  6720  0A56  1283               	bcf	3,5	;RP0=0, select bank0
  6721  0A57  1303               	bcf	3,6	;RP1=0, select bank0
  6722  0A58  084E               	movf	SwDelay_us@n+3,w
  6723  0A59  044D               	iorwf	SwDelay_us@n+2,w
  6724  0A5A  044C               	iorwf	SwDelay_us@n+1,w
  6725  0A5B  044B               	iorwf	SwDelay_us@n,w
  6726  0A5C  1D03               	skipz
  6727  0A5D  2A5F               	goto	u1131
  6728  0A5E  2A60               	goto	u1130
  6729  0A5F                     u1131:
  6730  0A5F  2A3A               	goto	l3351
  6731  0A60                     u1130:
  6732  0A60                     l412:
  6733  0A60  0008               	return
  6734  0A61                     __end_of_SwDelay_us:
  6735                           
  6736                           	psect	text35
  6737  0C50                     __ptext35:	
  6738 ;; *************** function _SwDelay_ms *****************
  6739 ;; Defined at:
  6740 ;;		line 10 in file "software_delay.c"
  6741 ;; Parameters:    Size  Location     Type
  6742 ;;  n               4    4[BANK0 ] unsigned long 
  6743 ;; Auto vars:     Size  Location     Type
  6744 ;;  counter_21      1   13[BANK0 ] unsigned char 
  6745 ;;  counter_256     1   12[BANK0 ] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  1    wreg      void 
  6748 ;; Registers used:
  6749 ;;		wreg, status,2, status,0, btemp+1
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6755 ;;      Params:         0       4       0       0       0
  6756 ;;      Locals:         0       2       0       0       0
  6757 ;;      Temps:          0       4       0       0       0
  6758 ;;      Totals:         0      10       0       0       0
  6759 ;;Total ram usage:       10 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    5
  6762 ;; This function calls:
  6763 ;;		Nothing
  6764 ;; This function is called by:
  6765 ;;		_ADC_READ
  6766 ;; This function uses a non-reentrant model
  6767 ;;
  6768                           
  6769                           
  6770                           ;psect for function _SwDelay_ms
  6771  0C50                     _SwDelay_ms:
  6772  0C50                     l3337:	
  6773                           ;incstack = 0
  6774 ;; hardware stack exceeded
  6775                           ; Regs used in _SwDelay_ms: [wreg+status,2+status,0+btemp+1]
  6776                           
  6777                           
  6778                           ;software_delay.c: 10: void SwDelay_ms(uint32_t n);software_delay.c: 11: {;software_dela
      +                          y.c: 12:  uint8_t counter_256;;software_delay.c: 13:  uint8_t counter_21;;software_delay
      +                          .c: 14:  while (n)
  6779  0C50  2C85               	goto	l397
  6780  0C51                     l3339:
  6781                           
  6782                           ;software_delay.c: 15:  {;software_delay.c: 17:   counter_21 = 21;
  6783  0C51  3015               	movlw	21
  6784  0C52  00FF               	movwf	btemp+1
  6785  0C53  087F               	movf	btemp+1,w
  6786  0C54  00D4               	movwf	SwDelay_ms@counter_21
  6787                           
  6788                           ;software_delay.c: 18:   while (counter_21)
  6789  0C55  2C64               	goto	l399
  6790  0C56                     l3341:
  6791                           
  6792                           ;software_delay.c: 19:   {;software_delay.c: 21:    counter_256 = 255;
  6793  0C56  30FF               	movlw	255
  6794  0C57  00FF               	movwf	btemp+1
  6795  0C58  087F               	movf	btemp+1,w
  6796  0C59  00D3               	movwf	SwDelay_ms@counter_256
  6797                           
  6798                           ;software_delay.c: 22:    while (counter_256)
  6799  0C5A  2C5D               	goto	l401
  6800  0C5B                     l3343:
  6801                           
  6802                           ;software_delay.c: 23:    {;software_delay.c: 24:     counter_256--;
  6803  0C5B  3001               	movlw	1
  6804  0C5C  02D3               	subwf	SwDelay_ms@counter_256,f
  6805  0C5D                     l401:	
  6806                           ;software_delay.c: 25:    }
  6807                           
  6808                           
  6809                           ;software_delay.c: 22:    while (counter_256)
  6810  0C5D  0853               	movf	SwDelay_ms@counter_256,w
  6811  0C5E  1D03               	btfss	3,2
  6812  0C5F  2C61               	goto	u1081
  6813  0C60  2C62               	goto	u1080
  6814  0C61                     u1081:
  6815  0C61  2C5B               	goto	l3343
  6816  0C62                     u1080:
  6817  0C62                     l3345:
  6818                           
  6819                           ;software_delay.c: 26:    counter_21--;
  6820  0C62  3001               	movlw	1
  6821  0C63  02D4               	subwf	SwDelay_ms@counter_21,f
  6822  0C64                     l399:	
  6823                           ;software_delay.c: 27:   }
  6824                           
  6825                           
  6826                           ;software_delay.c: 18:   while (counter_21)
  6827  0C64  0854               	movf	SwDelay_ms@counter_21,w
  6828  0C65  1D03               	btfss	3,2
  6829  0C66  2C68               	goto	u1091
  6830  0C67  2C69               	goto	u1090
  6831  0C68                     u1091:
  6832  0C68  2C56               	goto	l3341
  6833  0C69                     u1090:
  6834  0C69                     l3347:
  6835                           
  6836                           ;software_delay.c: 28:   n--;
  6837  0C69  3001               	movlw	1
  6838  0C6A  00CF               	movwf	??_SwDelay_ms
  6839  0C6B  3000               	movlw	0
  6840  0C6C  00D0               	movwf	??_SwDelay_ms+1
  6841  0C6D  3000               	movlw	0
  6842  0C6E  00D1               	movwf	??_SwDelay_ms+2
  6843  0C6F  3000               	movlw	0
  6844  0C70  00D2               	movwf	??_SwDelay_ms+3
  6845  0C71  084F               	movf	??_SwDelay_ms,w
  6846  0C72  02CB               	subwf	SwDelay_ms@n,f
  6847  0C73  0850               	movf	??_SwDelay_ms+1,w
  6848  0C74  1C03               	skipc
  6849  0C75  0F50               	incfsz	??_SwDelay_ms+1,w
  6850  0C76  2C78               	goto	u1105
  6851  0C77  2C79               	goto	u1106
  6852  0C78                     u1105:
  6853  0C78  02CC               	subwf	SwDelay_ms@n+1,f
  6854  0C79                     u1106:
  6855  0C79  0851               	movf	??_SwDelay_ms+2,w
  6856  0C7A  1C03               	skipc
  6857  0C7B  0F51               	incfsz	??_SwDelay_ms+2,w
  6858  0C7C  2C7E               	goto	u1107
  6859  0C7D  2C7F               	goto	u1108
  6860  0C7E                     u1107:
  6861  0C7E  02CD               	subwf	SwDelay_ms@n+2,f
  6862  0C7F                     u1108:
  6863  0C7F  0852               	movf	??_SwDelay_ms+3,w
  6864  0C80  1C03               	skipc
  6865  0C81  0F52               	incfsz	??_SwDelay_ms+3,w
  6866  0C82  2C84               	goto	u1109
  6867  0C83  2C85               	goto	u1100
  6868  0C84                     u1109:
  6869  0C84  02CE               	subwf	SwDelay_ms@n+3,f
  6870  0C85                     u1100:
  6871  0C85                     l397:	
  6872                           ;software_delay.c: 29:  }
  6873                           
  6874                           
  6875                           ;software_delay.c: 14:  while (n)
  6876  0C85  1283               	bcf	3,5	;RP0=0, select bank0
  6877  0C86  1303               	bcf	3,6	;RP1=0, select bank0
  6878  0C87  084E               	movf	SwDelay_ms@n+3,w
  6879  0C88  044D               	iorwf	SwDelay_ms@n+2,w
  6880  0C89  044C               	iorwf	SwDelay_ms@n+1,w
  6881  0C8A  044B               	iorwf	SwDelay_ms@n,w
  6882  0C8B  1D03               	skipz
  6883  0C8C  2C8E               	goto	u1111
  6884  0C8D  2C8F               	goto	u1110
  6885  0C8E                     u1111:
  6886  0C8E  2C51               	goto	l3339
  6887  0C8F                     u1110:
  6888  0C8F                     l406:
  6889  0C8F  0008               	return
  6890  0C90                     __end_of_SwDelay_ms:
  6891                           
  6892                           	psect	text36
  6893  0691                     __ptext36:	
  6894 ;; *************** function _pushButtonGetStatus *****************
  6895 ;; Defined at:
  6896 ;;		line 23 in file "pushButton.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  en_butotn_id    1    wreg     enum E62
  6899 ;; Auto vars:     Size  Location     Type
  6900 ;;  en_butotn_id    1   12[BANK0 ] enum E62
  6901 ;;  pushreturn      1   13[BANK0 ] unsigned char 
  6902 ;; Return value:  Size  Location     Type
  6903 ;;                  1    wreg      enum E67
  6904 ;; Registers used:
  6905 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6906 ;; Tracked objects:
  6907 ;;		On entry : 0/0
  6908 ;;		On exit  : 0/0
  6909 ;;		Unchanged: 0/0
  6910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  6911 ;;      Params:         0       0       0       0       0
  6912 ;;      Locals:         0       2       0       0       0
  6913 ;;      Temps:          0       2       0       0       0
  6914 ;;      Totals:         0       4       0       0       0
  6915 ;;Total ram usage:        4 bytes
  6916 ;; Hardware stack levels used:    1
  6917 ;; Hardware stack levels required when called:    6
  6918 ;; This function calls:
  6919 ;;		_DIO_Read
  6920 ;; This function is called by:
  6921 ;;		_Task1
  6922 ;; This function uses a non-reentrant model
  6923 ;;
  6924                           
  6925                           
  6926                           ;psect for function _pushButtonGetStatus
  6927  0691                     _pushButtonGetStatus:
  6928                           
  6929                           ;incstack = 0
  6930 ;; hardware stack exceeded
  6931                           ; Regs used in _pushButtonGetStatus: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack
      +                          ]
  6932                           ;pushButtonGetStatus@en_butotn_id stored from wreg
  6933  0691  1283               	bcf	3,5	;RP0=0, select bank0
  6934  0692  1303               	bcf	3,6	;RP1=0, select bank0
  6935  0693  00D3               	movwf	pushButtonGetStatus@en_butotn_id
  6936  0694                     l3967:
  6937                           
  6938                           ;pushButton.c: 23: En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_butotn_id);pus
      +                          hButton.c: 24: {uint8_t pushreturn = 0;
  6939  0694  01D4               	clrf	pushButtonGetStatus@pushreturn
  6940                           
  6941                           ;pushButton.c: 25:  static uint8_t u8_Button_press[3];;pushButton.c: 26: static uint8_t 
      +                          u8_S_button_status[3];;pushButton.c: 27: switch(en_butotn_id)
  6942  0695  2EFB               	goto	l4017
  6943  0696                     l3969:
  6944                           
  6945                           ;pushButton.c: 30: {;pushButton.c: 31:     DIO_Read(2,0x20,&(u8_Button_press[0]));
  6946  0696  3020               	movlw	32
  6947  0697  00FF               	movwf	btemp+1
  6948  0698  087F               	movf	btemp+1,w
  6949  0699  00CB               	movwf	DIO_Read@pins
  6950  069A  3044               	movlw	(low (pushButtonGetStatus@u8_Button_press| 0))& (0+255)
  6951  069B  00FF               	movwf	btemp+1
  6952  069C  087F               	movf	btemp+1,w
  6953  069D  00CC               	movwf	DIO_Read@data
  6954  069E  3002               	movlw	2
  6955  069F  120A  158A  2674  120A  118A  	fcall	_DIO_Read
  6956  06A4                     l3971:
  6957                           
  6958                           ;pushButton.c: 32: if( u8_Button_press[0]== Pressed)
  6959  06A4  1283               	bcf	3,5	;RP0=0, select bank0
  6960  06A5  1303               	bcf	3,6	;RP1=0, select bank0
  6961  06A6  0344               	decf	pushButtonGetStatus@u8_Button_press,w
  6962  06A7  1D03               	btfss	3,2
  6963  06A8  2EAA               	goto	u1461
  6964  06A9  2EAB               	goto	u1460
  6965  06AA                     u1461:
  6966  06AA  2EB8               	goto	l3979
  6967  06AB                     u1460:
  6968  06AB                     l3973:
  6969                           
  6970                           ;pushButton.c: 33: {;pushButton.c: 34:  (u8_S_button_status[0])++;
  6971  06AB  3001               	movlw	1
  6972  06AC  00FF               	movwf	btemp+1
  6973  06AD  087F               	movf	btemp+1,w
  6974  06AE  07A3               	addwf	pushButtonGetStatus@u8_S_button_status,f
  6975  06AF                     l3975:
  6976                           
  6977                           ;pushButton.c: 38:  if( (u8_S_button_status[0]) > 10)
  6978  06AF  300B               	movlw	11
  6979  06B0  0223               	subwf	pushButtonGetStatus@u8_S_button_status,w
  6980  06B1  1C03               	skipc
  6981  06B2  2EB4               	goto	u1471
  6982  06B3  2EB5               	goto	u1470
  6983  06B4                     u1471:
  6984  06B4  2EB8               	goto	l3979
  6985  06B5                     u1470:
  6986  06B5                     l3977:
  6987                           
  6988                           ;pushButton.c: 39:  pushreturn = Pressed;
  6989  06B5  01D4               	clrf	pushButtonGetStatus@pushreturn
  6990  06B6  0AD4               	incf	pushButtonGetStatus@pushreturn,f
  6991  06B7  2F0E               	goto	l4019
  6992  06B8                     l3979:
  6993  06B8  01D4               	clrf	pushButtonGetStatus@pushreturn
  6994  06B9  2F0E               	goto	l4019
  6995  06BA                     l3983:
  6996                           
  6997                           ;pushButton.c: 45: {;pushButton.c: 46:     DIO_Read(2,0x40,&(u8_Button_press[1]));
  6998  06BA  3040               	movlw	64
  6999  06BB  00FF               	movwf	btemp+1
  7000  06BC  087F               	movf	btemp+1,w
  7001  06BD  00CB               	movwf	DIO_Read@pins
  7002  06BE  3045               	movlw	(low ((pushButtonGetStatus@u8_Button_press| 0+1)))& (0+255)
  7003  06BF  00FF               	movwf	btemp+1
  7004  06C0  087F               	movf	btemp+1,w
  7005  06C1  00CC               	movwf	DIO_Read@data
  7006  06C2  3002               	movlw	2
  7007  06C3  120A  158A  2674  120A  118A  	fcall	_DIO_Read
  7008  06C8                     l3985:
  7009                           
  7010                           ;pushButton.c: 47: if( u8_Button_press[1] == Pressed)
  7011  06C8  1283               	bcf	3,5	;RP0=0, select bank0
  7012  06C9  1303               	bcf	3,6	;RP1=0, select bank0
  7013  06CA  0345               	decf	pushButtonGetStatus@u8_Button_press+1,w
  7014  06CB  1D03               	btfss	3,2
  7015  06CC  2ECE               	goto	u1481
  7016  06CD  2ECF               	goto	u1480
  7017  06CE                     u1481:
  7018  06CE  2EB8               	goto	l3979
  7019  06CF                     u1480:
  7020  06CF                     l3987:
  7021                           
  7022                           ;pushButton.c: 48: {;pushButton.c: 49:  (u8_S_button_status[0])++;
  7023  06CF  3001               	movlw	1
  7024  06D0  00FF               	movwf	btemp+1
  7025  06D1  087F               	movf	btemp+1,w
  7026  06D2  07A3               	addwf	pushButtonGetStatus@u8_S_button_status,f
  7027  06D3                     l3989:
  7028                           
  7029                           ;pushButton.c: 53:  if( (u8_S_button_status[0]) > 10)
  7030  06D3  300B               	movlw	11
  7031  06D4  0223               	subwf	pushButtonGetStatus@u8_S_button_status,w
  7032  06D5  1C03               	skipc
  7033  06D6  2ED8               	goto	u1491
  7034  06D7  2ED9               	goto	u1490
  7035  06D8                     u1491:
  7036  06D8  2EB8               	goto	l3979
  7037  06D9                     u1490:
  7038  06D9                     l3991:
  7039                           
  7040                           ;pushButton.c: 54: return Pressed;
  7041  06D9  3001               	movlw	1
  7042  06DA  2F0F               	goto	l203
  7043  06DB                     l4001:
  7044                           
  7045                           ;pushButton.c: 60: {;pushButton.c: 61:     DIO_Read(2,0x80,&(u8_Button_press[2]));
  7046  06DB  3080               	movlw	128
  7047  06DC  00FF               	movwf	btemp+1
  7048  06DD  087F               	movf	btemp+1,w
  7049  06DE  00CB               	movwf	DIO_Read@pins
  7050  06DF  3046               	movlw	(low ((pushButtonGetStatus@u8_Button_press| 0+2)))& (0+255)
  7051  06E0  00FF               	movwf	btemp+1
  7052  06E1  087F               	movf	btemp+1,w
  7053  06E2  00CC               	movwf	DIO_Read@data
  7054  06E3  3002               	movlw	2
  7055  06E4  120A  158A  2674  120A  118A  	fcall	_DIO_Read
  7056  06E9                     l4003:
  7057                           
  7058                           ;pushButton.c: 62: if((u8_Button_press[2])== Pressed)
  7059  06E9  1283               	bcf	3,5	;RP0=0, select bank0
  7060  06EA  1303               	bcf	3,6	;RP1=0, select bank0
  7061  06EB  0346               	decf	pushButtonGetStatus@u8_Button_press+2,w
  7062  06EC  1D03               	btfss	3,2
  7063  06ED  2EEF               	goto	u1501
  7064  06EE  2EF0               	goto	u1500
  7065  06EF                     u1501:
  7066  06EF  2EB8               	goto	l3979
  7067  06F0                     u1500:
  7068  06F0                     l4005:
  7069                           
  7070                           ;pushButton.c: 63: { (u8_S_button_status[1])++;
  7071  06F0  3001               	movlw	1
  7072  06F1  00FF               	movwf	btemp+1
  7073  06F2  087F               	movf	btemp+1,w
  7074  06F3  07A4               	addwf	pushButtonGetStatus@u8_S_button_status+1,f
  7075  06F4                     l4007:
  7076                           
  7077                           ;pushButton.c: 67:  if( (u8_S_button_status[1]) > 10)
  7078  06F4  300B               	movlw	11
  7079  06F5  0224               	subwf	pushButtonGetStatus@u8_S_button_status+1,w
  7080  06F6  1C03               	skipc
  7081  06F7  2EF9               	goto	u1511
  7082  06F8  2EFA               	goto	u1510
  7083  06F9                     u1511:
  7084  06F9  2EB8               	goto	l3979
  7085  06FA                     u1510:
  7086  06FA  2EB5               	goto	l3977
  7087  06FB                     l4017:
  7088  06FB  0853               	movf	pushButtonGetStatus@en_butotn_id,w
  7089  06FC  00D1               	movwf	??_pushButtonGetStatus
  7090  06FD  01D2               	clrf	??_pushButtonGetStatus+1
  7091                           
  7092                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7093                           ; Switch size 1, requested type "simple"
  7094                           ; Number of cases is 1, Range of values is 0 to 0
  7095                           ; switch strategies available:
  7096                           ; Name         Instructions Cycles
  7097                           ; simple_byte            4     3 (average)
  7098                           ; direct_byte           11     8 (fixed)
  7099                           ; jumptable            260     6 (fixed)
  7100                           ;	Chosen strategy is simple_byte
  7101  06FE  0852               	movf	??_pushButtonGetStatus+1,w
  7102  06FF  3A00               	xorlw	0	; case 0
  7103  0700  1903               	skipnz
  7104  0701  2F03               	goto	l6455
  7105  0702  2F0E               	goto	l4019
  7106  0703                     l6455:
  7107                           
  7108                           ; Switch size 1, requested type "simple"
  7109                           ; Number of cases is 3, Range of values is 0 to 2
  7110                           ; switch strategies available:
  7111                           ; Name         Instructions Cycles
  7112                           ; simple_byte           10     6 (average)
  7113                           ; direct_byte           17     8 (fixed)
  7114                           ; jumptable            260     6 (fixed)
  7115                           ;	Chosen strategy is simple_byte
  7116  0703  0851               	movf	??_pushButtonGetStatus,w
  7117  0704  3A00               	xorlw	0	; case 0
  7118  0705  1903               	skipnz
  7119  0706  2E96               	goto	l3969
  7120  0707  3A01               	xorlw	1	; case 1
  7121  0708  1903               	skipnz
  7122  0709  2EBA               	goto	l3983
  7123  070A  3A03               	xorlw	3	; case 2
  7124  070B  1903               	skipnz
  7125  070C  2EDB               	goto	l4001
  7126  070D  2F0E               	goto	l4019
  7127  070E                     l4019:
  7128                           
  7129                           ;pushButton.c: 78: return pushreturn ;
  7130  070E  0854               	movf	pushButtonGetStatus@pushreturn,w
  7131  070F                     l203:
  7132  070F  0008               	return
  7133  0710                     __end_of_pushButtonGetStatus:
  7134                           
  7135                           	psect	text37
  7136  0E74                     __ptext37:	
  7137 ;; *************** function _DIO_Read *****************
  7138 ;; Defined at:
  7139 ;;		line 236 in file "DIO.c"
  7140 ;; Parameters:    Size  Location     Type
  7141 ;;  GPIO            1    wreg     unsigned char 
  7142 ;;  pins            1    4[BANK0 ] unsigned char 
  7143 ;;  data            1    5[BANK0 ] PTR unsigned char 
  7144 ;;		 -> pushButtonGetStatus@u8_Button_press(3), 
  7145 ;; Auto vars:     Size  Location     Type
  7146 ;;  GPIO            1    9[BANK0 ] unsigned char 
  7147 ;;  ret_error       1    8[BANK0 ] unsigned char 
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      unsigned char 
  7150 ;; Registers used:
  7151 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7157 ;;      Params:         0       2       0       0       0
  7158 ;;      Locals:         0       2       0       0       0
  7159 ;;      Temps:          0       2       0       0       0
  7160 ;;      Totals:         0       6       0       0       0
  7161 ;;Total ram usage:        6 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    5
  7164 ;; This function calls:
  7165 ;;		Nothing
  7166 ;; This function is called by:
  7167 ;;		_pushButtonGetStatus
  7168 ;; This function uses a non-reentrant model
  7169 ;;
  7170                           
  7171                           
  7172                           ;psect for function _DIO_Read
  7173  0E74                     _DIO_Read:
  7174                           
  7175                           ;incstack = 0
  7176 ;; hardware stack exceeded
  7177                           ; Regs used in _DIO_Read: [wreg-fsr0h+status,2+status,0+btemp+1]
  7178                           ;DIO_Read@GPIO stored from wreg
  7179  0E74  1283               	bcf	3,5	;RP0=0, select bank0
  7180  0E75  1303               	bcf	3,6	;RP1=0, select bank0
  7181  0E76  00D0               	movwf	DIO_Read@GPIO
  7182  0E77                     l3457:
  7183                           
  7184                           ;DIO.c: 236: ERROR_STATUS DIO_Read (uint8_t GPIO,uint8_t pins, uint8_t *data);DIO.c: 237
      +                          : {;DIO.c: 238:   uint8_t ret_error=0;
  7185  0E77  01CF               	clrf	DIO_Read@ret_error
  7186                           
  7187                           ;DIO.c: 239:   switch (GPIO)
  7188  0E78  2EAB               	goto	l3473
  7189  0E79                     l3459:
  7190                           
  7191                           ;DIO.c: 241:     *data=(*((reg_type8_t)(0x0005)) & pins);
  7192  0E79  0805               	movf	5,w	;volatile
  7193  0E7A  054B               	andwf	DIO_Read@pins,w
  7194  0E7B  00FF               	movwf	btemp+1
  7195  0E7C  084C               	movf	DIO_Read@data,w
  7196  0E7D  0084               	movwf	4
  7197  0E7E  087F               	movf	btemp+1,w
  7198  0E7F  1383               	bcf	3,7	;select IRP bank0
  7199  0E80  0080               	movwf	0
  7200                           
  7201                           ;DIO.c: 242:     break;
  7202  0E81  2EC4               	goto	l3475
  7203  0E82                     l3461:
  7204                           
  7205                           ;DIO.c: 244:     *data=(*((reg_type8_t)(0x0006)) & pins);
  7206  0E82  0806               	movf	6,w	;volatile
  7207  0E83  054B               	andwf	DIO_Read@pins,w
  7208  0E84  00FF               	movwf	btemp+1
  7209  0E85  084C               	movf	DIO_Read@data,w
  7210  0E86  0084               	movwf	4
  7211  0E87  087F               	movf	btemp+1,w
  7212  0E88  1383               	bcf	3,7	;select IRP bank0
  7213  0E89  0080               	movwf	0
  7214                           
  7215                           ;DIO.c: 245:     break;
  7216  0E8A  2EC4               	goto	l3475
  7217  0E8B                     l3463:
  7218                           
  7219                           ;DIO.c: 247:     *data=(*((reg_type8_t)(0x0007)) & pins);
  7220  0E8B  0807               	movf	7,w	;volatile
  7221  0E8C  054B               	andwf	DIO_Read@pins,w
  7222  0E8D  00FF               	movwf	btemp+1
  7223  0E8E  084C               	movf	DIO_Read@data,w
  7224  0E8F  0084               	movwf	4
  7225  0E90  087F               	movf	btemp+1,w
  7226  0E91  1383               	bcf	3,7	;select IRP bank0
  7227  0E92  0080               	movwf	0
  7228                           
  7229                           ;DIO.c: 248:     break;
  7230  0E93  2EC4               	goto	l3475
  7231  0E94                     l3465:
  7232                           
  7233                           ;DIO.c: 250:     *data=(*((reg_type8_t)(0x0008)) & pins);
  7234  0E94  0808               	movf	8,w	;volatile
  7235  0E95  054B               	andwf	DIO_Read@pins,w
  7236  0E96  00FF               	movwf	btemp+1
  7237  0E97  084C               	movf	DIO_Read@data,w
  7238  0E98  0084               	movwf	4
  7239  0E99  087F               	movf	btemp+1,w
  7240  0E9A  1383               	bcf	3,7	;select IRP bank0
  7241  0E9B  0080               	movwf	0
  7242                           
  7243                           ;DIO.c: 251:                 break;
  7244  0E9C  2EC4               	goto	l3475
  7245  0E9D                     l3467:
  7246                           
  7247                           ;DIO.c: 253:     *data=(*((reg_type8_t)(0x0009)) & pins);
  7248  0E9D  0809               	movf	9,w	;volatile
  7249  0E9E  054B               	andwf	DIO_Read@pins,w
  7250  0E9F  00FF               	movwf	btemp+1
  7251  0EA0  084C               	movf	DIO_Read@data,w
  7252  0EA1  0084               	movwf	4
  7253  0EA2  087F               	movf	btemp+1,w
  7254  0EA3  1383               	bcf	3,7	;select IRP bank0
  7255  0EA4  0080               	movwf	0
  7256                           
  7257                           ;DIO.c: 254:     break;
  7258  0EA5  2EC4               	goto	l3475
  7259  0EA6                     l3469:
  7260                           
  7261                           ;DIO.c: 256:     ret_error += 14;
  7262  0EA6  300E               	movlw	14
  7263  0EA7  00FF               	movwf	btemp+1
  7264  0EA8  087F               	movf	btemp+1,w
  7265  0EA9  07CF               	addwf	DIO_Read@ret_error,f
  7266                           
  7267                           ;DIO.c: 257:     break;
  7268  0EAA  2EC4               	goto	l3475
  7269  0EAB                     l3473:
  7270  0EAB  0850               	movf	DIO_Read@GPIO,w
  7271  0EAC  00CD               	movwf	??_DIO_Read
  7272  0EAD  01CE               	clrf	??_DIO_Read+1
  7273                           
  7274                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7275                           ; Switch size 1, requested type "simple"
  7276                           ; Number of cases is 1, Range of values is 0 to 0
  7277                           ; switch strategies available:
  7278                           ; Name         Instructions Cycles
  7279                           ; simple_byte            4     3 (average)
  7280                           ; direct_byte           11     8 (fixed)
  7281                           ; jumptable            260     6 (fixed)
  7282                           ;	Chosen strategy is simple_byte
  7283  0EAE  084E               	movf	??_DIO_Read+1,w
  7284  0EAF  3A00               	xorlw	0	; case 0
  7285  0EB0  1903               	skipnz
  7286  0EB1  2EB3               	goto	l6457
  7287  0EB2  2EA6               	goto	l3469
  7288  0EB3                     l6457:
  7289                           
  7290                           ; Switch size 1, requested type "simple"
  7291                           ; Number of cases is 5, Range of values is 0 to 4
  7292                           ; switch strategies available:
  7293                           ; Name         Instructions Cycles
  7294                           ; simple_byte           16     9 (average)
  7295                           ; direct_byte           23     8 (fixed)
  7296                           ; jumptable            260     6 (fixed)
  7297                           ;	Chosen strategy is simple_byte
  7298  0EB3  084D               	movf	??_DIO_Read,w
  7299  0EB4  3A00               	xorlw	0	; case 0
  7300  0EB5  1903               	skipnz
  7301  0EB6  2E79               	goto	l3459
  7302  0EB7  3A01               	xorlw	1	; case 1
  7303  0EB8  1903               	skipnz
  7304  0EB9  2E82               	goto	l3461
  7305  0EBA  3A03               	xorlw	3	; case 2
  7306  0EBB  1903               	skipnz
  7307  0EBC  2E8B               	goto	l3463
  7308  0EBD  3A01               	xorlw	1	; case 3
  7309  0EBE  1903               	skipnz
  7310  0EBF  2E94               	goto	l3465
  7311  0EC0  3A07               	xorlw	7	; case 4
  7312  0EC1  1903               	skipnz
  7313  0EC2  2E9D               	goto	l3467
  7314  0EC3  2EA6               	goto	l3469
  7315  0EC4                     l3475:
  7316                           
  7317                           ;DIO.c: 259:    if(*data > 0)
  7318  0EC4  084C               	movf	DIO_Read@data,w
  7319  0EC5  0084               	movwf	4
  7320  0EC6  1383               	bcf	3,7	;select IRP bank0
  7321  0EC7  0800               	movf	0,w
  7322  0EC8  1903               	btfsc	3,2
  7323  0EC9  2ECB               	goto	u1151
  7324  0ECA  2ECC               	goto	u1150
  7325  0ECB                     u1151:
  7326  0ECB  2ED0               	goto	l384
  7327  0ECC                     u1150:
  7328  0ECC                     l3477:
  7329                           
  7330                           ;DIO.c: 260:    {;DIO.c: 261:     *data = 1;
  7331  0ECC  084C               	movf	DIO_Read@data,w
  7332  0ECD  0084               	movwf	4
  7333  0ECE  0180               	clrf	0
  7334  0ECF  0A80               	incf	0,f
  7335  0ED0                     l384:
  7336  0ED0  0008               	return
  7337  0ED1                     __end_of_DIO_Read:
  7338                           
  7339                           	psect	text38
  7340  0D69                     __ptext38:	
  7341 ;; *************** function _checkmyisr *****************
  7342 ;; Defined at:
  7343 ;;		line 11 in file "interrupts.c"
  7344 ;; Parameters:    Size  Location     Type
  7345 ;;		None
  7346 ;; Auto vars:     Size  Location     Type
  7347 ;;		None
  7348 ;; Return value:  Size  Location     Type
  7349 ;;                  1    wreg      void 
  7350 ;; Registers used:
  7351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7352 ;; Tracked objects:
  7353 ;;		On entry : 0/0
  7354 ;;		On exit  : 0/0
  7355 ;;		Unchanged: 0/0
  7356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7357 ;;      Params:         0       0       0       0       0
  7358 ;;      Locals:         0       0       0       0       0
  7359 ;;      Temps:          0       4       0       0       0
  7360 ;;      Totals:         0       4       0       0       0
  7361 ;;Total ram usage:        4 bytes
  7362 ;; Hardware stack levels used:    1
  7363 ;; Hardware stack levels required when called:    4
  7364 ;; This function calls:
  7365 ;;		Absolute function
  7366 ;;		_adc_interrupt_routine
  7367 ;;		_seven_seg_POV
  7368 ;;		_timer0_interrupt_ovfRoutine
  7369 ;;		_timer1_interrupt_ovfRoutine
  7370 ;;		_timer_interrupt
  7371 ;; This function is called by:
  7372 ;;		Interrupt level 1
  7373 ;; This function uses a non-reentrant model
  7374 ;;
  7375                           
  7376                           
  7377                           ;psect for function _checkmyisr
  7378  0D69                     _checkmyisr:
  7379  0D69                     i1l4381:
  7380                           
  7381                           ;interrupts.c: 13: if((*((reg_type8_t)(0x000B)) & 0x04 )&&(*((reg_type8_t)(0x000B)) & 0x
      +                          20))
  7382  0D69  1D0B               	btfss	11,2	;volatile
  7383  0D6A  2D6C               	goto	u182_21
  7384  0D6B  2D6D               	goto	u182_20
  7385  0D6C                     u182_21:
  7386  0D6C  2D77               	goto	i1l4387
  7387  0D6D                     u182_20:
  7388  0D6D                     i1l4383:
  7389  0D6D  1E8B               	btfss	11,5	;volatile
  7390  0D6E  2D70               	goto	u183_21
  7391  0D6F  2D71               	goto	u183_20
  7392  0D70                     u183_21:
  7393  0D70  2D77               	goto	i1l4387
  7394  0D71                     u183_20:
  7395  0D71                     i1l4385:
  7396                           
  7397                           ;interrupts.c: 14: {;interrupts.c: 16: TIMER0OVF_INT();
  7398  0D71  083E               	movf	_TIMER0OVF_INT,w
  7399  0D72  120A  118A  2070  120A  158A  	fcall	i1fptable
  7400  0D77                     i1l4387:
  7401                           
  7402                           ;interrupts.c: 18: if((*((reg_type8_t)(0x000C)) & 0x01 )&&(*((reg_type8_t)(0x008C)) & 0x
      +                          01))
  7403  0D77  1283               	bcf	3,5	;RP0=0, select bank0
  7404  0D78  1303               	bcf	3,6	;RP1=0, select bank0
  7405  0D79  1C0C               	btfss	12,0	;volatile
  7406  0D7A  2D7C               	goto	u184_21
  7407  0D7B  2D7D               	goto	u184_20
  7408  0D7C                     u184_21:
  7409  0D7C  2D8B               	goto	i1l4393
  7410  0D7D                     u184_20:
  7411  0D7D                     i1l4389:
  7412  0D7D  1683               	bsf	3,5	;RP0=1, select bank1
  7413  0D7E  1303               	bcf	3,6	;RP1=0, select bank1
  7414  0D7F  1C0C               	btfss	12,0	;volatile
  7415  0D80  2D82               	goto	u185_21
  7416  0D81  2D83               	goto	u185_20
  7417  0D82                     u185_21:
  7418  0D82  2D8B               	goto	i1l4393
  7419  0D83                     u185_20:
  7420  0D83                     i1l4391:
  7421                           
  7422                           ;interrupts.c: 19: {;interrupts.c: 21: TIMER1OVF_INT();
  7423  0D83  1283               	bcf	3,5	;RP0=0, select bank0
  7424  0D84  1303               	bcf	3,6	;RP1=0, select bank0
  7425  0D85  083D               	movf	_TIMER1OVF_INT,w
  7426  0D86  120A  118A  2070  120A  158A  	fcall	i1fptable
  7427  0D8B                     i1l4393:
  7428                           
  7429                           ;interrupts.c: 23: if((*((reg_type8_t)(0x000C)) & 0x02 )&&(*((reg_type8_t)(0x008C)) & 0x
      +                          02))
  7430  0D8B  1283               	bcf	3,5	;RP0=0, select bank0
  7431  0D8C  1303               	bcf	3,6	;RP1=0, select bank0
  7432  0D8D  1C8C               	btfss	12,1	;volatile
  7433  0D8E  2D90               	goto	u186_21
  7434  0D8F  2D91               	goto	u186_20
  7435  0D90                     u186_21:
  7436  0D90  2D9F               	goto	i1l4399
  7437  0D91                     u186_20:
  7438  0D91                     i1l4395:
  7439  0D91  1683               	bsf	3,5	;RP0=1, select bank1
  7440  0D92  1303               	bcf	3,6	;RP1=0, select bank1
  7441  0D93  1C8C               	btfss	12,1	;volatile
  7442  0D94  2D96               	goto	u187_21
  7443  0D95  2D97               	goto	u187_20
  7444  0D96                     u187_21:
  7445  0D96  2D9F               	goto	i1l4399
  7446  0D97                     u187_20:
  7447  0D97                     i1l4397:
  7448                           
  7449                           ;interrupts.c: 24: {;interrupts.c: 26: TIMER2OVF_INT();
  7450  0D97  1283               	bcf	3,5	;RP0=0, select bank0
  7451  0D98  1303               	bcf	3,6	;RP1=0, select bank0
  7452  0D99  083C               	movf	_TIMER2OVF_INT,w
  7453  0D9A  120A  118A  2070  120A  158A  	fcall	i1fptable
  7454  0D9F                     i1l4399:
  7455                           
  7456                           ;interrupts.c: 28: if((*((reg_type8_t)(0x000C)) & 0x40 )&&(*((reg_type8_t)(0x008C)) & 0x
      +                          40))
  7457  0D9F  1283               	bcf	3,5	;RP0=0, select bank0
  7458  0DA0  1303               	bcf	3,6	;RP1=0, select bank0
  7459  0DA1  1F0C               	btfss	12,6	;volatile
  7460  0DA2  2DA4               	goto	u188_21
  7461  0DA3  2DA5               	goto	u188_20
  7462  0DA4                     u188_21:
  7463  0DA4  2DB3               	goto	i1l128
  7464  0DA5                     u188_20:
  7465  0DA5                     i1l4401:
  7466  0DA5  1683               	bsf	3,5	;RP0=1, select bank1
  7467  0DA6  1303               	bcf	3,6	;RP1=0, select bank1
  7468  0DA7  1F0C               	btfss	12,6	;volatile
  7469  0DA8  2DAA               	goto	u189_21
  7470  0DA9  2DAB               	goto	u189_20
  7471  0DAA                     u189_21:
  7472  0DAA  2DB3               	goto	i1l128
  7473  0DAB                     u189_20:
  7474  0DAB                     i1l4403:
  7475                           
  7476                           ;interrupts.c: 29: {;interrupts.c: 31: ADC_INT();
  7477  0DAB  1283               	bcf	3,5	;RP0=0, select bank0
  7478  0DAC  1303               	bcf	3,6	;RP1=0, select bank0
  7479  0DAD  0843               	movf	_ADC_INT,w
  7480  0DAE  120A  118A  2070  120A  158A  	fcall	i1fptable
  7481  0DB3                     i1l128:
  7482  0DB3  1283               	bcf	3,5	;RP0=0, select bank0
  7483  0DB4  1303               	bcf	3,6	;RP1=0, select bank0
  7484  0DB5  084A               	movf	??_checkmyisr+3,w
  7485  0DB6  00FF               	movwf	btemp+1
  7486  0DB7  0849               	movf	??_checkmyisr+2,w
  7487  0DB8  008A               	movwf	10
  7488  0DB9  0848               	movf	??_checkmyisr+1,w
  7489  0DBA  0084               	movwf	4
  7490  0DBB  0E47               	swapf	??_checkmyisr^0,w
  7491  0DBC  0083               	movwf	3
  7492  0DBD  0EFE               	swapf	btemp,f
  7493  0DBE  0E7E               	swapf	btemp,w
  7494  0DBF  0009               	retfie
  7495  0DC0                     __end_of_checkmyisr:
  7496                           
  7497                           	psect	intentry
  7498  0004                     __pintentry:	
  7499                           ;incstack = 0
  7500 ;; hardware stack exceeded
  7501                           ; Regs used in _checkmyisr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7502                           
  7503  0004                     interrupt_function:
  7504  007E                     saved_w	set	btemp
  7505  0004  00FE               	movwf	btemp
  7506  0005  0E03               	swapf	3,w
  7507  0006  1283               	bcf	3,5	;RP0=0, select bank0
  7508  0007  1303               	bcf	3,6	;RP1=0, select bank0
  7509  0008  00C7               	movwf	??_checkmyisr
  7510  0009  0804               	movf	4,w
  7511  000A  00C8               	movwf	??_checkmyisr+1
  7512  000B  080A               	movf	10,w
  7513  000C  00C9               	movwf	??_checkmyisr+2
  7514  000D  087F               	movf	btemp+1,w
  7515  000E  00CA               	movwf	??_checkmyisr+3
  7516  000F  120A  158A  2D69   	ljmp	_checkmyisr
  7517                           
  7518                           	psect	text39
  7519  09AE                     __ptext39:	
  7520 ;; *************** function _timer1_interrupt_ovfRoutine *****************
  7521 ;; Defined at:
  7522 ;;		line 116 in file "Timer.c"
  7523 ;; Parameters:    Size  Location     Type
  7524 ;;		None
  7525 ;; Auto vars:     Size  Location     Type
  7526 ;;		None
  7527 ;; Return value:  Size  Location     Type
  7528 ;;                  1    wreg      void 
  7529 ;; Registers used:
  7530 ;;		wreg, status,2, status,0, btemp+1
  7531 ;; Tracked objects:
  7532 ;;		On entry : 0/0
  7533 ;;		On exit  : 0/0
  7534 ;;		Unchanged: 0/0
  7535 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7536 ;;      Params:         0       0       0       0       0
  7537 ;;      Locals:         0       0       0       0       0
  7538 ;;      Temps:          0       0       0       0       0
  7539 ;;      Totals:         0       0       0       0       0
  7540 ;;Total ram usage:        0 bytes
  7541 ;; Hardware stack levels used:    1
  7542 ;; This function calls:
  7543 ;;		Nothing
  7544 ;; This function is called by:
  7545 ;;		_checkmyisr
  7546 ;; This function uses a non-reentrant model
  7547 ;;
  7548                           
  7549                           
  7550                           ;psect for function _timer1_interrupt_ovfRoutine
  7551  09AE                     _timer1_interrupt_ovfRoutine:
  7552  09AE                     i1l4369:	
  7553                           ;incstack = 0
  7554                           ; Regs used in _timer1_interrupt_ovfRoutine: [wreg+status,2+status,0+btemp+1]
  7555                           
  7556                           
  7557                           ;Timer.c: 119:  *((reg_type8_t)(0x0087))=0x00;
  7558  09AE  1683               	bsf	3,5	;RP0=1, select bank1
  7559  09AF  1303               	bcf	3,6	;RP1=0, select bank1
  7560  09B0  0187               	clrf	7	;volatile
  7561  09B1                     i1l4371:
  7562                           
  7563                           ;Timer.c: 120:  *((reg_type8_t)(0x0007)) ^= 0xff;
  7564  09B1  30FF               	movlw	255
  7565  09B2  00FF               	movwf	btemp+1
  7566  09B3  087F               	movf	btemp+1,w
  7567  09B4  1283               	bcf	3,5	;RP0=0, select bank0
  7568  09B5  1303               	bcf	3,6	;RP1=0, select bank0
  7569  09B6  0687               	xorwf	7,f	;volatile
  7570  09B7                     i1l4373:
  7571                           
  7572                           ;Timer.c: 122: *((reg_type8_t)(0x0007)) ^= 0xFF;
  7573  09B7  30FF               	movlw	255
  7574  09B8  00FF               	movwf	btemp+1
  7575  09B9  087F               	movf	btemp+1,w
  7576  09BA  0687               	xorwf	7,f	;volatile
  7577  09BB                     i1l4375:
  7578                           
  7579                           ;Timer.c: 124: *((reg_type8_t)(0x000C)) &= (~0x01);
  7580  09BB  30FE               	movlw	254
  7581  09BC  00FF               	movwf	btemp+1
  7582  09BD  087F               	movf	btemp+1,w
  7583  09BE  058C               	andwf	12,f	;volatile
  7584  09BF                     i1l555:
  7585  09BF  0008               	return
  7586  09C0                     __end_of_timer1_interrupt_ovfRoutine:
  7587                           
  7588                           	psect	text40
  7589  099F                     __ptext40:	
  7590 ;; *************** function _timer0_interrupt_ovfRoutine *****************
  7591 ;; Defined at:
  7592 ;;		line 108 in file "Timer.c"
  7593 ;; Parameters:    Size  Location     Type
  7594 ;;		None
  7595 ;; Auto vars:     Size  Location     Type
  7596 ;;		None
  7597 ;; Return value:  Size  Location     Type
  7598 ;;                  1    wreg      void 
  7599 ;; Registers used:
  7600 ;;		wreg, status,2, status,0, btemp+1
  7601 ;; Tracked objects:
  7602 ;;		On entry : 0/0
  7603 ;;		On exit  : 0/0
  7604 ;;		Unchanged: 0/0
  7605 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7606 ;;      Params:         0       0       0       0       0
  7607 ;;      Locals:         0       0       0       0       0
  7608 ;;      Temps:          0       0       0       0       0
  7609 ;;      Totals:         0       0       0       0       0
  7610 ;;Total ram usage:        0 bytes
  7611 ;; Hardware stack levels used:    1
  7612 ;; This function calls:
  7613 ;;		Nothing
  7614 ;; This function is called by:
  7615 ;;		_checkmyisr
  7616 ;; This function uses a non-reentrant model
  7617 ;;
  7618                           
  7619                           
  7620                           ;psect for function _timer0_interrupt_ovfRoutine
  7621  099F                     _timer0_interrupt_ovfRoutine:
  7622  099F                     i1l4361:	
  7623                           ;incstack = 0
  7624                           ; Regs used in _timer0_interrupt_ovfRoutine: [wreg+status,2+status,0+btemp+1]
  7625                           
  7626  099F  1683               	bsf	3,5	;RP0=1, select bank1
  7627  09A0  1303               	bcf	3,6	;RP1=0, select bank1
  7628  09A1  0187               	clrf	7	;volatile
  7629  09A2                     i1l4363:
  7630                           
  7631                           ;Timer.c: 110: *((reg_type8_t)(0x001F)) |=0x04;
  7632  09A2  1283               	bcf	3,5	;RP0=0, select bank0
  7633  09A3  1303               	bcf	3,6	;RP1=0, select bank0
  7634  09A4  151F               	bsf	31,2	;volatile
  7635  09A5                     i1l4365:
  7636                           
  7637                           ;Timer.c: 111: *((reg_type8_t)(0x0007)) ^= 0xFF;
  7638  09A5  30FF               	movlw	255
  7639  09A6  00FF               	movwf	btemp+1
  7640  09A7  087F               	movf	btemp+1,w
  7641  09A8  0687               	xorwf	7,f	;volatile
  7642  09A9                     i1l4367:
  7643                           
  7644                           ;Timer.c: 114: *((reg_type8_t)(0x000B)) &= (~0x04);
  7645  09A9  30FB               	movlw	251
  7646  09AA  00FF               	movwf	btemp+1
  7647  09AB  087F               	movf	btemp+1,w
  7648  09AC  058B               	andwf	11,f	;volatile
  7649  09AD                     i1l552:
  7650  09AD  0008               	return
  7651  09AE                     __end_of_timer0_interrupt_ovfRoutine:
  7652                           
  7653                           	psect	text41
  7654  0A61                     __ptext41:	
  7655 ;; *************** function _seven_seg_POV *****************
  7656 ;; Defined at:
  7657 ;;		line 26 in file "seven_segment.c"
  7658 ;; Parameters:    Size  Location     Type
  7659 ;;		None
  7660 ;; Auto vars:     Size  Location     Type
  7661 ;;		None
  7662 ;; Return value:  Size  Location     Type
  7663 ;;                  1    wreg      void 
  7664 ;; Registers used:
  7665 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7666 ;; Tracked objects:
  7667 ;;		On entry : 0/0
  7668 ;;		On exit  : 0/0
  7669 ;;		Unchanged: 0/0
  7670 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7671 ;;      Params:         0       0       0       0       0
  7672 ;;      Locals:         0       0       0       0       0
  7673 ;;      Temps:          0       0       0       0       0
  7674 ;;      Totals:         0       0       0       0       0
  7675 ;;Total ram usage:        0 bytes
  7676 ;; Hardware stack levels used:    1
  7677 ;; Hardware stack levels required when called:    3
  7678 ;; This function calls:
  7679 ;;		_sevenSegEnable
  7680 ;; This function is called by:
  7681 ;;		_checkmyisr
  7682 ;; This function uses a non-reentrant model
  7683 ;;
  7684                           
  7685                           
  7686                           ;psect for function _seven_seg_POV
  7687  0A61                     _seven_seg_POV:
  7688  0A61                     i1l4307:	
  7689                           ;incstack = 0
  7690 ;; hardware stack exceeded
  7691                           ; Regs used in _seven_seg_POV: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7692                           
  7693                           
  7694                           ;seven_segment.c: 28:     if(ovf_counter > 50){
  7695  0A61  3033               	movlw	51
  7696  0A62  1283               	bcf	3,5	;RP0=0, select bank0
  7697  0A63  1303               	bcf	3,6	;RP1=0, select bank0
  7698  0A64  0242               	subwf	_ovf_counter,w
  7699  0A65  1C03               	skipc
  7700  0A66  2A68               	goto	u175_21
  7701  0A67  2A69               	goto	u175_20
  7702  0A68                     u175_21:
  7703  0A68  2A8A               	goto	i1l4323
  7704  0A69                     u175_20:
  7705  0A69                     i1l4309:
  7706                           
  7707                           ;seven_segment.c: 29:     *((reg_type8_t)(0x0008))=0x00;
  7708  0A69  0188               	clrf	8	;volatile
  7709  0A6A                     i1l4311:
  7710                           
  7711                           ;seven_segment.c: 30:     sevenSegEnable(disp_counter);
  7712  0A6A  0841               	movf	_disp_counter,w
  7713  0A6B  120A  158A  24D0  120A  158A  	fcall	_sevenSegEnable
  7714  0A70                     i1l4313:
  7715                           
  7716                           ;seven_segment.c: 31:     *((reg_type8_t)(0x0008)) = Segments_Code[arr_display[disp_coun
      +                          ter]];
  7717  0A70  1283               	bcf	3,5	;RP0=0, select bank0
  7718  0A71  1303               	bcf	3,6	;RP1=0, select bank0
  7719  0A72  0841               	movf	_disp_counter,w
  7720  0A73  3E2A               	addlw	(low (_arr_display| 0))& (0+255)
  7721  0A74  0084               	movwf	4
  7722  0A75  1383               	bcf	3,7	;select IRP bank0
  7723  0A76  0800               	movf	0,w
  7724  0A77  3EA4               	addlw	(low (_Segments_Code| (0+256)))& (0+255)
  7725  0A78  0084               	movwf	4
  7726  0A79  1783               	bsf	3,7	;select IRP bank3
  7727  0A7A  0800               	movf	0,w
  7728  0A7B  00FF               	movwf	btemp+1
  7729  0A7C  087F               	movf	btemp+1,w
  7730  0A7D  0088               	movwf	8	;volatile
  7731  0A7E                     i1l4315:
  7732                           
  7733                           ;seven_segment.c: 32: ovf_counter=0;
  7734  0A7E  01C2               	clrf	_ovf_counter
  7735  0A7F                     i1l4317:
  7736                           
  7737                           ;seven_segment.c: 33:  disp_counter++;
  7738  0A7F  3001               	movlw	1
  7739  0A80  00FF               	movwf	btemp+1
  7740  0A81  087F               	movf	btemp+1,w
  7741  0A82  07C1               	addwf	_disp_counter,f
  7742  0A83                     i1l4319:
  7743                           
  7744                           ;seven_segment.c: 34:     if(disp_counter == 2)
  7745  0A83  3002               	movlw	2
  7746  0A84  0641               	xorwf	_disp_counter,w
  7747  0A85  1D03               	btfss	3,2
  7748  0A86  2A88               	goto	u176_21
  7749  0A87  2A89               	goto	u176_20
  7750  0A88                     u176_21:
  7751  0A88  2A8A               	goto	i1l4323
  7752  0A89                     u176_20:
  7753  0A89                     i1l4321:
  7754                           
  7755                           ;seven_segment.c: 35:         disp_counter = 0;
  7756  0A89  01C1               	clrf	_disp_counter
  7757  0A8A                     i1l4323:
  7758                           
  7759                           ;seven_segment.c: 37:    ovf_counter++;
  7760  0A8A  3001               	movlw	1
  7761  0A8B  00FF               	movwf	btemp+1
  7762  0A8C  087F               	movf	btemp+1,w
  7763  0A8D  07C2               	addwf	_ovf_counter,f
  7764  0A8E                     i1l4325:
  7765                           
  7766                           ;seven_segment.c: 39: *((reg_type8_t)(0x000B)) &= (~0x04);
  7767  0A8E  30FB               	movlw	251
  7768  0A8F  00FF               	movwf	btemp+1
  7769  0A90  087F               	movf	btemp+1,w
  7770  0A91  058B               	andwf	11,f	;volatile
  7771  0A92                     i1l72:
  7772  0A92  0008               	return
  7773  0A93                     __end_of_seven_seg_POV:
  7774                           
  7775                           	psect	text42
  7776  0928                     __ptext42:	
  7777 ;; *************** function _timer_interrupt *****************
  7778 ;; Defined at:
  7779 ;;		line 219 in file "SOS.c"
  7780 ;; Parameters:    Size  Location     Type
  7781 ;;		None
  7782 ;; Auto vars:     Size  Location     Type
  7783 ;;		None
  7784 ;; Return value:  Size  Location     Type
  7785 ;;                  1    wreg      void 
  7786 ;; Registers used:
  7787 ;;		wreg, status,2, status,0, btemp+1
  7788 ;; Tracked objects:
  7789 ;;		On entry : 0/0
  7790 ;;		On exit  : 0/0
  7791 ;;		Unchanged: 0/0
  7792 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7793 ;;      Params:         0       0       0       0       0
  7794 ;;      Locals:         0       0       0       0       0
  7795 ;;      Temps:          0       0       0       0       0
  7796 ;;      Totals:         0       0       0       0       0
  7797 ;;Total ram usage:        0 bytes
  7798 ;; Hardware stack levels used:    1
  7799 ;; This function calls:
  7800 ;;		Nothing
  7801 ;; This function is called by:
  7802 ;;		_SOS_Init
  7803 ;;		_checkmyisr
  7804 ;; This function uses a non-reentrant model
  7805 ;;
  7806                           
  7807                           
  7808                           ;psect for function _timer_interrupt
  7809  0928                     _timer_interrupt:
  7810  0928                     i1l4357:	
  7811                           ;incstack = 0
  7812                           ; Regs used in _timer_interrupt: [wreg+status,2+status,0+btemp+1]
  7813                           
  7814                           
  7815                           ;SOS.c: 221: u8Excution_to_be_done=1;
  7816  0928  3001               	movlw	1
  7817  0929  00FF               	movwf	btemp+1
  7818  092A  087F               	movf	btemp+1,w
  7819  092B  1283               	bcf	3,5	;RP0=0, select bank0
  7820  092C  1303               	bcf	3,6	;RP1=0, select bank0
  7821  092D  00B5               	movwf	_u8Excution_to_be_done	;volatile
  7822  092E                     i1l4359:
  7823                           
  7824                           ;SOS.c: 222: *((reg_type8_t)(0x000C)) &= (~0x02);
  7825  092E  30FD               	movlw	253
  7826  092F  00FF               	movwf	btemp+1
  7827  0930  087F               	movf	btemp+1,w
  7828  0931  058C               	andwf	12,f	;volatile
  7829  0932                     i1l491:
  7830  0932  0008               	return
  7831  0933                     __end_of_timer_interrupt:
  7832                           
  7833                           	psect	text43
  7834  0CD0                     __ptext43:	
  7835 ;; *************** function _sevenSegEnable *****************
  7836 ;; Defined at:
  7837 ;;		line 45 in file "seven_segment.c"
  7838 ;; Parameters:    Size  Location     Type
  7839 ;;  segment_id      1    wreg     unsigned char 
  7840 ;; Auto vars:     Size  Location     Type
  7841 ;;  segment_id      1   12[COMMON] unsigned char 
  7842 ;;  ret             1   13[COMMON] unsigned char 
  7843 ;; Return value:  Size  Location     Type
  7844 ;;                  1    wreg      unsigned char 
  7845 ;; Registers used:
  7846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7847 ;; Tracked objects:
  7848 ;;		On entry : 0/0
  7849 ;;		On exit  : 0/0
  7850 ;;		Unchanged: 0/0
  7851 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7852 ;;      Params:         0       0       0       0       0
  7853 ;;      Locals:         2       0       0       0       0
  7854 ;;      Temps:          2       0       0       0       0
  7855 ;;      Totals:         4       0       0       0       0
  7856 ;;Total ram usage:        4 bytes
  7857 ;; Hardware stack levels used:    1
  7858 ;; Hardware stack levels required when called:    2
  7859 ;; This function calls:
  7860 ;;		i1_DIO_Write
  7861 ;;		i1_sevenSegDisable
  7862 ;; This function is called by:
  7863 ;;		_seven_seg_POV
  7864 ;; This function uses a non-reentrant model
  7865 ;;
  7866                           
  7867                           
  7868                           ;psect for function _sevenSegEnable
  7869  0CD0                     _sevenSegEnable:
  7870                           
  7871                           ;incstack = 0
  7872 ;; hardware stack exceeded
  7873                           ; Regs used in _sevenSegEnable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  7874                           ;sevenSegEnable@segment_id stored from wreg
  7875  0CD0  00FC               	movwf	sevenSegEnable@segment_id
  7876  0CD1                     i1l4169:
  7877                           
  7878                           ;seven_segment.c: 45: ERROR_STATUS sevenSegEnable(uint8_t segment_id);seven_segment.c: 4
      +                          6: {uint8_t ret=0;
  7879  0CD1  01FD               	clrf	sevenSegEnable@ret
  7880                           
  7881                           ;seven_segment.c: 47: switch(segment_id)
  7882  0CD2  2D09               	goto	i1l4177
  7883  0CD3                     i1l4171:
  7884                           
  7885                           ;seven_segment.c: 50: ret += sevenSegDisable(SEG_1);
  7886  0CD3  3001               	movlw	1
  7887  0CD4  120A  158A  2293  120A  158A  	fcall	i1_sevenSegDisable
  7888  0CD9  00FF               	movwf	btemp+1
  7889  0CDA  087F               	movf	btemp+1,w
  7890  0CDB  07FD               	addwf	sevenSegEnable@ret,f
  7891                           
  7892                           ;seven_segment.c: 51: ret +=DIO_Write(0,0x04,0xFF);
  7893  0CDC  3004               	movlw	4
  7894  0CDD  00FF               	movwf	btemp+1
  7895  0CDE  087F               	movf	btemp+1,w
  7896  0CDF  00F0               	movwf	i1DIO_Write@pins
  7897  0CE0  30FF               	movlw	255
  7898  0CE1  00FF               	movwf	btemp+1
  7899  0CE2  087F               	movf	btemp+1,w
  7900  0CE3  00F1               	movwf	i1DIO_Write@value
  7901  0CE4  3000               	movlw	0
  7902  0CE5  120A  118A  2435  120A  158A  	fcall	i1_DIO_Write
  7903  0CEA  00FF               	movwf	btemp+1
  7904  0CEB  087F               	movf	btemp+1,w
  7905  0CEC  07FD               	addwf	sevenSegEnable@ret,f
  7906                           
  7907                           ;seven_segment.c: 52: break;
  7908  0CED  2D19               	goto	i1l79
  7909  0CEE                     i1l4173:
  7910                           
  7911                           ;seven_segment.c: 54: ret += sevenSegDisable(SEG_0);
  7912  0CEE  3000               	movlw	0
  7913  0CEF  120A  158A  2293  120A  158A  	fcall	i1_sevenSegDisable
  7914  0CF4  00FF               	movwf	btemp+1
  7915  0CF5  087F               	movf	btemp+1,w
  7916  0CF6  07FD               	addwf	sevenSegEnable@ret,f
  7917                           
  7918                           ;seven_segment.c: 55: ret +=DIO_Write(0,0x08,0xFF);
  7919  0CF7  3008               	movlw	8
  7920  0CF8  00FF               	movwf	btemp+1
  7921  0CF9  087F               	movf	btemp+1,w
  7922  0CFA  00F0               	movwf	i1DIO_Write@pins
  7923  0CFB  30FF               	movlw	255
  7924  0CFC  00FF               	movwf	btemp+1
  7925  0CFD  087F               	movf	btemp+1,w
  7926  0CFE  00F1               	movwf	i1DIO_Write@value
  7927  0CFF  3000               	movlw	0
  7928  0D00  120A  118A  2435  120A  158A  	fcall	i1_DIO_Write
  7929  0D05  00FF               	movwf	btemp+1
  7930  0D06  087F               	movf	btemp+1,w
  7931  0D07  07FD               	addwf	sevenSegEnable@ret,f
  7932                           
  7933                           ;seven_segment.c: 56: break;
  7934  0D08  2D19               	goto	i1l79
  7935  0D09                     i1l4177:
  7936  0D09  087C               	movf	sevenSegEnable@segment_id,w
  7937  0D0A  00FA               	movwf	??_sevenSegEnable
  7938  0D0B  01FB               	clrf	??_sevenSegEnable+1
  7939                           
  7940                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7941                           ; Switch size 1, requested type "simple"
  7942                           ; Number of cases is 1, Range of values is 0 to 0
  7943                           ; switch strategies available:
  7944                           ; Name         Instructions Cycles
  7945                           ; simple_byte            4     3 (average)
  7946                           ; direct_byte           11     8 (fixed)
  7947                           ; jumptable            260     6 (fixed)
  7948                           ;	Chosen strategy is simple_byte
  7949  0D0C  087B               	movf	??_sevenSegEnable+1,w
  7950  0D0D  3A00               	xorlw	0	; case 0
  7951  0D0E  1903               	skipnz
  7952  0D0F  2D11               	goto	i1l6459
  7953  0D10  2D19               	goto	i1l79
  7954  0D11                     i1l6459:
  7955                           
  7956                           ; Switch size 1, requested type "simple"
  7957                           ; Number of cases is 2, Range of values is 0 to 1
  7958                           ; switch strategies available:
  7959                           ; Name         Instructions Cycles
  7960                           ; simple_byte            7     4 (average)
  7961                           ; direct_byte           14     8 (fixed)
  7962                           ; jumptable            260     6 (fixed)
  7963                           ;	Chosen strategy is simple_byte
  7964  0D11  087A               	movf	??_sevenSegEnable,w
  7965  0D12  3A00               	xorlw	0	; case 0
  7966  0D13  1903               	skipnz
  7967  0D14  2CD3               	goto	i1l4171
  7968  0D15  3A01               	xorlw	1	; case 1
  7969  0D16  1903               	skipnz
  7970  0D17  2CEE               	goto	i1l4173
  7971  0D18  2D19               	goto	i1l79
  7972  0D19                     i1l79:
  7973  0D19  0008               	return
  7974  0D1A                     __end_of_sevenSegEnable:
  7975                           
  7976                           	psect	text44
  7977  0A93                     __ptext44:	
  7978 ;; *************** function i1_sevenSegDisable *****************
  7979 ;; Defined at:
  7980 ;;		line 67 in file "seven_segment.c"
  7981 ;; Parameters:    Size  Location     Type
  7982 ;;  en_segment_i    1    wreg     enum E96
  7983 ;; Auto vars:     Size  Location     Type
  7984 ;;  en_segment_i    1    8[COMMON] enum E96
  7985 ;;  ret             1    9[COMMON] unsigned char 
  7986 ;; Return value:  Size  Location     Type
  7987 ;;                  1    wreg      unsigned char 
  7988 ;; Registers used:
  7989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  7990 ;; Tracked objects:
  7991 ;;		On entry : 0/0
  7992 ;;		On exit  : 0/0
  7993 ;;		Unchanged: 0/0
  7994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  7995 ;;      Params:         0       0       0       0       0
  7996 ;;      Locals:         2       0       0       0       0
  7997 ;;      Temps:          2       0       0       0       0
  7998 ;;      Totals:         4       0       0       0       0
  7999 ;;Total ram usage:        4 bytes
  8000 ;; Hardware stack levels used:    1
  8001 ;; Hardware stack levels required when called:    1
  8002 ;; This function calls:
  8003 ;;		i1_DIO_Write
  8004 ;; This function is called by:
  8005 ;;		_sevenSegEnable
  8006 ;; This function uses a non-reentrant model
  8007 ;;
  8008                           
  8009                           
  8010                           ;psect for function i1_sevenSegDisable
  8011  0A93                     i1_sevenSegDisable:
  8012                           
  8013                           ;incstack = 0
  8014 ;; hardware stack exceeded
  8015                           ; Regs used in i1_sevenSegDisable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  8016                           ;i1sevenSegDisable@en_segment_id stored from wreg
  8017  0A93  00F8               	movwf	i1sevenSegDisable@en_segment_id
  8018  0A94                     i1l4099:
  8019                           
  8020                           ;seven_segment.c: 67: ERROR_STATUS sevenSegDisable(En_SevenSegId_t en_segment_id);seven_
      +                          segment.c: 68: {;seven_segment.c: 70: uint8_t ret=0;
  8021  0A94  01F9               	clrf	i1sevenSegDisable@ret
  8022                           
  8023                           ;seven_segment.c: 71: switch(en_segment_id)
  8024  0A95  2AB4               	goto	i1l4107
  8025  0A96                     i1l4101:
  8026                           
  8027                           ;seven_segment.c: 74: ret +=DIO_Write(0,0x04,0);
  8028  0A96  3004               	movlw	4
  8029  0A97  00FF               	movwf	btemp+1
  8030  0A98  087F               	movf	btemp+1,w
  8031  0A99  00F0               	movwf	i1DIO_Write@pins
  8032  0A9A  01F1               	clrf	i1DIO_Write@value
  8033  0A9B  3000               	movlw	0
  8034  0A9C  120A  118A  2435  120A  158A  	fcall	i1_DIO_Write
  8035  0AA1  00FF               	movwf	btemp+1
  8036  0AA2  087F               	movf	btemp+1,w
  8037  0AA3  07F9               	addwf	i1sevenSegDisable@ret,f
  8038                           
  8039                           ;seven_segment.c: 75: break;
  8040  0AA4  2AC4               	goto	i1l4109
  8041  0AA5                     i1l4103:
  8042                           
  8043                           ;seven_segment.c: 77: ret +=DIO_Write(0,0x08,0);
  8044  0AA5  3008               	movlw	8
  8045  0AA6  00FF               	movwf	btemp+1
  8046  0AA7  087F               	movf	btemp+1,w
  8047  0AA8  00F0               	movwf	i1DIO_Write@pins
  8048  0AA9  01F1               	clrf	i1DIO_Write@value
  8049  0AAA  3000               	movlw	0
  8050  0AAB  120A  118A  2435  120A  158A  	fcall	i1_DIO_Write
  8051  0AB0  00FF               	movwf	btemp+1
  8052  0AB1  087F               	movf	btemp+1,w
  8053  0AB2  07F9               	addwf	i1sevenSegDisable@ret,f
  8054                           
  8055                           ;seven_segment.c: 78: break;
  8056  0AB3  2AC4               	goto	i1l4109
  8057  0AB4                     i1l4107:
  8058  0AB4  0878               	movf	i1sevenSegDisable@en_segment_id,w
  8059  0AB5  00F6               	movwf	??i1_sevenSegDisable
  8060  0AB6  01F7               	clrf	??i1_sevenSegDisable+1
  8061                           
  8062                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8063                           ; Switch size 1, requested type "simple"
  8064                           ; Number of cases is 1, Range of values is 0 to 0
  8065                           ; switch strategies available:
  8066                           ; Name         Instructions Cycles
  8067                           ; simple_byte            4     3 (average)
  8068                           ; direct_byte           11     8 (fixed)
  8069                           ; jumptable            260     6 (fixed)
  8070                           ;	Chosen strategy is simple_byte
  8071  0AB7  0877               	movf	??i1_sevenSegDisable+1,w
  8072  0AB8  3A00               	xorlw	0	; case 0
  8073  0AB9  1903               	skipnz
  8074  0ABA  2ABC               	goto	i1l6461
  8075  0ABB  2AC4               	goto	i1l4109
  8076  0ABC                     i1l6461:
  8077                           
  8078                           ; Switch size 1, requested type "simple"
  8079                           ; Number of cases is 2, Range of values is 0 to 1
  8080                           ; switch strategies available:
  8081                           ; Name         Instructions Cycles
  8082                           ; simple_byte            7     4 (average)
  8083                           ; direct_byte           14     8 (fixed)
  8084                           ; jumptable            260     6 (fixed)
  8085                           ;	Chosen strategy is simple_byte
  8086  0ABC  0876               	movf	??i1_sevenSegDisable,w
  8087  0ABD  3A00               	xorlw	0	; case 0
  8088  0ABE  1903               	skipnz
  8089  0ABF  2A96               	goto	i1l4101
  8090  0AC0  3A01               	xorlw	1	; case 1
  8091  0AC1  1903               	skipnz
  8092  0AC2  2AA5               	goto	i1l4103
  8093  0AC3  2AC4               	goto	i1l4109
  8094  0AC4                     i1l4109:
  8095                           
  8096                           ;seven_segment.c: 80: return ret;
  8097  0AC4  0879               	movf	i1sevenSegDisable@ret,w
  8098  0AC5                     i1l86:
  8099  0AC5  0008               	return
  8100  0AC6                     __end_ofi1_sevenSegDisable:
  8101                           
  8102                           	psect	text45
  8103  0435                     __ptext45:	
  8104 ;; *************** function i1_DIO_Write *****************
  8105 ;; Defined at:
  8106 ;;		line 132 in file "DIO.c"
  8107 ;; Parameters:    Size  Location     Type
  8108 ;;  GPIO            1    wreg     unsigned char 
  8109 ;;  pins            1    0[COMMON] unsigned char 
  8110 ;;  value           1    1[COMMON] unsigned char 
  8111 ;; Auto vars:     Size  Location     Type
  8112 ;;  GPIO            1    5[COMMON] unsigned char 
  8113 ;;  ret_error       1    4[COMMON] unsigned char 
  8114 ;; Return value:  Size  Location     Type
  8115 ;;                  1    wreg      unsigned char 
  8116 ;; Registers used:
  8117 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  8118 ;; Tracked objects:
  8119 ;;		On entry : 0/0
  8120 ;;		On exit  : 0/0
  8121 ;;		Unchanged: 0/0
  8122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8123 ;;      Params:         2       0       0       0       0
  8124 ;;      Locals:         2       0       0       0       0
  8125 ;;      Temps:          2       0       0       0       0
  8126 ;;      Totals:         6       0       0       0       0
  8127 ;;Total ram usage:        6 bytes
  8128 ;; Hardware stack levels used:    1
  8129 ;; This function calls:
  8130 ;;		Nothing
  8131 ;; This function is called by:
  8132 ;;		_sevenSegEnable
  8133 ;;		i1_sevenSegDisable
  8134 ;; This function uses a non-reentrant model
  8135 ;;
  8136                           
  8137                           
  8138                           ;psect for function i1_DIO_Write
  8139  0435                     i1_DIO_Write:
  8140                           
  8141                           ;incstack = 0
  8142 ;; hardware stack exceeded
  8143                           ; Regs used in i1_DIO_Write: [wreg-fsr0h+status,2+status,0+btemp+1]
  8144                           ;i1DIO_Write@GPIO stored from wreg
  8145  0435  00F5               	movwf	i1DIO_Write@GPIO
  8146  0436                     i1l3603:
  8147                           
  8148                           ;DIO.c: 132: ERROR_STATUS DIO_Write (uint8_t GPIO, uint8_t pins, uint8_t value);DIO.c: 1
      +                          33: { uint8_t ret_error=0;
  8149  0436  01F4               	clrf	i1DIO_Write@ret_error
  8150  0437                     i1l3605:
  8151                           
  8152                           ;DIO.c: 135:   static uint8_t first_powerup = 0;;DIO.c: 136: if (first_powerup == 0) {
  8153  0437  1283               	bcf	3,5	;RP0=0, select bank0
  8154  0438  1303               	bcf	3,6	;RP1=0, select bank0
  8155  0439  0839               	movf	DIO_Write@first_powerup,w
  8156  043A  1D03               	btfss	3,2
  8157  043B  2C3D               	goto	u137_21
  8158  043C  2C3E               	goto	u137_20
  8159  043D                     u137_21:
  8160  043D  2CD5               	goto	i1l3661
  8161  043E                     u137_20:
  8162  043E  2C49               	goto	i1l3621
  8163  043F                     i1l3609:
  8164                           
  8165                           ;DIO.c: 139:   *((reg_type8_t)(0x0005))=0x00;
  8166  043F  0185               	clrf	5	;volatile
  8167                           
  8168                           ;DIO.c: 140:   break;
  8169  0440  2C62               	goto	i1l3623
  8170  0441                     i1l3611:
  8171                           
  8172                           ;DIO.c: 142:   *((reg_type8_t)(0x0006))=0x00;
  8173  0441  0186               	clrf	6	;volatile
  8174                           
  8175                           ;DIO.c: 143:   break;
  8176  0442  2C62               	goto	i1l3623
  8177  0443                     i1l3613:
  8178                           
  8179                           ;DIO.c: 145:   *((reg_type8_t)(0x0007))=0x00;
  8180  0443  0187               	clrf	7	;volatile
  8181                           
  8182                           ;DIO.c: 146:   break;
  8183  0444  2C62               	goto	i1l3623
  8184  0445                     i1l3615:
  8185                           
  8186                           ;DIO.c: 148:   *((reg_type8_t)(0x0008))=0x00;
  8187  0445  0188               	clrf	8	;volatile
  8188                           
  8189                           ;DIO.c: 149:   break;
  8190  0446  2C62               	goto	i1l3623
  8191  0447                     i1l3617:
  8192                           
  8193                           ;DIO.c: 151:   *((reg_type8_t)(0x0009))=0x00;
  8194  0447  0189               	clrf	9	;volatile
  8195                           
  8196                           ;DIO.c: 152:   break;
  8197  0448  2C62               	goto	i1l3623
  8198  0449                     i1l3621:
  8199  0449  0875               	movf	i1DIO_Write@GPIO,w
  8200  044A  00F2               	movwf	??i1_DIO_Write
  8201  044B  01F3               	clrf	??i1_DIO_Write+1
  8202                           
  8203                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8204                           ; Switch size 1, requested type "simple"
  8205                           ; Number of cases is 1, Range of values is 0 to 0
  8206                           ; switch strategies available:
  8207                           ; Name         Instructions Cycles
  8208                           ; simple_byte            4     3 (average)
  8209                           ; direct_byte           11     8 (fixed)
  8210                           ; jumptable            260     6 (fixed)
  8211                           ;	Chosen strategy is simple_byte
  8212  044C  0873               	movf	??i1_DIO_Write+1,w
  8213  044D  3A00               	xorlw	0	; case 0
  8214  044E  1903               	skipnz
  8215  044F  2C51               	goto	i1l6463
  8216  0450  2C62               	goto	i1l3623
  8217  0451                     i1l6463:
  8218                           
  8219                           ; Switch size 1, requested type "simple"
  8220                           ; Number of cases is 5, Range of values is 0 to 4
  8221                           ; switch strategies available:
  8222                           ; Name         Instructions Cycles
  8223                           ; simple_byte           16     9 (average)
  8224                           ; direct_byte           23     8 (fixed)
  8225                           ; jumptable            260     6 (fixed)
  8226                           ;	Chosen strategy is simple_byte
  8227  0451  0872               	movf	??i1_DIO_Write,w
  8228  0452  3A00               	xorlw	0	; case 0
  8229  0453  1903               	skipnz
  8230  0454  2C3F               	goto	i1l3609
  8231  0455  3A01               	xorlw	1	; case 1
  8232  0456  1903               	skipnz
  8233  0457  2C41               	goto	i1l3611
  8234  0458  3A03               	xorlw	3	; case 2
  8235  0459  1903               	skipnz
  8236  045A  2C43               	goto	i1l3613
  8237  045B  3A01               	xorlw	1	; case 3
  8238  045C  1903               	skipnz
  8239  045D  2C45               	goto	i1l3615
  8240  045E  3A07               	xorlw	7	; case 4
  8241  045F  1903               	skipnz
  8242  0460  2C47               	goto	i1l3617
  8243  0461  2C62               	goto	i1l3623
  8244  0462                     i1l3623:
  8245                           
  8246                           ;DIO.c: 154:   first_powerup++;
  8247  0462  3001               	movlw	1
  8248  0463  00FF               	movwf	btemp+1
  8249  0464  087F               	movf	btemp+1,w
  8250  0465  07B9               	addwf	DIO_Write@first_powerup,f
  8251  0466  2CD5               	goto	i1l3661
  8252  0467                     i1l3625:
  8253                           
  8254                           ;DIO.c: 160:       *((reg_type8_t)(0x0005)) |= pins;
  8255  0467  0870               	movf	i1DIO_Write@pins,w
  8256  0468  00FF               	movwf	btemp+1
  8257  0469  087F               	movf	btemp+1,w
  8258  046A  0485               	iorwf	5,f	;volatile
  8259                           
  8260                           ;DIO.c: 161:       break;
  8261  046B  2CE5               	goto	i1l3663
  8262  046C                     i1l3627:
  8263                           
  8264                           ;DIO.c: 163:       *((reg_type8_t)(0x0006)) |= pins;
  8265  046C  0870               	movf	i1DIO_Write@pins,w
  8266  046D  00FF               	movwf	btemp+1
  8267  046E  087F               	movf	btemp+1,w
  8268  046F  0486               	iorwf	6,f	;volatile
  8269                           
  8270                           ;DIO.c: 164:       break;
  8271  0470  2CE5               	goto	i1l3663
  8272  0471                     i1l3629:
  8273                           
  8274                           ;DIO.c: 166:       *((reg_type8_t)(0x0007)) |= pins;
  8275  0471  0870               	movf	i1DIO_Write@pins,w
  8276  0472  00FF               	movwf	btemp+1
  8277  0473  087F               	movf	btemp+1,w
  8278  0474  0487               	iorwf	7,f	;volatile
  8279                           
  8280                           ;DIO.c: 167:       break;
  8281  0475  2CE5               	goto	i1l3663
  8282  0476                     i1l3631:
  8283                           
  8284                           ;DIO.c: 169:       *((reg_type8_t)(0x0008)) |= pins;
  8285  0476  0870               	movf	i1DIO_Write@pins,w
  8286  0477  00FF               	movwf	btemp+1
  8287  0478  087F               	movf	btemp+1,w
  8288  0479  0488               	iorwf	8,f	;volatile
  8289                           
  8290                           ;DIO.c: 170:       break;
  8291  047A  2CE5               	goto	i1l3663
  8292  047B                     i1l3633:
  8293                           
  8294                           ;DIO.c: 172:       *((reg_type8_t)(0x0009)) |= pins;
  8295  047B  0870               	movf	i1DIO_Write@pins,w
  8296  047C  00FF               	movwf	btemp+1
  8297  047D  087F               	movf	btemp+1,w
  8298  047E  0489               	iorwf	9,f	;volatile
  8299                           
  8300                           ;DIO.c: 173:       break;
  8301  047F  2CE5               	goto	i1l3663
  8302  0480                     i1l3635:
  8303                           
  8304                           ;DIO.c: 175:       ret_error +=1 +14;
  8305  0480  300F               	movlw	15
  8306  0481  00FF               	movwf	btemp+1
  8307  0482  087F               	movf	btemp+1,w
  8308  0483  07F4               	addwf	i1DIO_Write@ret_error,f
  8309                           
  8310                           ;DIO.c: 176:       break;
  8311  0484  2CE5               	goto	i1l3663
  8312  0485                     i1l3639:
  8313  0485  0875               	movf	i1DIO_Write@GPIO,w
  8314  0486  00F2               	movwf	??i1_DIO_Write
  8315  0487  01F3               	clrf	??i1_DIO_Write+1
  8316                           
  8317                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8318                           ; Switch size 1, requested type "simple"
  8319                           ; Number of cases is 1, Range of values is 0 to 0
  8320                           ; switch strategies available:
  8321                           ; Name         Instructions Cycles
  8322                           ; simple_byte            4     3 (average)
  8323                           ; direct_byte           11     8 (fixed)
  8324                           ; jumptable            260     6 (fixed)
  8325                           ;	Chosen strategy is simple_byte
  8326  0488  0873               	movf	??i1_DIO_Write+1,w
  8327  0489  3A00               	xorlw	0	; case 0
  8328  048A  1903               	skipnz
  8329  048B  2C8D               	goto	i1l6465
  8330  048C  2C80               	goto	i1l3635
  8331  048D                     i1l6465:
  8332                           
  8333                           ; Switch size 1, requested type "simple"
  8334                           ; Number of cases is 5, Range of values is 0 to 4
  8335                           ; switch strategies available:
  8336                           ; Name         Instructions Cycles
  8337                           ; simple_byte           16     9 (average)
  8338                           ; direct_byte           23     8 (fixed)
  8339                           ; jumptable            260     6 (fixed)
  8340                           ;	Chosen strategy is simple_byte
  8341  048D  0872               	movf	??i1_DIO_Write,w
  8342  048E  3A00               	xorlw	0	; case 0
  8343  048F  1903               	skipnz
  8344  0490  2C67               	goto	i1l3625
  8345  0491  3A01               	xorlw	1	; case 1
  8346  0492  1903               	skipnz
  8347  0493  2C6C               	goto	i1l3627
  8348  0494  3A03               	xorlw	3	; case 2
  8349  0495  1903               	skipnz
  8350  0496  2C71               	goto	i1l3629
  8351  0497  3A01               	xorlw	1	; case 3
  8352  0498  1903               	skipnz
  8353  0499  2C76               	goto	i1l3631
  8354  049A  3A07               	xorlw	7	; case 4
  8355  049B  1903               	skipnz
  8356  049C  2C7B               	goto	i1l3633
  8357  049D  2C80               	goto	i1l3635
  8358  049E                     i1l3641:
  8359                           
  8360                           ;DIO.c: 183:       *((reg_type8_t)(0x0005)) &= (~pins);
  8361  049E  0970               	comf	i1DIO_Write@pins,w
  8362  049F  00FF               	movwf	btemp+1
  8363  04A0  087F               	movf	btemp+1,w
  8364  04A1  0585               	andwf	5,f	;volatile
  8365                           
  8366                           ;DIO.c: 184:       break;
  8367  04A2  2CE5               	goto	i1l3663
  8368  04A3                     i1l3643:
  8369                           
  8370                           ;DIO.c: 186:       *((reg_type8_t)(0x0006)) &= (~pins);
  8371  04A3  0970               	comf	i1DIO_Write@pins,w
  8372  04A4  00FF               	movwf	btemp+1
  8373  04A5  087F               	movf	btemp+1,w
  8374  04A6  0586               	andwf	6,f	;volatile
  8375                           
  8376                           ;DIO.c: 187:       break;
  8377  04A7  2CE5               	goto	i1l3663
  8378  04A8                     i1l3645:
  8379                           
  8380                           ;DIO.c: 189:       *((reg_type8_t)(0x0007)) &= (~pins);
  8381  04A8  0970               	comf	i1DIO_Write@pins,w
  8382  04A9  00FF               	movwf	btemp+1
  8383  04AA  087F               	movf	btemp+1,w
  8384  04AB  0587               	andwf	7,f	;volatile
  8385                           
  8386                           ;DIO.c: 190:       break;
  8387  04AC  2CE5               	goto	i1l3663
  8388  04AD                     i1l3647:
  8389                           
  8390                           ;DIO.c: 192:       *((reg_type8_t)(0x0008)) &= (~pins);
  8391  04AD  0970               	comf	i1DIO_Write@pins,w
  8392  04AE  00FF               	movwf	btemp+1
  8393  04AF  087F               	movf	btemp+1,w
  8394  04B0  0588               	andwf	8,f	;volatile
  8395                           
  8396                           ;DIO.c: 193:       break;
  8397  04B1  2CE5               	goto	i1l3663
  8398  04B2                     i1l3649:
  8399                           
  8400                           ;DIO.c: 195:       *((reg_type8_t)(0x0009)) &= (~pins);
  8401  04B2  0970               	comf	i1DIO_Write@pins,w
  8402  04B3  00FF               	movwf	btemp+1
  8403  04B4  087F               	movf	btemp+1,w
  8404  04B5  0589               	andwf	9,f	;volatile
  8405                           
  8406                           ;DIO.c: 196:       break;
  8407  04B6  2CE5               	goto	i1l3663
  8408  04B7                     i1l3655:
  8409  04B7  0875               	movf	i1DIO_Write@GPIO,w
  8410  04B8  00F2               	movwf	??i1_DIO_Write
  8411  04B9  01F3               	clrf	??i1_DIO_Write+1
  8412                           
  8413                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8414                           ; Switch size 1, requested type "simple"
  8415                           ; Number of cases is 1, Range of values is 0 to 0
  8416                           ; switch strategies available:
  8417                           ; Name         Instructions Cycles
  8418                           ; simple_byte            4     3 (average)
  8419                           ; direct_byte           11     8 (fixed)
  8420                           ; jumptable            260     6 (fixed)
  8421                           ;	Chosen strategy is simple_byte
  8422  04BA  0873               	movf	??i1_DIO_Write+1,w
  8423  04BB  3A00               	xorlw	0	; case 0
  8424  04BC  1903               	skipnz
  8425  04BD  2CBF               	goto	i1l6467
  8426  04BE  2C80               	goto	i1l3635
  8427  04BF                     i1l6467:
  8428                           
  8429                           ; Switch size 1, requested type "simple"
  8430                           ; Number of cases is 5, Range of values is 0 to 4
  8431                           ; switch strategies available:
  8432                           ; Name         Instructions Cycles
  8433                           ; simple_byte           16     9 (average)
  8434                           ; direct_byte           23     8 (fixed)
  8435                           ; jumptable            260     6 (fixed)
  8436                           ;	Chosen strategy is simple_byte
  8437  04BF  0872               	movf	??i1_DIO_Write,w
  8438  04C0  3A00               	xorlw	0	; case 0
  8439  04C1  1903               	skipnz
  8440  04C2  2C9E               	goto	i1l3641
  8441  04C3  3A01               	xorlw	1	; case 1
  8442  04C4  1903               	skipnz
  8443  04C5  2CA3               	goto	i1l3643
  8444  04C6  3A03               	xorlw	3	; case 2
  8445  04C7  1903               	skipnz
  8446  04C8  2CA8               	goto	i1l3645
  8447  04C9  3A01               	xorlw	1	; case 3
  8448  04CA  1903               	skipnz
  8449  04CB  2CAD               	goto	i1l3647
  8450  04CC  3A07               	xorlw	7	; case 4
  8451  04CD  1903               	skipnz
  8452  04CE  2CB2               	goto	i1l3649
  8453  04CF  2C80               	goto	i1l3635
  8454  04D0                     i1l3657:
  8455                           
  8456                           ;DIO.c: 204: ret_error +=1 +18;
  8457  04D0  3013               	movlw	19
  8458  04D1  00FF               	movwf	btemp+1
  8459  04D2  087F               	movf	btemp+1,w
  8460  04D3  07F4               	addwf	i1DIO_Write@ret_error,f
  8461                           
  8462                           ;DIO.c: 205:   break;
  8463  04D4  2CE5               	goto	i1l3663
  8464  04D5                     i1l3661:
  8465  04D5  0871               	movf	i1DIO_Write@value,w
  8466  04D6  00F2               	movwf	??i1_DIO_Write
  8467  04D7  01F3               	clrf	??i1_DIO_Write+1
  8468                           
  8469                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  8470                           ; Switch size 1, requested type "simple"
  8471                           ; Number of cases is 1, Range of values is 0 to 0
  8472                           ; switch strategies available:
  8473                           ; Name         Instructions Cycles
  8474                           ; simple_byte            4     3 (average)
  8475                           ; direct_byte           11     8 (fixed)
  8476                           ; jumptable            260     6 (fixed)
  8477                           ;	Chosen strategy is simple_byte
  8478  04D8  0873               	movf	??i1_DIO_Write+1,w
  8479  04D9  3A00               	xorlw	0	; case 0
  8480  04DA  1903               	skipnz
  8481  04DB  2CDD               	goto	i1l6469
  8482  04DC  2CD0               	goto	i1l3657
  8483  04DD                     i1l6469:
  8484                           
  8485                           ; Switch size 1, requested type "simple"
  8486                           ; Number of cases is 2, Range of values is 0 to 255
  8487                           ; switch strategies available:
  8488                           ; Name         Instructions Cycles
  8489                           ; simple_byte            7     4 (average)
  8490                           ; jumptable            260     6 (fixed)
  8491                           ;	Chosen strategy is simple_byte
  8492  04DD  0872               	movf	??i1_DIO_Write,w
  8493  04DE  3A00               	xorlw	0	; case 0
  8494  04DF  1903               	skipnz
  8495  04E0  2CB7               	goto	i1l3655
  8496  04E1  3AFF               	xorlw	255	; case 255
  8497  04E2  1903               	skipnz
  8498  04E3  2C85               	goto	i1l3639
  8499  04E4  2CD0               	goto	i1l3657
  8500  04E5                     i1l3663:
  8501                           
  8502                           ;DIO.c: 207: return ret_error;
  8503  04E5  0874               	movf	i1DIO_Write@ret_error,w
  8504  04E6                     i1l372:
  8505  04E6  0008               	return
  8506  04E7                     __end_ofi1_DIO_Write:
  8507                           
  8508                           	psect	text46
  8509  0990                     __ptext46:	
  8510 ;; *************** function _adc_interrupt_routine *****************
  8511 ;; Defined at:
  8512 ;;		line 53 in file "ADC.c"
  8513 ;; Parameters:    Size  Location     Type
  8514 ;;		None
  8515 ;; Auto vars:     Size  Location     Type
  8516 ;;		None
  8517 ;; Return value:  Size  Location     Type
  8518 ;;                  1    wreg      void 
  8519 ;; Registers used:
  8520 ;;		wreg, status,2, status,0, btemp+1
  8521 ;; Tracked objects:
  8522 ;;		On entry : 0/0
  8523 ;;		On exit  : 0/0
  8524 ;;		Unchanged: 0/0
  8525 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  8526 ;;      Params:         0       0       0       0       0
  8527 ;;      Locals:         0       0       0       0       0
  8528 ;;      Temps:          0       0       0       0       0
  8529 ;;      Totals:         0       0       0       0       0
  8530 ;;Total ram usage:        0 bytes
  8531 ;; Hardware stack levels used:    1
  8532 ;; This function calls:
  8533 ;;		Nothing
  8534 ;; This function is called by:
  8535 ;;		_ADC_INIT
  8536 ;;		_checkmyisr
  8537 ;; This function uses a non-reentrant model
  8538 ;;
  8539                           
  8540                           
  8541                           ;psect for function _adc_interrupt_routine
  8542  0990                     _adc_interrupt_routine:
  8543  0990                     i1l4303:	
  8544                           ;incstack = 0
  8545                           ; Regs used in _adc_interrupt_routine: [wreg+status,2+status,0+btemp+1]
  8546                           
  8547                           
  8548                           ;ADC.c: 55: u16_result_data=((*((reg_type8_t)(0x001E))<<8)+*((reg_type8_t)(0x009E)));
  8549  0990  1283               	bcf	3,5	;RP0=0, select bank0
  8550  0991  1303               	bcf	3,6	;RP1=0, select bank0
  8551  0992  081E               	movf	30,w	;volatile
  8552  0993  00AD               	movwf	_u16_result_data+1
  8553  0994  1683               	bsf	3,5	;RP0=1, select bank1
  8554  0995  1303               	bcf	3,6	;RP1=0, select bank1
  8555  0996  081E               	movf	30,w	;volatile
  8556  0997  1283               	bcf	3,5	;RP0=0, select bank0
  8557  0998  1303               	bcf	3,6	;RP1=0, select bank0
  8558  0999  00AC               	movwf	_u16_result_data
  8559  099A                     i1l4305:
  8560                           
  8561                           ;ADC.c: 56: *((reg_type8_t)(0x000C)) &= (~0x40);
  8562  099A  30BF               	movlw	191
  8563  099B  00FF               	movwf	btemp+1
  8564  099C  087F               	movf	btemp+1,w
  8565  099D  058C               	andwf	12,f	;volatile
  8566  099E                     i1l34:
  8567  099E  0008               	return
  8568  099F                     __end_of_adc_interrupt_routine:
  8569  000B                     
  8570                           	psect	functab
  8571  005C                     __pfunctab:
  8572  005C                     __fptable:
  8573  005C                     fptable:
  8574  005C  00FF               	movwf	(btemp+1)& (0+127)
  8575  005D  3000               	movlw	high fptable
  8576  005E  008A               	movwf	10
  8577  005F  087F               	movf	(btemp+1)& (0+127),w
  8578  0060  0782               	addwf	2,f
  8579  0061                     fpbase:
  8580  0061  2861               	goto	fpbase	; Call via a null pointer and you will get stuck here.
  8581  0062                     fp_u0:
  8582  0062  2862               	ljmp	fp_u0	; unused
  8583  0063                     fp_u1:
  8584  0063  2863               	ljmp	fp_u1	; unused
  8585  0064                     fp_u2:
  8586  0064  2864               	ljmp	fp_u2	; unused
  8587  0065                     fp_u3:
  8588  0065  2865               	ljmp	fp_u3	; unused
  8589  0066                     fp_u4:
  8590  0066  2866               	ljmp	fp_u4	; unused
  8591  0067                     fp__Task3:
  8592  0067  120A  118A  2803   	ljmp	_Task3
  8593  006A                     fp__Task1:
  8594  006A  120A  158A  2D1A   	ljmp	_Task1
  8595  006D                     fp__Task2:
  8596  006D  120A  158A  2C13   	ljmp	_Task2
  8597  0070                     __end_of__fptable:
  8598  0070                     __i1fptable:
  8599  0070                     i1fptable:
  8600  0070  00FF               	movwf	(btemp+1)& (0+127)
  8601  0071  3000               	movlw	high i1fptable
  8602  0072  008A               	movwf	10
  8603  0073  087F               	movf	(btemp+1)& (0+127),w
  8604  0074  0782               	addwf	2,f
  8605  0075                     i1fpbase:
  8606  0075  2875               	goto	i1fpbase	; Call via a null pointer and you will get stuck here.
  8607  0076                     fp__adc_interrupt_routine:
  8608  0076  120A  158A  2990   	ljmp	_adc_interrupt_routine
  8609  0079                     fp__timer_interrupt:
  8610  0079  120A  158A  2928   	ljmp	_timer_interrupt
  8611  007C                     fp__seven_seg_POV:
  8612  007C  120A  158A  2A61   	ljmp	_seven_seg_POV
  8613  007F                     fp__timer0_interrupt_ovfRoutine:
  8614  007F  120A  158A  299F   	ljmp	_timer0_interrupt_ovfRoutine
  8615  0082                     fp__timer1_interrupt_ovfRoutine:
  8616  0082  120A  158A  29AE   	ljmp	_timer1_interrupt_ovfRoutine
  8617  0085                     __end_of__i1fptable:
  8618  007E                     btemp	set	126	;btemp
  8619  007E                     wtemp0	set	126

Data Sizes:
    Strings     0
    Constant    2
    Data        57
    BSS         105
    Persistent  1
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     22      76
    BANK1            80      0      79
    BANK3            96      4      34
    BANK2            96      0       0

Pointer List with Targets:

    Timer_Deinit_Configuration2.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Deinit_Configuration1.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Configuration1.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Init@Timer_cfg.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Init@Timer_cfg	PTR struct Timer_cfg_s size(1) Largest target is 5
		 -> Timer_Deinit_Configuration0(BANK1[5]), Timer_Configuration2_SOS(BANK1[5]), Timer_Configuration0(BANK1[5]), Timer_Configuration1_7_seg(BANK1[5]), 

    S351Buffer_Request$Fuction_consumer	PTR FTN()void  size(1) Largest target is 1
		 -> Task3(), Task2(), Task1(), 

    Buffer_Array.Fuction_consumer	PTR FTN()void  size(1) Largest target is 1
		 -> Task3(), Task2(), Task1(), 

    SOS_Create_Task@Function_Consumer	PTR FTN()void  size(1) Largest target is 1
		 -> Task3(), Task2(), Task1(), 

    SOS_Init@ConfigPtr	PTR const struct TMU_ConfigType size(1) Largest target is 2
		 -> TMU_Configuration(CODE[2]), 

    Timer_Deinit_Configuration0.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Configuration2_SOS.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Configuration0.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    DIO_Read@data	PTR unsigned char  size(1) Largest target is 3
		 -> pushButtonGetStatus@u8_Button_press(BANK0[3]), 

    DIO_init@DIO_info	PTR struct DIO_Cfg_s size(1) Largest target is 4
		 -> Dio_configutation_C(BANK1[4]), Dio_configutation_A_ADC(BANK0[4]), Dio_configutation_D(BANK0[4]), Dio_configutation_A_7_seg(BANK0[4]), 

    TIMER2OVF_INT	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), 
		 -> seven_seg_POV(), 

    TIMER1OVF_INT	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), 
		 -> seven_seg_POV(), 

    TIMER0OVF_INT	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), 
		 -> seven_seg_POV(), 

    S83Timer_cfg_s$Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    Timer_Configuration1_7_seg.Timer_Cbk_ptr	PTR FTN()void  size(1) Largest target is 1
		 -> timer1_interrupt_ovfRoutine(), timer0_interrupt_ovfRoutine(), timer_interrupt(), seven_seg_POV(), 

    ADC_INT	PTR FTN()void  size(1) Largest target is 1
		 -> Absolute function(), adc_interrupt_routine(), 

    ADC_INIT@ADC_info	PTR struct ADC_Cfg_s size(1) Largest target is 5
		 -> ADC_Cnfiguration(BANK1[5]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _checkmyisr in COMMON

    _seven_seg_POV->_sevenSegEnable
    _sevenSegEnable->i1_sevenSegDisable
    i1_sevenSegDisable->i1_DIO_Write

Critical Paths under _main in BANK0

    _system_init->_I2C_Master_Init
    _sevenSegInit->_sevenSegDisable
    _sevenSegDisable->_DIO_Write
    _SOS_Init->_Timer_Init
    _Timer_Init->_special_int_disable
    _Timer_Init->_special_int_enable
    _SOS_Create_Task->___bmul
    _I2C_Master_Init->___lldiv
    _ADC_INIT->_special_int_disable
    _ADC_INIT->_special_int_enable
    _SOS_Run->_Task2
    _Task2->_ADC_READ
    _sevenSegWrite->___awdiv
    _EEPROM_Write->_I2C_Master_Write
    _EEPROM_Read->_I2C_Master_Write
    _ADC_READ->_SwDelay_ms
    _Task1->_pushButtonGetStatus
    _pushButtonGetStatus->_DIO_Read

Critical Paths under _checkmyisr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _checkmyisr in BANK1

    None.

Critical Paths under _main in BANK3

    _main->_SOS_Run
    _system_init->_I2C_Master_Init

Critical Paths under _checkmyisr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _checkmyisr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   12820
                            _SOS_Run
                        _system_init
 ---------------------------------------------------------------------------------
 (1) _system_init                                          0     0      0    9241
                           _ADC_INIT
                           _DIO_init
                    _I2C_Master_Init
                    _SOS_Create_Task
                           _SOS_Init
                         _Timer_Init
                        _Timer_Start
                       _sevenSegInit
 ---------------------------------------------------------------------------------
 (2) _sevenSegInit                                         1     1      0    2969
                                             14 BANK0      1     1      0
                           _DIO_init
                         _Timer_Init
                    _sevenSegDisable
 ---------------------------------------------------------------------------------
 (3) _sevenSegDisable                                      4     4      0     885
                                             10 BANK0      4     4      0
                          _DIO_Write
 ---------------------------------------------------------------------------------
 (4) _DIO_Write                                            6     4      2     838
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _DIO_init                                             4     4      0    1003
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _SOS_Init                                             5     5      0    1644
                                             12 BANK0      5     5      0
                         _Timer_Init
                        _Timer_Start
 ---------------------------------------------------------------------------------
 (3) _Timer_Init                                           4     4      0    1032
                                              8 BANK0      4     4      0
                _special_int_disable
                 _special_int_enable
 ---------------------------------------------------------------------------------
 (2) _SOS_Create_Task                                      6     2      4    1293
                                              7 BANK0      6     2      4
                             ___bmul
 ---------------------------------------------------------------------------------
 (2) _I2C_Master_Init                                      8     4      4     525
                                             18 BANK0      4     0      4
                                              0 BANK3      4     4      0
                            ___lldiv
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             14     6      8     314
                                              4 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 (2) _ADC_INIT                                             4     4      0     403
                                              8 BANK0      4     4      0
                _special_int_disable
                 _special_int_enable
 ---------------------------------------------------------------------------------
 (4) _special_int_enable                                   4     4      0      46
                                              4 BANK0      4     4      0
                  _global_int_enable
 ---------------------------------------------------------------------------------
 (5) _global_int_enable                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _special_int_disable                                  4     4      0      46
                                              4 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SOS_Run                                              5     5      0    3579
                                             20 BANK0      1     1      0
                                              0 BANK3      4     4      0
                              _Task1 *
                              _Task2 *
                              _Task3 *
                             ___bmul
 ---------------------------------------------------------------------------------
 (3) ___bmul                                               3     2      1     430
                                              4 BANK0      3     2      1
 ---------------------------------------------------------------------------------
 (2) _Task3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Task2                                                3     3      0    2333
                                             17 BANK0      3     3      0
                           _ADC_READ
                        _EEPROM_Read
                       _EEPROM_Write
                      _sevenSegWrite
 ---------------------------------------------------------------------------------
 (3) _sevenSegWrite                                        4     4      0    1452
                                             12 BANK0      4     4      0
                        _Timer_Start
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4     448
                                              4 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4     452
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) _Timer_Start                                          6     4      2     372
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (3) _EEPROM_Write                                         3     0      3     392
                                              5 BANK0      3     0      3
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _EEPROM_Read                                          3     1      2     241
                                              5 BANK0      3     1      2
           _I2C_Master_RepeatedStart
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
                           _I2C_NACK
                      _I2C_Read_Byte
 ---------------------------------------------------------------------------------
 (4) _I2C_Read_Byte                                        0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_NACK                                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Write                                     1     1      0      22
                                              4 BANK0      1     1      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_RepeatedStart                             0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (5) _I2C_Master_Wait                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_READ                                             3     1      2     246
                                             14 BANK0      3     1      2
                         _SwDelay_ms
                         _SwDelay_us
 ---------------------------------------------------------------------------------
 (4) _SwDelay_us                                           8     4      4      99
                                              4 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (4) _SwDelay_ms                                          10     6      4     147
                                              4 BANK0     10     6      4
 ---------------------------------------------------------------------------------
 (2) _Task1                                                0     0      0     803
                _pushButtonGetStatus
 ---------------------------------------------------------------------------------
 (3) _pushButtonGetStatus                                  4     4      0     803
                                             10 BANK0      4     4      0
                           _DIO_Read
 ---------------------------------------------------------------------------------
 (4) _DIO_Read                                             6     4      2     750
                                              4 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _checkmyisr                                           4     4      0    1164
                                              0 BANK0      4     4      0
                   Absolute function *
              _adc_interrupt_routine *
                      _seven_seg_POV *
        _timer0_interrupt_ovfRoutine *
        _timer1_interrupt_ovfRoutine *
                    _timer_interrupt *
 ---------------------------------------------------------------------------------
 (7) _timer_interrupt                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer1_interrupt_ovfRoutine                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _timer0_interrupt_ovfRoutine                          0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _seven_seg_POV                                        0     0      0    1164
                     _sevenSegEnable
 ---------------------------------------------------------------------------------
 (8) _sevenSegEnable                                       4     4      0    1164
                                             10 COMMON     4     4      0
                        i1_DIO_Write
                  i1_sevenSegDisable
 ---------------------------------------------------------------------------------
 (9) i1_sevenSegDisable                                    4     4      0     589
                                              6 COMMON     4     4      0
                        i1_DIO_Write
 ---------------------------------------------------------------------------------
 (10) i1_DIO_Write                                         6     4      2     542
                                              0 COMMON     6     4      2
 ---------------------------------------------------------------------------------
 (7) _adc_interrupt_routine                                0     0      0       0
 ---------------------------------------------------------------------------------
 (7) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SOS_Run
     _Task1 *
       _pushButtonGetStatus
         _DIO_Read
     _Task2 *
       _ADC_READ
         _SwDelay_ms
         _SwDelay_us
       _EEPROM_Read
         _I2C_Master_RepeatedStart
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
         _I2C_NACK
           _I2C_Master_Wait
         _I2C_Read_Byte
           _I2C_Master_Wait
       _EEPROM_Write
         _I2C_Master_RepeatedStart
           _I2C_Master_Wait
         _I2C_Master_Start
           _I2C_Master_Wait
         _I2C_Master_Stop
           _I2C_Master_Wait
         _I2C_Master_Write
           _I2C_Master_Wait
       _sevenSegWrite
         _Timer_Start
         ___awdiv
         ___awmod
     _Task3 *
     ___bmul *
   _system_init
     _ADC_INIT
       _special_int_disable
       _special_int_enable
         _global_int_enable
     _DIO_init
     _I2C_Master_Init
       ___lldiv
     _SOS_Create_Task
       ___bmul
     _SOS_Init
       _Timer_Init
         _special_int_disable
         _special_int_enable
           _global_int_enable
       _Timer_Start
     _Timer_Init
       _special_int_disable
       _special_int_enable
         _global_int_enable
     _Timer_Start
     _sevenSegInit
       _DIO_init
       _Timer_Init
         _special_int_disable
         _special_int_enable
           _global_int_enable
       _sevenSegDisable
         _DIO_Write

 _checkmyisr (ROOT)
   Absolute function(Fake) *
   _adc_interrupt_routine *
   _seven_seg_POV *
     _sevenSegEnable
       i1_DIO_Write
       i1_sevenSegDisable
         i1_DIO_Write
   _timer0_interrupt_ovfRoutine *
   _timer1_interrupt_ovfRoutine *
   _timer_interrupt *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      4      22       9       35.4%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0      4F       7       98.8%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     16      4C       5       95.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      CB      12        0.0%
ABS                  0      0      CB       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Tue Jul 21 07:15:59 2020

                           ??_seven_seg_POV 007E                                           pc 0002  
                            ___bmul@product 004C                                          l31 0BD5  
                                        l25 0690                                          l67 0B2C  
                                        l93 0F2E                                          l86 0B9A  
                         sevenSegEnable@ret 007D                                ___awdiv@sign 0050  
                                        fsr 0004                           _last_Ten_readings 0190  
                       __end_of_system_init 057F                                         l203 070F  
                                       l133 071F                                         l142 0762  
                                       l144 0788                                         l136 0732  
                                       l401 0C5D                                         l241 0E18  
                                       l250 0965                                         l154 0CAE  
                                       l138 0742                                         l155 0CCF  
                                       l412 0A60                                         l244 07F3  
                                       l180 093B                                         l253 0957  
                                       l261 09E3                                         l181 093D  
                                       l406 0C8F                                         l262 09E9  
                                       l247 07FF                                         l256 0973  
                                       l409 0A56                                         l265 09F2  
                                       l274 0949                                         l290 0C12  
                                       l338 02C4                                         l259 09DF  
                                       l267 09F7                                         l268 0A00  
                                       l372 0434                                         l278 0AF8  
                                       l384 0ED0                                         l472 07F2  
                                       l721 0D68                                         l481 0352  
                                       l458 0608                                         l483 0382  
                                       l732 0C4F                                         l652 057E  
                                       l397 0C85                                         l549 01AE  
                                       l566 0B3F                                         l399 0C64  
                                       l735 0003                                         l568 0B61  
                                       l657 0979                                         l847 0A17  
                                       l857 0F96                                         l974 0FFF  
                                       l987 0E73                                         _PEN 048A  
                                       _SEN 0488                                         _ret 006B  
                                       fsr0 0004                                         indf 0000  
                              ___awmod@sign 0050                          sevenSegDisable@ret 0054  
                  fp__adc_interrupt_routine 0076                    __size_of_SOS_Create_Task 006A  
                                      l4001 06DB                                        l4003 06E9  
                                      l4005 06F0                                        l3301 0761  
                                      l4007 06F4                                        l4031 0AD6  
                                      l3303 0768                                        l4017 06FB  
                                      l4041 0BD6                                        l4033 0ADB  
                                      l3321 0CA1                                        l3305 076D  
                                      l4121 0616                                        l4019 070E  
                                      l4051 0C0A                                        l4043 0BE0  
                                      l4035 0AE3                                        l4027 0AC6  
                                      l3323 0CA8                                        l3315 0C93  
                                      l3307 0786                                        l4131 0645  
                                      l4123 0623                                        l3411 0423  
                                      l3341 0C56                                        l3501 09E4  
                                      l4053 0C0F                                        l4045 0BE8  
                                      l4037 0AEB                                        l4029 0ACB  
                                      l4301 0C4B                                        l4061 0A09  
                                      l3317 0C95                                        l3261 0933  
                                      l4133 065D                                        l4125 0629  
                                      l4117 060C                                        l3405 0405  
                                      l3413 0433                                        l3343 0C5B  
                                      l3351 0A3A                                        l3511 09FD  
                                      l4047 0BF5                                        l4039 0AF3  
                                      l4063 0A0D                                        l3319 0C9A  
                                      l3327 0CB4                                        l3263 093A  
                                      l3271 0715                                        l4135 0662  
                                      l4143 0679                                        l4127 0635  
                                      l4119 060D                                        l3407 041E  
                                      l3345 0C62                                        l3337 0C50  
                                      l3265 07F3                                        l3505 09EA  
                                      l4049 0BFB                                        l3441 0B40  
                                      l3433 0B30                                        l3521 0F97  
                                      l4065 0A0F                                        l4057 0A04  
                                      l3329 0CCD                                        l3281 072A  
                                      l3273 0719                                        l4145 068D  
                                      l4137 066D                                        l4129 063D  
                                      l4081 0F51                                        l4073 0F2F  
                                      l3361 038F                                        l3353 0386  
                                      l3347 0C69                                        l3339 0C51  
                                      l3267 07F9                                        l3515 093E  
                                      l3507 09EF                                        l3443 0B47  
                                      l3435 0B32                                        l3531 0FA9  
                                      l3523 0F9A                                        l4067 0A11  
                                      l4059 0A05                                        l3291 0748  
                                      l3283 0731                                        l3275 071E  
                                      l4139 0672                                        l4091 0F7F  
                                      l4083 0F55                                        l4075 0F41  
                                      l4251 078D                                        l3363 0391  
                                      l3371 0397                                        l3355 0387  
                                      l3461 0E82                                        l3349 0A39  
                                      l3701 0BAA                                        l3517 0941  
                                      l3509 09F8                                        l3437 0B39  
                                      l3541 0FBD                                        l3533 0FAE  
                                      l3525 0F9E                                        l4069 0A16  
                                      l3293 074D                                        l3285 0735  
                                      l3277 0722                                        l3269 0713  
                                      l4093 0F88                                        l4085 0F5E  
                                      l4077 0F44                                        l4261 07EB  
                                      l4253 0791                                        l5301 00DD  
                                      l3381 03C4                                        l3365 0393  
                                      l3373 03B0                                        l3463 0E8B  
                                      l3711 0BCD                                        l3703 0BB0  
                                      l3519 0946                                        l3439 0B3D  
                                      l3447 0B4C                                        l3551 0FE3  
                                      l3543 0FC4                                        l3535 0FB2  
                                      l3527 0FA3                                        l4271 0D2B  
                                      l3287 073A                                        l3279 0727  
                                      l4087 0F70                                        l4079 0F4D  
                                      l4095 0F8E                                        l4263 07EF  
                                      l4255 0796                                        l5311 0105  
                                      l5303 00E6                                        l3391 03EC  
                                      l3383 03C9                                        l3375 03B5  
                                      l3367 0395                                        l3359 038D  
                                      l3465 0E94                                        l3473 0EAB  
                                      l3457 0E77                                        l3705 0BB1  
                                      l3449 0B5F                                        l3561 0FFB  
                                      l3553 0FE4                                        l3545 0FC8  
                                      l3537 0FB4                                        l3529 0FA5  
                                      l4281 0D4D                                        l4273 0D33  
                                      l3297 0755                                        l3289 0741  
                                      l4089 0F7E                                        l4257 07E0  
                                      l4249 078C                                        l5313 010D  
                                      l5401 01BF                                        l3393 03F1  
                                      l3385 03CE                                        l3377 03BA  
                                      l3467 0E9D                                        l3475 0EC4  
                                      l3459 0E79                                        l3707 0BBE  
                                      l3491 094F                                        l3555 0FEB  
                                      l3547 0FCC                                        l3539 0FBA  
                                      l3571 0E25                                        l4283 0D4E  
                                      l4275 0D34                                        l4267 0D1A  
                                      l4291 0C13                                        l3299 075A  
                                      l4259 07E6                                        l5331 0157  
                                      l5315 0118                                        l5323 012D  
                                      l5403 01C3                                        l5411 01CF  
                                      l3395 03F6                                        l3379 03BF  
                                      l3477 0ECC                                        l3469 0EA6  
                                      l3709 0BC1                                        l3485 0958  
                                      l3493 0966                                        l3549 0FDD  
                                      l3557 0FF1                                        l3581 0E39  
                                      l3573 0E27                                        l3565 0E19  
                                      l4285 0D59                                        l4277 0D3F  
                                      l4269 0D25                                        l4293 0C16  
                                      l5333 015F                                        l5325 0140  
                                      l5317 0121                                        l5309 00F2  
                                      l5405 01C7                                        l5413 01EB  
                                      l3397 03FB                                        l3389 03D3  
                                      l5501 0B20                                        l3487 095D  
                                      l3495 096B                                        l3559 0FF6  
                                      l3591 0E58                                        l3583 0E40  
                                      l3575 0E2B                                        l3567 0E1C  
                                      l4287 0D5F                                        l4279 0D45  
                                      l4295 0C23                                        l5511 0DC7  
                                      l5335 016A                                        l5343 017F  
                                      l5351 01AD                                        l5431 0230  
                                      l5423 0208                                        l5407 01CB  
                                      l5415 01F0                                        l3399 0400  
                                      l5503 0B2B                                        l3489 094A  
                                      l3497 09D6                                        l3593 0E5F  
                                      l3585 0E44                                        l3577 0E30  
                                      l3569 0E20                                        l4289 0D67  
                                      l4297 0C2F                                        l5513 0E12  
                                      l5345 0192                                        l5337 0173  
                                      l5329 0145                                        l5281 0088  
                                      l5521 058D                                        l5441 0264  
                                      l5433 023A                                        l5425 0212  
                                      l5417 01F8                                        l3499 09DB  
                                      l3587 0E48                                        l3579 0E36  
                                      l3595 0E65                                        l4299 0C42  
                                      l5515 0E13                                        l5507 0DC0  
                                      l5291 00B1                                        l5283 008A  
                                      l5531 05A3                                        l5523 058E  
                                      l5443 026E                                        l5427 021C  
                                      l5419 0201                                        l6411 0B91  
                                      l3597 0E6A                                        l3589 0E52  
                                      l5517 0E17                                        l5509 0DC4  
                                      l5285 0091                                        l5349 0197  
                                      l5541 05C5                                        l5533 05A9  
                                      l5525 0592                                        l5453 028C  
                                      l5445 0278                                        l5437 023F  
                                      l5429 0226                                        l5461 02BE  
                                      l6421 01DA                                        l6413 039F  
                                      l3933 0B89                                        l3925 0B65  
                                      l5613 0974                                        l3599 0E6F  
                                      l3951 0F0D                                        l3943 0ED4  
                                      l5287 009C                                        l5295 00B6  
                                      l6431 05E8                                        l5543 05D0  
                                      l5535 05B0                                        l5527 0597  
                                      l5519 0582                                        l5455 02A7  
                                      l5447 0282                                        l5439 025A  
                                      l6423 0249                                        l5463 02C2  
                                      l5391 01B2                                        l6415 03DB  
                                      l3935 0B99                                        l3927 0B67  
                                      l3961 0F1E                                        l3953 0F12  
                                      l3945 0ED5                                        l6441 014F  
                                      l5297 00C9                                        l5289 00A5  
                                      l6433 0600                                        l5545 05DB  
                                      l5529 059C                                        l6425 0296  
                                      l5393 01B3                                        l6417 040D  
                                      l3929 0B78                                        l3971 06A4  
                                      l3699 0B9B                                        l3963 0F2D  
                                      l3955 0F18                                        l3947 0EDB  
                                      l6451 0CBC                                        l6443 018A  
                                      l5299 00D2                                        l6435 00C1  
                                      l5555 05F0                                        l5539 05B5  
                                      l6427 02B6                                        l5459 02AC  
                                      l5395 01B5                                        l6419 042B  
                                      l5491 0AF9                                        l3973 06AB  
                                      l6453 0B54                                        l3949 0EE1  
                                      l5573 02C5                                        l6445 01A2  
                                      l6437 00FD                                        l5549 05E0  
                                      l5557 0605                                        l6429 05BD  
                                      l5493 0AF9                                        l6455 0703  
                                      l3991 06D9                                        l3983 06BA  
                                      l3975 06AF                                        l3967 0694  
                                      l3959 0F1A                                        l5591 0366  
                                      l5583 02CE                                        l5575 02C5  
                                      l6447 0685                                        l6439 0138  
                                      l5399 01BB                                        l5495 0AFF  
                                      l6457 0EB3                                        l3985 06C8  
                                      l3977 06B5                                        l3969 0696  
                                      l5593 0376                                        l5585 02E0  
                                      l5577 02CC                                        l6449 0775  
                                      l5497 0B0A                                        l3987 06CF  
                                      l3979 06B8                                        l5595 037C  
                                      l5587 02E1                                        l5499 0B15  
                                      l3989 06D3                                        l5589 032B  
                                      l5597 04E7                                        l5599 0571  
                                      u1000 093A                                        u1001 0939  
                                      u1010 07F9                                        u1011 07F8  
                                      u1100 0C85                                        u1020 07FF  
                                      u1021 07FE                                        u1110 0C8F  
                                      u1030 071E                                        u1111 0C8E  
                                      u1031 071D                                        u1120 0A56  
                                      u1200 0FBA                                        u1040 0731  
                                      u2000 0DE5                                        u1105 0C78  
                                      u1201 0FB9                                        u1041 0730  
                                      u1106 0C79                                        u1130 0A60  
                                      u1050 0741                                        u2010 0597  
                                      u1107 0C7E                                        u1131 0A5F  
                                      u1051 0740                                        u2011 0596  
                                      u1108 0C7F                                        u1220 0FCC  
                                      u1300 0E36                                        u2020 02CC  
                                      u1060 0754                                        u1140 038C  
                                      u1109 0C84                                        u1125 0A49  
                                      u1221 0FCB                                        u1301 0E35  
                                      u2021 02CB                                        u1061 0753  
                                      u2005 0DE0                                        u1141 038B  
                                      u1150 0ECC                                        u1126 0A4A  
                                      u2030 02E0                                        u1070 0761  
                                      u1151 0ECB                                        u1127 0A4F  
                                      u1215 0FBE                                        u2031 02DF  
                                      u1071 0760                                        u1080 0C62  
                                      u1128 0A50                                        u1160 09E3  
                                      u1240 0FDD                                        u1320 0E48  
                                      u2040 032B                                        u1081 0C61  
                                      u1129 0A55                                        u1161 09E2  
                                      u1241 0FDC                                        u1321 0E47  
                                      u2041 032A                                        u1090 0C69  
                                      u1170 09F7                                        u1330 0E52  
                                      u2050 0366                                        u1091 0C68  
                                      u1171 09F6                                        u1235 0FCD  
                                      u1331 0E51                                        u1315 0E3A  
                                      u2051 0365                                        u1500 06F0  
                                      u1260 0FF1                                        u1180 0F9E  
                                      u2060 0382                                        u1501 06EF  
                                      u1261 0FF0                                        u1245 0FD9  
                                      u1181 0F9D                                        u2061 0381  
                                      u2045 0327                                        u1510 06FA  
                                      u1270 0FF6                                        u1190 0FA9  
                                      u1350 0E65                                        u1430 0EDB  
                                      u1511 06F9                                        u1271 0FF5  
                                      u1255 0FE5                                        u1191 0FA8  
                                      u1351 0E64                                        u1335 0E4E  
                                      u1431 0EDA                                        u1520 0AD6  
                                      u1360 0E6A                                        u1280 0E20  
                                      u1440 0EE1                                        u1521 0AD5  
                                      u1361 0E69                                        u1345 0E59  
                                      u1281 0E1F                                        u1441 0EE0  
                                      u1290 0E2B                                        u1450 0F18  
                                      u1530 0A09                                        u1610 0F8E  
                                      u1291 0E2A                                        u1451 0F17  
                                      u1531 0A08                                        u1611 0F8D  
                                      u1460 06AB                                        u1700 0D33  
                                      u1540 0A16                                        u1620 0616  
                                      u1461 06AA                                        u1701 0D32  
                                      u1541 0A15                                        u1621 0615  
                                      u1605 0F80                                        u1470 06B5  
                                      u1390 0BCD                                        u1710 0D3F  
                                      u1630 063D                                        u1550 0F41  
                                      u1471 06B4                                        u1391 0BCC  
                                      u1711 0D3E                                        u1631 063C  
                                      u1551 0F40                                        u1480 06CF  
                                      u1720 0D4D                                        u1640 0645  
                                      u1481 06CE                                        u1385 0BC4  
                                      u1721 0D4C                                        u1641 0644  
                                      u1490 06D9                                        u1730 0D59  
                                      u1570 0F55                                        u1491 06D8  
                                      u1731 0D58                                        u1571 0F54  
                                      u1740 0D67                                        u1741 0D66  
                                      u1565 0F46                                        u1590 0F70  
                                      u1670 0796                                        u1591 0F6F  
                                      u1671 0795                                        u1680 07E6  
                                      u1585 0F57                                        u1681 07E5  
                                      u1690 0D25                                        u1691 0D24  
                                      u1595 0F6C                                        u1970 01BA  
                                      u1971 01B9                                        u1980 01F8  
                                      u1981 01F7                                        u1990 0207  
                                      u1991 0206                                        i1l34 099E  
                                      _RCEN 048B                                        i1l72 0A92  
                                      i1l86 0AC5                                        i1l79 0D19  
       __end_of_timer0_interrupt_ovfRoutine 09AE                 _timer0_interrupt_ovfRoutine 099F  
                                      _RSEN 0489                            __end_of_I2C_NACK 094A  
                        __size_of_DIO_Write 00B2            __end_of_I2C_Master_RepeatedStart 0958  
                          __end_of_ADC_INIT 0691                            __end_of_ADC_READ 0BD6  
                                      _main 0974                                        fp_u0 0062  
                                      fp_u1 0063                                        fp_u2 0064  
                                      fp_u3 0065                                        fp_u4 0066  
                                      btemp 007E                           ADC_INIT@ret_error 0051  
                           __end_of_SOS_Run 0383                                        start 0012  
                           EEPROM_Write@add 004C                           ___bmul@multiplier 004D  
               _Timer_Deinit_Configuration0 00C9                 _Timer_Deinit_Configuration1 00C0  
               _Timer_Deinit_Configuration2 00BB                            __end_of_DIO_Read 0ED1  
                      __end_of_EEPROM_Write 0AF9                            __end_of_DIO_init 02C5  
                          ?_I2C_Master_Init 0059                            ?_I2C_Master_Wait 0070  
                          ?_I2C_Master_Stop 0070                                ?i1_DIO_Write 0070  
                                     ?_main 0070                                       _ACKEN 048C  
                                     _ACKDT 048D                             __end_of___awdiv 1000  
                           _sevenSegDisable 0B62                             __end_of___awmod 0E74  
                             DIO_Write@GPIO 0050                             __end_of___lldiv 0F97  
                           ___awdiv@divisor 004B                                       i1l128 0DB3  
                                     i1l372 04E6                                       i1l552 09AD  
                                     i1l491 0932                                       i1l555 09BF  
                           ___awdiv@counter 004F                                       _TRISC 0087  
                                     _SSPIF 0063                  __size_of_global_int_enable 000B  
                             DIO_Write@pins 004B                                       _Task1 0D1A  
                                     _Task2 0C13                                       _Task3 0003  
                    __size_of_I2C_Read_Byte 0017                          DIO_Write@ret_error 004F  
                                     _start 00B5                                       fpbase 0061  
                                     pclath 000A                            __end_of_SOS_Init 0609  
                                     status 0003                                       wtemp0 007E  
                          EEPROM_Write@data 004E             pushButtonGetStatus@en_butotn_id 0053  
                      __size_of_EEPROM_Read 003D                             __initialization 0015  
                         _last_temp_reading 0028                                 _system_init 04E7  
                              __end_of_main 0982                         _special_int_disable 0C90  
                  __size_of_timer_interrupt 000B              i1sevenSegDisable@en_segment_id 0078  
                        fp__timer_interrupt 0079                                      ??_main 005D  
                         __end_of_DIO_Write 0435            SOS_Create_Task@Function_Consumer 0052  
                         ?_I2C_Master_Start 0070                SOS_Create_Task@u8_Preodicity 004E  
                         ?_I2C_Master_Write 0070                                      ?_Task1 0070  
                                    ?_Task2 0070                                      ?_Task3 0070  
                        ??_I2C_Master_Start 004B                          ??_I2C_Master_Write 004B  
                          ___awdiv@dividend 004D                                  _SwDelay_ms 0C50  
                                _SwDelay_us 0A39                                   ??_SOS_Run 01AE  
                      ?_special_int_disable 0070                                      i1l4101 0A96  
                                    i1l4103 0AA5                                      i1l4107 0AB4  
                                    i1l4109 0AC4                                      i1l4303 0990  
                                    i1l4311 0A6A                                      i1l4305 099A  
                                    i1l4321 0A89                                      i1l4313 0A70  
                                    i1l4401 0DA5                                      i1l3611 0441  
                                    i1l3603 0436                                      i1l4171 0CD3  
                                    i1l4315 0A7E                                      i1l4323 0A8A  
                                    i1l4307 0A61                                      i1l4403 0DAB  
                                    i1l3613 0443                                      i1l3621 0449  
                                    i1l3605 0437                                      i1l4173 0CEE  
                                    i1l4325 0A8E                                      i1l4317 0A7F  
                                    i1l4309 0A69                                      i1l3631 0476  
                                    i1l3615 0445                                      i1l3623 0462  
                                    i1l4319 0A83                                      i1l3641 049E  
                                    i1l3633 047B                                      i1l3625 0467  
                                    i1l3617 0447                                      i1l3609 043F  
                                    i1l4177 0D09                                      i1l4169 0CD1  
                                    i1l4361 099F                                      i1l3643 04A3  
                                    i1l3635 0480                                      i1l3627 046C  
                                    i1l4099 0A94                                      i1l4363 09A2  
                                    i1l4371 09B1                                      i1l3645 04A8  
                                    i1l3629 0471                                      i1l3661 04D5  
                                    i1l4357 0928                                      i1l4365 09A5  
                                    i1l4373 09B7                                      i1l4381 0D69  
                                    i1l3655 04B7                                      i1l3647 04AD  
                                    i1l3639 0485                                      i1l3663 04E5  
                                    i1l4359 092E                                      i1l4367 09A9  
                                    i1l4375 09BB                                      i1l4391 0D83  
                                    i1l4383 0D6D                                      i1l3657 04D0  
                                    i1l3649 04B2                                      i1l4369 09AE  
                                    i1l4393 0D8B                                      i1l4385 0D71  
                                    i1l4395 0D91                                      i1l4387 0D77  
                                    i1l4397 0D97                                      i1l4389 0D7D  
                                    i1l4399 0D9F                                      i1l6461 0ABC  
                                    i1l6463 0451                                      i1l6465 048D  
                                    i1l6467 04BF                                      i1l6459 0D11  
                                    i1l6469 04DD                                      u137_20 043E  
                                    u137_21 043D                                      u182_20 0D6D  
                                    u182_21 0D6C                                      u175_20 0A69  
                                    u183_20 0D71                                      u175_21 0A68  
                                    u183_21 0D70                                      u176_20 0A89  
                                    u184_20 0D7D                                      u176_21 0A88  
                                    u184_21 0D7C                                      u185_20 0D83  
                                    u185_21 0D82                                      u186_20 0D91  
                                    u186_21 0D90                                      u187_20 0D97  
                                    u187_21 0D96                                      u188_20 0DA5  
                                    u188_21 0DA4                                      u189_20 0DAB  
                                    u189_21 0DAA                                  __i1fptable 0070  
                       _pushButtonGetStatus 0691                                      _SSPADD 0093  
                                    _SSPCON 0014                                      _SSPBUF 0013  
                          __end_of__fptable 0070                           ??_SOS_Create_Task 0052  
                            DIO_Write@value 004C                      DIO_Write@first_powerup 0039  
                  _I2C_Master_RepeatedStart 094A                                      ___bmul 0A01  
                             _I2C_Read_Byte 09EA                     __end_of_sevenSegDisable 0B9B  
                                 ??___awdiv 004F                                   ??___awmod 004F  
                                 ??___lldiv 0053                                  _Prescaler0 005E  
                                _Prescaler1 0034                                  _Timer_Init 0085  
                          ___awdiv@quotient 0051                             ___awmod@divisor 004B  
                      ?_pushButtonGetStatus 0070                             ___awmod@counter 004F  
                             ??_Timer_Start 004D                                   ?_I2C_NACK 0070  
                                    fptable 005C                                   ?_ADC_INIT 0070  
                                 ?_ADC_READ 0055                                      fptotal 0006  
                     _adc_interrupt_routine 0990                                      saved_w 007E  
                           i1DIO_Write@GPIO 0075                       ??_special_int_disable 004B  
                           i1DIO_Write@pins 0070                                   ?_DIO_Read 004B  
                         SOS_Init@ConfigPtr 0057                     __end_of__initialization 0058  
              ?_timer1_interrupt_ovfRoutine 0070                                   ?_DIO_init 004B  
                     __size_of_EEPROM_Write 0033                       SOS_Init@u8_channel_ID 0055  
                       ___bmul@multiplicand 004B                        Timer_Start@ret_error 0050  
                           sevenSegInit@ret 0055                              ?_I2C_Read_Byte 0070  
               special_int_enable@ret_error 004E                              __pcstackCOMMON 0070  
                             __end_of_Task1 0D69                               __end_of_Task2 0C50  
                             __end_of_Task3 0004                                __pidataBANK0 0982  
                              __pidataBANK1 0A18                                __pidataBANK3 091E  
                               SwDelay_ms@n 004B                                 SwDelay_us@n 004B  
                __end_of_special_int_enable 0789                       ??_pushButtonGetStatus 0051  
                                 ?_SOS_Init 0070              fp__timer0_interrupt_ovfRoutine 007F  
                                ??_I2C_NACK 004B                        __size_ofi1_DIO_Write 00B2  
                                ??_ADC_INIT 004F                                  ??_ADC_READ 0057  
                                   ??_Task1 0055                                     ??_Task2 0058  
                                   ??_Task3 004B                           ??_timer_interrupt 0070  
                            _u8_timer2Count 0033                         __end_of_Timer_Start 0B62  
                       Timer_Init@Timer_cfg 0052                       __end_of_sevenSegWrite 0F2F  
                               ?_SwDelay_ms 004B                                 ?_SwDelay_us 004B  
                              _EEPROM_Write 0AC6                                  __pbssBANK0 0020  
                                __pbssBANK1 00A0                                  __pbssBANK3 0190  
                                ??_DIO_Read 004D                                  ??_DIO_init 004B  
                                _checkmyisr 0D69                            _u8_Is_Intialized 0037  
             ??_timer1_interrupt_ovfRoutine 0070                                Task2@EE_Data 002F  
                         DIO_Read@ret_error 004F                                  __pmaintext 0974  
                                   ?___bmul 004B                            ?_sevenSegDisable 0070  
                                __pintentry 0004                                 ?_Timer_Init 004F  
                     __end_of_seven_seg_POV 0A93                     __size_of_sevenSegEnable 004A  
                                   _ADC_INT 0043                                     _ACKSTAT 048E  
                                ??_SOS_Init 0053                      ?_adc_interrupt_routine 0070  
                         _TMU_Configuration 0806                            ADC_INIT@ADC_info 0052  
                                   _SSPCON2 0091                                _Buffer_Array 00A0  
                                   _SSPSTAT 0094                                  __stringtab 0800  
                                   _SOS_Run 02C5                                     i1fpbase 0075  
                           ??_I2C_Read_Byte 004B                  DIO_init@first_powerup_init 003A  
                              ?_system_init 0070                             _u16_result_data 002C  
                           __size_of___bmul 0017                                     ___awdiv 0F97  
                                   ___awmod 0E19                                     ___lldiv 0F2F  
                       __size_of_SwDelay_ms 0040                         __size_of_SwDelay_us 0028  
                 __end_of_TMU_Configuration 0808                               ?_sevenSegInit 0070  
                                   __ptext1 04E7                                     __ptext2 0AF9  
                                   __ptext3 0B62                                     __ptext4 0383  
                                   __ptext5 01AF                                     __ptext6 057F  
                                   __ptext7 0085                                     __ptext8 0789  
                                   __ptext9 0DC0        __size_of_timer1_interrupt_ovfRoutine 0012  
                       __size_of__i1fptable 0015                                 _Timer_Start 0B2D  
                                   _is_init 003B                            ___awmod@dividend 004D  
                       Timer_Init@ret_error 0051                             _SOS_Create_Task 0789  
                                 _DIO_Write 0383                    __size_of_I2C_Master_Init 0059  
                  __size_of_I2C_Master_Wait 000D                    __size_of_I2C_Master_Stop 000E  
                                   clrloop0 0917                        end_of_initialization 0058  
                ??_I2C_Master_RepeatedStart 004B                         __size_of_Timer_Init 012A  
                             ??_EEPROM_Read 004E                                 ?_checkmyisr 0070  
                 __size_of_I2C_Master_Start 000E                   __size_of_I2C_Master_Write 0017  
                           ___lldiv@divisor 004B                               _Segments_Code 01A4  
                           ___lldiv@counter 0058                                _disp_counter 0041  
             SOS_Create_Task@u16_Time_delay 0050                              ??_sevenSegInit 0055  
                  sevenSegEnable@segment_id 007C                            i1DIO_Write@value 0071  
                                ?_DIO_Write 004B                           __size_of_I2C_NACK 000C  
                         __size_of_ADC_INIT 0088                           __size_of_ADC_READ 003B  
             pushButtonGetStatus@pushreturn 0054          pushButtonGetStatus@u8_Button_press 0044  
                 _Dio_configutation_A_7_seg 0067                           __size_of_DIO_Read 005D  
                         __size_of_DIO_init 0116                               _TIMER0OVF_INT 003E  
                             _TIMER1OVF_INT 003D                               _TIMER2OVF_INT 003C  
                       __end_of_EEPROM_Read 0C13                              _sevenSegEnable 0CD0  
                            __end_of___bmul 0A18                             _timer_interrupt 0928  
                      _u8global_int_enabled 0040                          SOS_Create_Task@ret 0053  
                   __end_of_SOS_Create_Task 07F3                         __size_of_checkmyisr 0057  
                    Timer_Start@Timer_CH_NO 004F                 __end_of_special_int_disable 0CD0  
                       start_initialization 0015                           __size_of_SOS_Init 008A  
                    Timer_Start@Timer_Count 004B                          _special_int_enable 0710  
                              ??_SwDelay_ms 004F                                ??_SwDelay_us 004F  
              ?_timer0_interrupt_ovfRoutine 0070                           ??_I2C_Master_Init 01AE  
                         ??_I2C_Master_Wait 004B                           ??_I2C_Master_Stop 004B  
          SOS_Create_Task@u8_function_index 004F                         ?_special_int_enable 0070  
                          _u8_Init_finished 0038                           DIO_init@ret_error 004D  
               __end_of_pushButtonGetStatus 0710                      __end_of_sevenSegEnable 0D1A  
                                  ??___bmul 004C                            sevenSegWrite@ret 0055  
                    sevenSegWrite@u8_number 0056                                  init_fetch0 09C0  
                       _Dio_configutation_B 00D3                         _Dio_configutation_C 00EB  
                       _Dio_configutation_D 0063                         _Dio_configutation_E 00C5  
                              ??_Timer_Init 004F                                 __pdataBANK0 005D  
                               __pdataBANK1 00CE                                 __pdataBANK3 01A4  
                   ??_adc_interrupt_routine 0070                        __size_of_system_init 0098  
                             ??i1_DIO_Write 0072                          __end_of_SwDelay_ms 0C90  
                        __end_of_SwDelay_us 0A61                        ??_special_int_enable 004B  
                           Task2@EE_Address 005D                          __end_of__i1fptable 0085  
                                 ___latbits 0002                                 ??_DIO_Write 004D  
                               SOS_Init@ret 0056                               __pcstackBANK0 0047  
                             __pcstackBANK3 01AE                           __size_of__fptable 0014  
 special_int_enable@u8_interrupt_prepherals 004D                                    ?_SOS_Run 0070  
                        __end_of_Timer_Init 01AF                        __end_of_sevenSegInit 0B2D  
                          DIO_init@DIO_info 004E                                 _EEPROM_Read 0BD6  
                   _u8prepheral_int_enabled 003F               ??_timer0_interrupt_ovfRoutine 0070  
                                 __pnvBANK0 006B                            _I2C_Master_Start 0958  
                  _Timer_Configuration2_SOS 00D7                            _I2C_Master_Write 09D3  
                   __end_of_timer_interrupt 0933                        _Timer_Configuration0 00DC  
                      _Timer_Configuration1 00CE                                   __pfunctab 005C  
                           ?_sevenSegEnable 0070                                    ?___awdiv 004B  
                                  ?___awmod 004B                                    ?___lldiv 004B  
                         i1_sevenSegDisable 0A93                      __size_of_sevenSegWrite 005E  
                      I2C_Master_Write@data 004B                            ?_SOS_Create_Task 004E  
                                 __pstrings 0800                          ?i1_sevenSegDisable 0070  
                              ?_Timer_Start 004B                                    _I2C_NACK 093E  
                                  _ADC_INIT 0609                                    _ADC_READ 0B9B  
                  __size_of_sevenSegDisable 0039                         __end_ofi1_DIO_Write 04E7  
                            __size_of_Task1 004F                              __size_of_Task2 003D  
                            __size_of_Task3 0001                         ??i1_sevenSegDisable 0076  
                                  _DIO_Read 0E74         __end_of_timer1_interrupt_ovfRoutine 09C0  
               _timer1_interrupt_ovfRoutine 09AE                      __size_of_seven_seg_POV 0032  
                          fp__seven_seg_POV 007C                           interrupt_function 0004  
                                  _DIO_init 01AF                                ??_checkmyisr 0047  
                                 clear_ram0 0916                                 _arr_display 002A  
                     Task2@readings_counter 002E                     _Dio_configutation_A_ADC 005F  
                     __end_of_I2C_Read_Byte 0A01                   __end_ofi1_sevenSegDisable 0AC6  
      __size_of_timer0_interrupt_ovfRoutine 000F                                 __stringbase 0805  
                                  _SOS_Init 057F                               Task2@adc_data 0026  
                        __end_of_checkmyisr 0DC0                        i1sevenSegDisable@ret 0079  
                       I2C_Master_Init@baud 0059                                    i1fptable 0070  
                                  i1fptotal 000B                               _sevenSegWrite 0ED1  
              sevenSegDisable@en_segment_id 0053                            __size_of_SOS_Run 00BE  
                          ?_timer_interrupt 0070  special_int_disable@u8_interrupt_prepherals 004D  
                              _u8_FUN_index 0036           __size_of_I2C_Master_RepeatedStart 000E  
                          __size_of___awdiv 0069                            __size_of___awmod 005B  
                 ?_I2C_Master_RepeatedStart 0070                            __size_of___lldiv 0068  
                _Timer_Configuration1_7_seg 00E1                               _seven_seg_POV 0A61  
                               i1_DIO_Write 0435                          __end_of__stringtab 0806  
                     SwDelay_ms@counter_256 0053                                    __fptable 005C  
                           _I2C_Master_Init 0DC0                             _I2C_Master_Wait 07F3  
                           _I2C_Master_Stop 0966                       _u8Excution_to_be_done 0035  
                                  __ptext10 0F2F                                    __ptext11 0609  
                                  __ptext20 0ED1                                    __ptext12 0710  
                                  __ptext21 0E19                                    __ptext13 0933  
                                  __ptext30 0958                                    __ptext22 0F97  
                                  __ptext14 0C90                                    __ptext31 094A  
                                  __ptext23 0B2D                                    __ptext15 02C5  
                                  __ptext40 099F                                    __ptext32 07F3  
                                  __ptext24 0AC6                                    __ptext16 0A01  
                                  __ptext41 0A61                                    __ptext33 0B9B  
                                  __ptext25 0BD6                                    __ptext17 0C13  
                                  __ptext42 0928                                    __ptext34 0A39  
                                  __ptext26 09EA                                    __ptext18 0D1A  
                                  __ptext43 0CD0                                    __ptext35 0C50  
                                  __ptext27 093E                                    __ptext19 0003  
                                  __ptext44 0A93                                    __ptext36 0691  
                                  __ptext28 09D3                                    __ptext45 0435  
                                  __ptext37 0E74                                    __ptext29 0966  
                                  __ptext46 0990                                    __ptext38 0D69  
                                  __ptext39 09AE                       __size_of_sevenSegInit 0034  
                      i1DIO_Write@ret_error 0074                              ?_sevenSegWrite 0070  
                             ?_EEPROM_Write 004C                           ??_sevenSegDisable 0051  
                             __size_of_main 000E       pushButtonGetStatus@u8_S_button_status 0023  
                                  fp__Task1 006A                                    fp__Task2 006D  
                                  fp__Task3 0067                  __size_ofi1_sevenSegDisable 0033  
              special_int_disable@ret_error 004E                              ?_seven_seg_POV 0070  
            __size_of_adc_interrupt_routine 000F               __end_of_adc_interrupt_routine 099F  
                              _sevenSegInit 0AF9                    __end_of_I2C_Master_Start 0966  
                  __end_of_I2C_Master_Write 09EA                        __size_of_Timer_Start 0035  
                          Task1@u8_Counter1 0032                            Task1@u8_Counter2 0030  
                                  init_ram0 09C4                           _global_int_enable 0933  
                            ??_EEPROM_Write 004F                          ?_global_int_enable 0070  
                                  intlevel1 005C                        SwDelay_ms@counter_21 0054  
              __size_of_special_int_disable 0040                                ?_EEPROM_Read 004C  
                          ___lldiv@dividend 004F                            ??_sevenSegEnable 007A  
                       ??_global_int_enable 004B                                   stringcode 0800  
                             ??_system_init 005D                     __end_of_I2C_Master_Init 0E19  
                   __end_of_I2C_Master_Wait 0800                     __end_of_I2C_Master_Stop 0974  
                          _ADC_Cnfiguration 00E6                                 _ovf_counter 0042  
                           Task1@u8_Counter 0031                __size_of_pushButtonGetStatus 007F  
            fp__timer1_interrupt_ovfRoutine 0082                 __size_of_special_int_enable 0079  
                          ___lldiv@quotient 0054                   __end_of_global_int_enable 093E  
                                  stringdir 0800                                    stringtab 0800  
                           ??_sevenSegWrite 0053                                DIO_Read@GPIO 0050  
                              _Start_status 0020                                DIO_Read@data 004C  
                              DIO_Read@pins 004B                             EEPROM_Read@Data 004E  
                            EEPROM_Read@add 004C  
